
ProjectDigitalIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a68  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084a68  00084a68  0000ca68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000099c  20070000  00084a70  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001f0  2007099c  0008540c  0001099c  2**2
                  ALLOC
  4 .stack        00002004  20070b8c  000855fc  0001099c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0001099c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109c5  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000f383  00000000  00000000  00010a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026e8  00000000  00000000  0001fda3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006134  00000000  00000000  0002248b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b30  00000000  00000000  000285bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a08  00000000  00000000  000290ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001955c  00000000  00000000  00029af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fa84  00000000  00000000  00043053  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006bad0  00000000  00000000  00052ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000023a0  00000000  00000000  000be5a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b90 	.word	0x20072b90
   80004:	000816dd 	.word	0x000816dd
   80008:	000816d9 	.word	0x000816d9
   8000c:	000816d9 	.word	0x000816d9
   80010:	000816d9 	.word	0x000816d9
   80014:	000816d9 	.word	0x000816d9
   80018:	000816d9 	.word	0x000816d9
	...
   8002c:	000816d9 	.word	0x000816d9
   80030:	000816d9 	.word	0x000816d9
   80034:	00000000 	.word	0x00000000
   80038:	000816d9 	.word	0x000816d9
   8003c:	000816d9 	.word	0x000816d9
   80040:	000816d9 	.word	0x000816d9
   80044:	000816d9 	.word	0x000816d9
   80048:	000816d9 	.word	0x000816d9
   8004c:	000816d9 	.word	0x000816d9
   80050:	000816d9 	.word	0x000816d9
   80054:	000816d9 	.word	0x000816d9
   80058:	000816d9 	.word	0x000816d9
   8005c:	000816d9 	.word	0x000816d9
   80060:	000816d9 	.word	0x000816d9
   80064:	000816d9 	.word	0x000816d9
   80068:	00000000 	.word	0x00000000
   8006c:	00081549 	.word	0x00081549
   80070:	0008155d 	.word	0x0008155d
   80074:	00081571 	.word	0x00081571
   80078:	00081585 	.word	0x00081585
	...
   80084:	000801b5 	.word	0x000801b5
   80088:	000816d9 	.word	0x000816d9
   8008c:	000816d9 	.word	0x000816d9
   80090:	000816d9 	.word	0x000816d9
   80094:	000816d9 	.word	0x000816d9
   80098:	000816d9 	.word	0x000816d9
   8009c:	000816d9 	.word	0x000816d9
   800a0:	000816d9 	.word	0x000816d9
   800a4:	00000000 	.word	0x00000000
   800a8:	000816d9 	.word	0x000816d9
   800ac:	000816d9 	.word	0x000816d9
   800b0:	000816d9 	.word	0x000816d9
   800b4:	000816d9 	.word	0x000816d9
   800b8:	000816d9 	.word	0x000816d9
   800bc:	000816d9 	.word	0x000816d9
   800c0:	000816d9 	.word	0x000816d9
   800c4:	000816d9 	.word	0x000816d9
   800c8:	000816d9 	.word	0x000816d9
   800cc:	000816d9 	.word	0x000816d9
   800d0:	000816d9 	.word	0x000816d9
   800d4:	000816d9 	.word	0x000816d9
   800d8:	000816d9 	.word	0x000816d9
   800dc:	000816d9 	.word	0x000816d9
   800e0:	000816d9 	.word	0x000816d9
   800e4:	000816d9 	.word	0x000816d9
   800e8:	000816d9 	.word	0x000816d9
   800ec:	000816d9 	.word	0x000816d9
   800f0:	000816d9 	.word	0x000816d9

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007099c 	.word	0x2007099c
   80110:	00000000 	.word	0x00000000
   80114:	00084a70 	.word	0x00084a70

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084a70 	.word	0x00084a70
   8013c:	200709a0 	.word	0x200709a0
   80140:	00084a70 	.word	0x00084a70
   80144:	00000000 	.word	0x00000000

00080148 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8014c:	460c      	mov	r4, r1
   8014e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80150:	b960      	cbnz	r0, 8016c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80152:	2a00      	cmp	r2, #0
   80154:	dd0e      	ble.n	80174 <_read+0x2c>
   80156:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80158:	4e09      	ldr	r6, [pc, #36]	; (80180 <_read+0x38>)
   8015a:	4d0a      	ldr	r5, [pc, #40]	; (80184 <_read+0x3c>)
   8015c:	6830      	ldr	r0, [r6, #0]
   8015e:	4621      	mov	r1, r4
   80160:	682b      	ldr	r3, [r5, #0]
   80162:	4798      	blx	r3
		ptr++;
   80164:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80166:	42bc      	cmp	r4, r7
   80168:	d1f8      	bne.n	8015c <_read+0x14>
   8016a:	e006      	b.n	8017a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8016c:	f04f 30ff 	mov.w	r0, #4294967295
   80170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80174:	2000      	movs	r0, #0
   80176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8017a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80180:	20070b84 	.word	0x20070b84
   80184:	20070b00 	.word	0x20070b00

00080188 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80188:	6943      	ldr	r3, [r0, #20]
   8018a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8018e:	bf1d      	ittte	ne
   80190:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80194:	61c1      	strne	r1, [r0, #28]
	return 0;
   80196:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80198:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8019a:	4770      	bx	lr

0008019c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8019c:	6943      	ldr	r3, [r0, #20]
   8019e:	f013 0f01 	tst.w	r3, #1
   801a2:	d005      	beq.n	801b0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801a4:	6983      	ldr	r3, [r0, #24]
   801a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801aa:	600b      	str	r3, [r1, #0]

	return 0;
   801ac:	2000      	movs	r0, #0
   801ae:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   801b0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   801b2:	4770      	bx	lr

000801b4 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   801b4:	b500      	push	{lr}
   801b6:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   801b8:	4811      	ldr	r0, [pc, #68]	; (80200 <USART0_Handler+0x4c>)
   801ba:	f10d 0107 	add.w	r1, sp, #7
   801be:	2201      	movs	r2, #1
   801c0:	4b10      	ldr	r3, [pc, #64]	; (80204 <USART0_Handler+0x50>)
   801c2:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   801c4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   801c6:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   801ca:	2200      	movs	r2, #0
   801cc:	4b0e      	ldr	r3, [pc, #56]	; (80208 <USART0_Handler+0x54>)
   801ce:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   801d0:	4b0e      	ldr	r3, [pc, #56]	; (8020c <USART0_Handler+0x58>)
   801d2:	781b      	ldrb	r3, [r3, #0]
   801d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   801d8:	4a0d      	ldr	r2, [pc, #52]	; (80210 <USART0_Handler+0x5c>)
   801da:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   801dc:	2b9b      	cmp	r3, #155	; 0x9b
   801de:	d103      	bne.n	801e8 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   801e0:	2200      	movs	r2, #0
   801e2:	4b0a      	ldr	r3, [pc, #40]	; (8020c <USART0_Handler+0x58>)
   801e4:	701a      	strb	r2, [r3, #0]
   801e6:	e002      	b.n	801ee <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   801e8:	3301      	adds	r3, #1
   801ea:	4a08      	ldr	r2, [pc, #32]	; (8020c <USART0_Handler+0x58>)
   801ec:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   801ee:	2201      	movs	r2, #1
   801f0:	4b05      	ldr	r3, [pc, #20]	; (80208 <USART0_Handler+0x54>)
   801f2:	701a      	strb	r2, [r3, #0]
   801f4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   801f8:	b662      	cpsie	i
}
   801fa:	b003      	add	sp, #12
   801fc:	f85d fb04 	ldr.w	pc, [sp], #4
   80200:	40098000 	.word	0x40098000
   80204:	00080e41 	.word	0x00080e41
   80208:	2007012c 	.word	0x2007012c
   8020c:	20070a54 	.word	0x20070a54
   80210:	200709b8 	.word	0x200709b8

00080214 <pinMode>:
#include "digitalIO.h"

#define PIOB_BASE_ADDRESS 0x400E1000U

void pinMode(int pinNumber, mode_definition mode)
{
   80214:	4770      	bx	lr
   80216:	bf00      	nop

00080218 <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   80218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8021c:	4605      	mov	r5, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   8021e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   80222:	d132      	bne.n	8028a <UnityPrintNumber+0x72>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80224:	4b5f      	ldr	r3, [pc, #380]	; (803a4 <UnityPrintNumber+0x18c>)
   80226:	6818      	ldr	r0, [r3, #0]
   80228:	6882      	ldr	r2, [r0, #8]
   8022a:	6893      	ldr	r3, [r2, #8]
   8022c:	3b01      	subs	r3, #1
   8022e:	6093      	str	r3, [r2, #8]
   80230:	2b00      	cmp	r3, #0
   80232:	da1d      	bge.n	80270 <UnityPrintNumber+0x58>
   80234:	6882      	ldr	r2, [r0, #8]
   80236:	6891      	ldr	r1, [r2, #8]
   80238:	6993      	ldr	r3, [r2, #24]
   8023a:	4299      	cmp	r1, r3
   8023c:	db12      	blt.n	80264 <UnityPrintNumber+0x4c>
   8023e:	6813      	ldr	r3, [r2, #0]
   80240:	222d      	movs	r2, #45	; 0x2d
   80242:	701a      	strb	r2, [r3, #0]
   80244:	4b57      	ldr	r3, [pc, #348]	; (803a4 <UnityPrintNumber+0x18c>)
   80246:	6818      	ldr	r0, [r3, #0]
   80248:	6882      	ldr	r2, [r0, #8]
   8024a:	6813      	ldr	r3, [r2, #0]
   8024c:	7819      	ldrb	r1, [r3, #0]
   8024e:	290a      	cmp	r1, #10
   80250:	d002      	beq.n	80258 <UnityPrintNumber+0x40>
   80252:	3301      	adds	r3, #1
   80254:	6013      	str	r3, [r2, #0]
   80256:	e04f      	b.n	802f8 <UnityPrintNumber+0xe0>
   80258:	210a      	movs	r1, #10
   8025a:	4b53      	ldr	r3, [pc, #332]	; (803a8 <UnityPrintNumber+0x190>)
   8025c:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   8025e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   80262:	e049      	b.n	802f8 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80264:	212d      	movs	r1, #45	; 0x2d
   80266:	4b50      	ldr	r3, [pc, #320]	; (803a8 <UnityPrintNumber+0x190>)
   80268:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   8026a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   8026e:	e043      	b.n	802f8 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80270:	6883      	ldr	r3, [r0, #8]
   80272:	681b      	ldr	r3, [r3, #0]
   80274:	222d      	movs	r2, #45	; 0x2d
   80276:	701a      	strb	r2, [r3, #0]
   80278:	4b4a      	ldr	r3, [pc, #296]	; (803a4 <UnityPrintNumber+0x18c>)
   8027a:	681b      	ldr	r3, [r3, #0]
   8027c:	689b      	ldr	r3, [r3, #8]
   8027e:	681a      	ldr	r2, [r3, #0]
   80280:	3201      	adds	r2, #1
   80282:	601a      	str	r2, [r3, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80284:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   80288:	e036      	b.n	802f8 <UnityPrintNumber+0xe0>
    }
    else if (number_to_print < 0)
   8028a:	2800      	cmp	r0, #0
   8028c:	da34      	bge.n	802f8 <UnityPrintNumber+0xe0>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   8028e:	4b45      	ldr	r3, [pc, #276]	; (803a4 <UnityPrintNumber+0x18c>)
   80290:	6818      	ldr	r0, [r3, #0]
   80292:	6882      	ldr	r2, [r0, #8]
   80294:	6893      	ldr	r3, [r2, #8]
   80296:	3b01      	subs	r3, #1
   80298:	6093      	str	r3, [r2, #8]
   8029a:	2b00      	cmp	r3, #0
   8029c:	da19      	bge.n	802d2 <UnityPrintNumber+0xba>
   8029e:	6882      	ldr	r2, [r0, #8]
   802a0:	6891      	ldr	r1, [r2, #8]
   802a2:	6993      	ldr	r3, [r2, #24]
   802a4:	4299      	cmp	r1, r3
   802a6:	db10      	blt.n	802ca <UnityPrintNumber+0xb2>
   802a8:	6813      	ldr	r3, [r2, #0]
   802aa:	222d      	movs	r2, #45	; 0x2d
   802ac:	701a      	strb	r2, [r3, #0]
   802ae:	4b3d      	ldr	r3, [pc, #244]	; (803a4 <UnityPrintNumber+0x18c>)
   802b0:	6818      	ldr	r0, [r3, #0]
   802b2:	6882      	ldr	r2, [r0, #8]
   802b4:	6813      	ldr	r3, [r2, #0]
   802b6:	7819      	ldrb	r1, [r3, #0]
   802b8:	290a      	cmp	r1, #10
   802ba:	d002      	beq.n	802c2 <UnityPrintNumber+0xaa>
   802bc:	3301      	adds	r3, #1
   802be:	6013      	str	r3, [r2, #0]
   802c0:	e011      	b.n	802e6 <UnityPrintNumber+0xce>
   802c2:	210a      	movs	r1, #10
   802c4:	4b38      	ldr	r3, [pc, #224]	; (803a8 <UnityPrintNumber+0x190>)
   802c6:	4798      	blx	r3
   802c8:	e00d      	b.n	802e6 <UnityPrintNumber+0xce>
   802ca:	212d      	movs	r1, #45	; 0x2d
   802cc:	4b36      	ldr	r3, [pc, #216]	; (803a8 <UnityPrintNumber+0x190>)
   802ce:	4798      	blx	r3
   802d0:	e009      	b.n	802e6 <UnityPrintNumber+0xce>
   802d2:	6883      	ldr	r3, [r0, #8]
   802d4:	681b      	ldr	r3, [r3, #0]
   802d6:	222d      	movs	r2, #45	; 0x2d
   802d8:	701a      	strb	r2, [r3, #0]
   802da:	4b32      	ldr	r3, [pc, #200]	; (803a4 <UnityPrintNumber+0x18c>)
   802dc:	681b      	ldr	r3, [r3, #0]
   802de:	689b      	ldr	r3, [r3, #8]
   802e0:	681a      	ldr	r2, [r3, #0]
   802e2:	3201      	adds	r2, #1
   802e4:	601a      	str	r2, [r3, #0]
        number = (_U_UINT)(-number_to_print);
   802e6:	426d      	negs	r5, r5
   802e8:	e006      	b.n	802f8 <UnityPrintNumber+0xe0>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   802ea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   802ee:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   802f0:	429c      	cmp	r4, r3
   802f2:	da06      	bge.n	80302 <UnityPrintNumber+0xea>
            divisor = next_divisor;
   802f4:	461c      	mov	r4, r3
   802f6:	e000      	b.n	802fa <UnityPrintNumber+0xe2>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   802f8:	2401      	movs	r4, #1
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   802fa:	fbb5 f3f4 	udiv	r3, r5, r4
   802fe:	2b09      	cmp	r3, #9
   80300:	d8f3      	bhi.n	802ea <UnityPrintNumber+0xd2>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   80302:	4e28      	ldr	r6, [pc, #160]	; (803a4 <UnityPrintNumber+0x18c>)
   80304:	4f29      	ldr	r7, [pc, #164]	; (803ac <UnityPrintNumber+0x194>)
   80306:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 803a8 <UnityPrintNumber+0x190>
   8030a:	6830      	ldr	r0, [r6, #0]
   8030c:	6882      	ldr	r2, [r0, #8]
   8030e:	6893      	ldr	r3, [r2, #8]
   80310:	3b01      	subs	r3, #1
   80312:	6093      	str	r3, [r2, #8]
   80314:	2b00      	cmp	r3, #0
   80316:	da29      	bge.n	8036c <UnityPrintNumber+0x154>
   80318:	6882      	ldr	r2, [r0, #8]
   8031a:	6891      	ldr	r1, [r2, #8]
   8031c:	6993      	ldr	r3, [r2, #24]
   8031e:	4299      	cmp	r1, r3
   80320:	db17      	blt.n	80352 <UnityPrintNumber+0x13a>
   80322:	6811      	ldr	r1, [r2, #0]
   80324:	fbb5 f3f4 	udiv	r3, r5, r4
   80328:	fba7 0203 	umull	r0, r2, r7, r3
   8032c:	08d2      	lsrs	r2, r2, #3
   8032e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80332:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   80336:	3330      	adds	r3, #48	; 0x30
   80338:	700b      	strb	r3, [r1, #0]
   8033a:	6830      	ldr	r0, [r6, #0]
   8033c:	6882      	ldr	r2, [r0, #8]
   8033e:	6813      	ldr	r3, [r2, #0]
   80340:	7819      	ldrb	r1, [r3, #0]
   80342:	290a      	cmp	r1, #10
   80344:	d002      	beq.n	8034c <UnityPrintNumber+0x134>
   80346:	3301      	adds	r3, #1
   80348:	6013      	str	r3, [r2, #0]
   8034a:	e021      	b.n	80390 <UnityPrintNumber+0x178>
   8034c:	210a      	movs	r1, #10
   8034e:	47c0      	blx	r8
   80350:	e01e      	b.n	80390 <UnityPrintNumber+0x178>
   80352:	fbb5 f3f4 	udiv	r3, r5, r4
   80356:	fba7 e103 	umull	lr, r1, r7, r3
   8035a:	08c9      	lsrs	r1, r1, #3
   8035c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80360:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   80364:	3130      	adds	r1, #48	; 0x30
   80366:	b2c9      	uxtb	r1, r1
   80368:	47c0      	blx	r8
   8036a:	e011      	b.n	80390 <UnityPrintNumber+0x178>
   8036c:	6883      	ldr	r3, [r0, #8]
   8036e:	6819      	ldr	r1, [r3, #0]
   80370:	fbb5 f3f4 	udiv	r3, r5, r4
   80374:	fba7 0203 	umull	r0, r2, r7, r3
   80378:	08d2      	lsrs	r2, r2, #3
   8037a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8037e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   80382:	3330      	adds	r3, #48	; 0x30
   80384:	700b      	strb	r3, [r1, #0]
   80386:	6833      	ldr	r3, [r6, #0]
   80388:	689b      	ldr	r3, [r3, #8]
   8038a:	681a      	ldr	r2, [r3, #0]
   8038c:	3201      	adds	r2, #1
   8038e:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   80390:	4b07      	ldr	r3, [pc, #28]	; (803b0 <UnityPrintNumber+0x198>)
   80392:	fb83 2304 	smull	r2, r3, r3, r4
   80396:	17e4      	asrs	r4, r4, #31
   80398:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    }
    while (divisor > 0);
   8039c:	2c00      	cmp	r4, #0
   8039e:	dcb4      	bgt.n	8030a <UnityPrintNumber+0xf2>
}
   803a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803a4:	20070560 	.word	0x20070560
   803a8:	00082879 	.word	0x00082879
   803ac:	cccccccd 	.word	0xcccccccd
   803b0:	66666667 	.word	0x66666667

000803b4 <UnityPrintNumberHex>:
    while (divisor > 0);
}

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   803b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   803b8:	4606      	mov	r6, r0
   803ba:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   803bc:	4b5e      	ldr	r3, [pc, #376]	; (80538 <UnityPrintNumberHex+0x184>)
   803be:	6818      	ldr	r0, [r3, #0]
   803c0:	6882      	ldr	r2, [r0, #8]
   803c2:	6893      	ldr	r3, [r2, #8]
   803c4:	3b01      	subs	r3, #1
   803c6:	6093      	str	r3, [r2, #8]
   803c8:	2b00      	cmp	r3, #0
   803ca:	da19      	bge.n	80400 <UnityPrintNumberHex+0x4c>
   803cc:	6882      	ldr	r2, [r0, #8]
   803ce:	6891      	ldr	r1, [r2, #8]
   803d0:	6993      	ldr	r3, [r2, #24]
   803d2:	4299      	cmp	r1, r3
   803d4:	db10      	blt.n	803f8 <UnityPrintNumberHex+0x44>
   803d6:	6813      	ldr	r3, [r2, #0]
   803d8:	2230      	movs	r2, #48	; 0x30
   803da:	701a      	strb	r2, [r3, #0]
   803dc:	4b56      	ldr	r3, [pc, #344]	; (80538 <UnityPrintNumberHex+0x184>)
   803de:	6818      	ldr	r0, [r3, #0]
   803e0:	6882      	ldr	r2, [r0, #8]
   803e2:	6813      	ldr	r3, [r2, #0]
   803e4:	7819      	ldrb	r1, [r3, #0]
   803e6:	290a      	cmp	r1, #10
   803e8:	d002      	beq.n	803f0 <UnityPrintNumberHex+0x3c>
   803ea:	3301      	adds	r3, #1
   803ec:	6013      	str	r3, [r2, #0]
   803ee:	e011      	b.n	80414 <UnityPrintNumberHex+0x60>
   803f0:	210a      	movs	r1, #10
   803f2:	4b52      	ldr	r3, [pc, #328]	; (8053c <UnityPrintNumberHex+0x188>)
   803f4:	4798      	blx	r3
   803f6:	e00d      	b.n	80414 <UnityPrintNumberHex+0x60>
   803f8:	2130      	movs	r1, #48	; 0x30
   803fa:	4b50      	ldr	r3, [pc, #320]	; (8053c <UnityPrintNumberHex+0x188>)
   803fc:	4798      	blx	r3
   803fe:	e009      	b.n	80414 <UnityPrintNumberHex+0x60>
   80400:	6883      	ldr	r3, [r0, #8]
   80402:	681b      	ldr	r3, [r3, #0]
   80404:	2230      	movs	r2, #48	; 0x30
   80406:	701a      	strb	r2, [r3, #0]
   80408:	4b4b      	ldr	r3, [pc, #300]	; (80538 <UnityPrintNumberHex+0x184>)
   8040a:	681b      	ldr	r3, [r3, #0]
   8040c:	689b      	ldr	r3, [r3, #8]
   8040e:	681a      	ldr	r2, [r3, #0]
   80410:	3201      	adds	r2, #1
   80412:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_CHAR('x');
   80414:	4b48      	ldr	r3, [pc, #288]	; (80538 <UnityPrintNumberHex+0x184>)
   80416:	6818      	ldr	r0, [r3, #0]
   80418:	6882      	ldr	r2, [r0, #8]
   8041a:	6893      	ldr	r3, [r2, #8]
   8041c:	3b01      	subs	r3, #1
   8041e:	6093      	str	r3, [r2, #8]
   80420:	2b00      	cmp	r3, #0
   80422:	da1b      	bge.n	8045c <UnityPrintNumberHex+0xa8>
   80424:	6882      	ldr	r2, [r0, #8]
   80426:	6891      	ldr	r1, [r2, #8]
   80428:	6993      	ldr	r3, [r2, #24]
   8042a:	4299      	cmp	r1, r3
   8042c:	db10      	blt.n	80450 <UnityPrintNumberHex+0x9c>
   8042e:	6813      	ldr	r3, [r2, #0]
   80430:	2278      	movs	r2, #120	; 0x78
   80432:	701a      	strb	r2, [r3, #0]
   80434:	4b40      	ldr	r3, [pc, #256]	; (80538 <UnityPrintNumberHex+0x184>)
   80436:	6818      	ldr	r0, [r3, #0]
   80438:	6882      	ldr	r2, [r0, #8]
   8043a:	6813      	ldr	r3, [r2, #0]
   8043c:	7819      	ldrb	r1, [r3, #0]
   8043e:	290a      	cmp	r1, #10
   80440:	d002      	beq.n	80448 <UnityPrintNumberHex+0x94>
   80442:	3301      	adds	r3, #1
   80444:	6013      	str	r3, [r2, #0]
   80446:	e006      	b.n	80456 <UnityPrintNumberHex+0xa2>
   80448:	210a      	movs	r1, #10
   8044a:	4b3c      	ldr	r3, [pc, #240]	; (8053c <UnityPrintNumberHex+0x188>)
   8044c:	4798      	blx	r3
   8044e:	e002      	b.n	80456 <UnityPrintNumberHex+0xa2>
   80450:	2178      	movs	r1, #120	; 0x78
   80452:	4b3a      	ldr	r3, [pc, #232]	; (8053c <UnityPrintNumberHex+0x188>)
   80454:	4798      	blx	r3

    while (nibbles > 0)
   80456:	b964      	cbnz	r4, 80472 <UnityPrintNumberHex+0xbe>
   80458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   8045c:	6883      	ldr	r3, [r0, #8]
   8045e:	681b      	ldr	r3, [r3, #0]
   80460:	2278      	movs	r2, #120	; 0x78
   80462:	701a      	strb	r2, [r3, #0]
   80464:	4b34      	ldr	r3, [pc, #208]	; (80538 <UnityPrintNumberHex+0x184>)
   80466:	681b      	ldr	r3, [r3, #0]
   80468:	689b      	ldr	r3, [r3, #8]
   8046a:	681a      	ldr	r2, [r3, #0]
   8046c:	3201      	adds	r2, #1
   8046e:	601a      	str	r2, [r3, #0]
   80470:	e7f1      	b.n	80456 <UnityPrintNumberHex+0xa2>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80472:	4d31      	ldr	r5, [pc, #196]	; (80538 <UnityPrintNumberHex+0x184>)
   80474:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8053c <UnityPrintNumberHex+0x188>
   80478:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   8047c:	3c01      	subs	r4, #1
   8047e:	b2e4      	uxtb	r4, r4
   80480:	00a3      	lsls	r3, r4, #2
   80482:	fa26 f303 	lsr.w	r3, r6, r3
   80486:	f003 030f 	and.w	r3, r3, #15
        if (nibble <= 9)
   8048a:	2b09      	cmp	r3, #9
   8048c:	d828      	bhi.n	804e0 <UnityPrintNumberHex+0x12c>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   8048e:	6828      	ldr	r0, [r5, #0]
   80490:	6881      	ldr	r1, [r0, #8]
   80492:	688a      	ldr	r2, [r1, #8]
   80494:	3a01      	subs	r2, #1
   80496:	608a      	str	r2, [r1, #8]
   80498:	2a00      	cmp	r2, #0
   8049a:	da17      	bge.n	804cc <UnityPrintNumberHex+0x118>
   8049c:	6882      	ldr	r2, [r0, #8]
   8049e:	6891      	ldr	r1, [r2, #8]
   804a0:	6997      	ldr	r7, [r2, #24]
   804a2:	42b9      	cmp	r1, r7
   804a4:	db0e      	blt.n	804c4 <UnityPrintNumberHex+0x110>
   804a6:	6812      	ldr	r2, [r2, #0]
   804a8:	3330      	adds	r3, #48	; 0x30
   804aa:	7013      	strb	r3, [r2, #0]
   804ac:	6828      	ldr	r0, [r5, #0]
   804ae:	6882      	ldr	r2, [r0, #8]
   804b0:	6813      	ldr	r3, [r2, #0]
   804b2:	7819      	ldrb	r1, [r3, #0]
   804b4:	290a      	cmp	r1, #10
   804b6:	d002      	beq.n	804be <UnityPrintNumberHex+0x10a>
   804b8:	3301      	adds	r3, #1
   804ba:	6013      	str	r3, [r2, #0]
   804bc:	e038      	b.n	80530 <UnityPrintNumberHex+0x17c>
   804be:	4641      	mov	r1, r8
   804c0:	47c8      	blx	r9
   804c2:	e035      	b.n	80530 <UnityPrintNumberHex+0x17c>
   804c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
   804c8:	47c8      	blx	r9
   804ca:	e031      	b.n	80530 <UnityPrintNumberHex+0x17c>
   804cc:	6882      	ldr	r2, [r0, #8]
   804ce:	6812      	ldr	r2, [r2, #0]
   804d0:	3330      	adds	r3, #48	; 0x30
   804d2:	7013      	strb	r3, [r2, #0]
   804d4:	682b      	ldr	r3, [r5, #0]
   804d6:	689b      	ldr	r3, [r3, #8]
   804d8:	681a      	ldr	r2, [r3, #0]
   804da:	3201      	adds	r2, #1
   804dc:	601a      	str	r2, [r3, #0]
   804de:	e027      	b.n	80530 <UnityPrintNumberHex+0x17c>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   804e0:	6828      	ldr	r0, [r5, #0]
   804e2:	6881      	ldr	r1, [r0, #8]
   804e4:	688a      	ldr	r2, [r1, #8]
   804e6:	3a01      	subs	r2, #1
   804e8:	608a      	str	r2, [r1, #8]
   804ea:	2a00      	cmp	r2, #0
   804ec:	da17      	bge.n	8051e <UnityPrintNumberHex+0x16a>
   804ee:	6882      	ldr	r2, [r0, #8]
   804f0:	6891      	ldr	r1, [r2, #8]
   804f2:	6997      	ldr	r7, [r2, #24]
   804f4:	42b9      	cmp	r1, r7
   804f6:	db0e      	blt.n	80516 <UnityPrintNumberHex+0x162>
   804f8:	6812      	ldr	r2, [r2, #0]
   804fa:	3337      	adds	r3, #55	; 0x37
   804fc:	7013      	strb	r3, [r2, #0]
   804fe:	6828      	ldr	r0, [r5, #0]
   80500:	6882      	ldr	r2, [r0, #8]
   80502:	6813      	ldr	r3, [r2, #0]
   80504:	7819      	ldrb	r1, [r3, #0]
   80506:	290a      	cmp	r1, #10
   80508:	d002      	beq.n	80510 <UnityPrintNumberHex+0x15c>
   8050a:	3301      	adds	r3, #1
   8050c:	6013      	str	r3, [r2, #0]
   8050e:	e00f      	b.n	80530 <UnityPrintNumberHex+0x17c>
   80510:	4641      	mov	r1, r8
   80512:	47c8      	blx	r9
   80514:	e00c      	b.n	80530 <UnityPrintNumberHex+0x17c>
   80516:	f103 0137 	add.w	r1, r3, #55	; 0x37
   8051a:	47c8      	blx	r9
   8051c:	e008      	b.n	80530 <UnityPrintNumberHex+0x17c>
   8051e:	6882      	ldr	r2, [r0, #8]
   80520:	6812      	ldr	r2, [r2, #0]
   80522:	3337      	adds	r3, #55	; 0x37
   80524:	7013      	strb	r3, [r2, #0]
   80526:	682b      	ldr	r3, [r5, #0]
   80528:	689b      	ldr	r3, [r3, #8]
   8052a:	681a      	ldr	r2, [r3, #0]
   8052c:	3201      	adds	r2, #1
   8052e:	601a      	str	r2, [r3, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   80530:	2c00      	cmp	r4, #0
   80532:	d1a3      	bne.n	8047c <UnityPrintNumberHex+0xc8>
   80534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80538:	20070560 	.word	0x20070560
   8053c:	00082879 	.word	0x00082879

00080540 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   80540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   80542:	2800      	cmp	r0, #0
   80544:	f000 810a 	beq.w	8075c <UnityPrint+0x21c>
    {
        while (*pch)
   80548:	7803      	ldrb	r3, [r0, #0]
   8054a:	2b00      	cmp	r3, #0
   8054c:	f000 8106 	beq.w	8075c <UnityPrint+0x21c>
   80550:	1c44      	adds	r4, r0, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80552:	4d83      	ldr	r5, [pc, #524]	; (80760 <UnityPrint+0x220>)
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   80554:	4e83      	ldr	r6, [pc, #524]	; (80764 <UnityPrint+0x224>)
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80556:	4f84      	ldr	r7, [pc, #528]	; (80768 <UnityPrint+0x228>)
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   80558:	f1a3 0220 	sub.w	r2, r3, #32
   8055c:	b2d2      	uxtb	r2, r2
   8055e:	2a5e      	cmp	r2, #94	; 0x5e
   80560:	d82a      	bhi.n	805b8 <UnityPrint+0x78>
            {
                UNITY_OUTPUT_CHAR(*pch);
   80562:	6828      	ldr	r0, [r5, #0]
   80564:	6882      	ldr	r2, [r0, #8]
   80566:	6893      	ldr	r3, [r2, #8]
   80568:	3b01      	subs	r3, #1
   8056a:	6093      	str	r3, [r2, #8]
   8056c:	2b00      	cmp	r3, #0
   8056e:	da18      	bge.n	805a2 <UnityPrint+0x62>
   80570:	6882      	ldr	r2, [r0, #8]
   80572:	6891      	ldr	r1, [r2, #8]
   80574:	6993      	ldr	r3, [r2, #24]
   80576:	4299      	cmp	r1, r3
   80578:	db0f      	blt.n	8059a <UnityPrint+0x5a>
   8057a:	6813      	ldr	r3, [r2, #0]
   8057c:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80580:	701a      	strb	r2, [r3, #0]
   80582:	6828      	ldr	r0, [r5, #0]
   80584:	6882      	ldr	r2, [r0, #8]
   80586:	6813      	ldr	r3, [r2, #0]
   80588:	7819      	ldrb	r1, [r3, #0]
   8058a:	290a      	cmp	r1, #10
   8058c:	d002      	beq.n	80594 <UnityPrint+0x54>
   8058e:	3301      	adds	r3, #1
   80590:	6013      	str	r3, [r2, #0]
   80592:	e0de      	b.n	80752 <UnityPrint+0x212>
   80594:	210a      	movs	r1, #10
   80596:	47b8      	blx	r7
   80598:	e0db      	b.n	80752 <UnityPrint+0x212>
   8059a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   8059e:	47b8      	blx	r7
   805a0:	e0d7      	b.n	80752 <UnityPrint+0x212>
   805a2:	6883      	ldr	r3, [r0, #8]
   805a4:	681b      	ldr	r3, [r3, #0]
   805a6:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   805aa:	701a      	strb	r2, [r3, #0]
   805ac:	682b      	ldr	r3, [r5, #0]
   805ae:	689b      	ldr	r3, [r3, #8]
   805b0:	681a      	ldr	r2, [r3, #0]
   805b2:	3201      	adds	r2, #1
   805b4:	601a      	str	r2, [r3, #0]
   805b6:	e0cc      	b.n	80752 <UnityPrint+0x212>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   805b8:	2b0d      	cmp	r3, #13
   805ba:	d14e      	bne.n	8065a <UnityPrint+0x11a>
            {
                UNITY_OUTPUT_CHAR('\\');
   805bc:	6828      	ldr	r0, [r5, #0]
   805be:	6882      	ldr	r2, [r0, #8]
   805c0:	6893      	ldr	r3, [r2, #8]
   805c2:	3b01      	subs	r3, #1
   805c4:	6093      	str	r3, [r2, #8]
   805c6:	2b00      	cmp	r3, #0
   805c8:	da16      	bge.n	805f8 <UnityPrint+0xb8>
   805ca:	6882      	ldr	r2, [r0, #8]
   805cc:	6891      	ldr	r1, [r2, #8]
   805ce:	6993      	ldr	r3, [r2, #24]
   805d0:	4299      	cmp	r1, r3
   805d2:	db0e      	blt.n	805f2 <UnityPrint+0xb2>
   805d4:	6813      	ldr	r3, [r2, #0]
   805d6:	225c      	movs	r2, #92	; 0x5c
   805d8:	701a      	strb	r2, [r3, #0]
   805da:	6828      	ldr	r0, [r5, #0]
   805dc:	6882      	ldr	r2, [r0, #8]
   805de:	6813      	ldr	r3, [r2, #0]
   805e0:	7819      	ldrb	r1, [r3, #0]
   805e2:	290a      	cmp	r1, #10
   805e4:	d002      	beq.n	805ec <UnityPrint+0xac>
   805e6:	3301      	adds	r3, #1
   805e8:	6013      	str	r3, [r2, #0]
   805ea:	e00e      	b.n	8060a <UnityPrint+0xca>
   805ec:	210a      	movs	r1, #10
   805ee:	47b8      	blx	r7
   805f0:	e00b      	b.n	8060a <UnityPrint+0xca>
   805f2:	215c      	movs	r1, #92	; 0x5c
   805f4:	47b8      	blx	r7
   805f6:	e008      	b.n	8060a <UnityPrint+0xca>
   805f8:	6883      	ldr	r3, [r0, #8]
   805fa:	681b      	ldr	r3, [r3, #0]
   805fc:	225c      	movs	r2, #92	; 0x5c
   805fe:	701a      	strb	r2, [r3, #0]
   80600:	682b      	ldr	r3, [r5, #0]
   80602:	689b      	ldr	r3, [r3, #8]
   80604:	681a      	ldr	r2, [r3, #0]
   80606:	3201      	adds	r2, #1
   80608:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('r');
   8060a:	6828      	ldr	r0, [r5, #0]
   8060c:	6882      	ldr	r2, [r0, #8]
   8060e:	6893      	ldr	r3, [r2, #8]
   80610:	3b01      	subs	r3, #1
   80612:	6093      	str	r3, [r2, #8]
   80614:	2b00      	cmp	r3, #0
   80616:	da16      	bge.n	80646 <UnityPrint+0x106>
   80618:	6882      	ldr	r2, [r0, #8]
   8061a:	6891      	ldr	r1, [r2, #8]
   8061c:	6993      	ldr	r3, [r2, #24]
   8061e:	4299      	cmp	r1, r3
   80620:	db0e      	blt.n	80640 <UnityPrint+0x100>
   80622:	6813      	ldr	r3, [r2, #0]
   80624:	2272      	movs	r2, #114	; 0x72
   80626:	701a      	strb	r2, [r3, #0]
   80628:	6828      	ldr	r0, [r5, #0]
   8062a:	6882      	ldr	r2, [r0, #8]
   8062c:	6813      	ldr	r3, [r2, #0]
   8062e:	7819      	ldrb	r1, [r3, #0]
   80630:	290a      	cmp	r1, #10
   80632:	d002      	beq.n	8063a <UnityPrint+0xfa>
   80634:	3301      	adds	r3, #1
   80636:	6013      	str	r3, [r2, #0]
   80638:	e08b      	b.n	80752 <UnityPrint+0x212>
   8063a:	210a      	movs	r1, #10
   8063c:	47b8      	blx	r7
   8063e:	e088      	b.n	80752 <UnityPrint+0x212>
   80640:	2172      	movs	r1, #114	; 0x72
   80642:	47b8      	blx	r7
   80644:	e085      	b.n	80752 <UnityPrint+0x212>
   80646:	6883      	ldr	r3, [r0, #8]
   80648:	681b      	ldr	r3, [r3, #0]
   8064a:	2272      	movs	r2, #114	; 0x72
   8064c:	701a      	strb	r2, [r3, #0]
   8064e:	682b      	ldr	r3, [r5, #0]
   80650:	689b      	ldr	r3, [r3, #8]
   80652:	681a      	ldr	r2, [r3, #0]
   80654:	3201      	adds	r2, #1
   80656:	601a      	str	r2, [r3, #0]
   80658:	e07b      	b.n	80752 <UnityPrint+0x212>
            }
            //write escaped line feeds
            else if (*pch == 10)
   8065a:	2b0a      	cmp	r3, #10
   8065c:	d14e      	bne.n	806fc <UnityPrint+0x1bc>
            {
                UNITY_OUTPUT_CHAR('\\');
   8065e:	6828      	ldr	r0, [r5, #0]
   80660:	6882      	ldr	r2, [r0, #8]
   80662:	6893      	ldr	r3, [r2, #8]
   80664:	3b01      	subs	r3, #1
   80666:	6093      	str	r3, [r2, #8]
   80668:	2b00      	cmp	r3, #0
   8066a:	da16      	bge.n	8069a <UnityPrint+0x15a>
   8066c:	6882      	ldr	r2, [r0, #8]
   8066e:	6891      	ldr	r1, [r2, #8]
   80670:	6993      	ldr	r3, [r2, #24]
   80672:	4299      	cmp	r1, r3
   80674:	db0e      	blt.n	80694 <UnityPrint+0x154>
   80676:	6813      	ldr	r3, [r2, #0]
   80678:	225c      	movs	r2, #92	; 0x5c
   8067a:	701a      	strb	r2, [r3, #0]
   8067c:	6828      	ldr	r0, [r5, #0]
   8067e:	6882      	ldr	r2, [r0, #8]
   80680:	6813      	ldr	r3, [r2, #0]
   80682:	7819      	ldrb	r1, [r3, #0]
   80684:	290a      	cmp	r1, #10
   80686:	d002      	beq.n	8068e <UnityPrint+0x14e>
   80688:	3301      	adds	r3, #1
   8068a:	6013      	str	r3, [r2, #0]
   8068c:	e00e      	b.n	806ac <UnityPrint+0x16c>
   8068e:	210a      	movs	r1, #10
   80690:	47b8      	blx	r7
   80692:	e00b      	b.n	806ac <UnityPrint+0x16c>
   80694:	215c      	movs	r1, #92	; 0x5c
   80696:	47b8      	blx	r7
   80698:	e008      	b.n	806ac <UnityPrint+0x16c>
   8069a:	6883      	ldr	r3, [r0, #8]
   8069c:	681b      	ldr	r3, [r3, #0]
   8069e:	225c      	movs	r2, #92	; 0x5c
   806a0:	701a      	strb	r2, [r3, #0]
   806a2:	682b      	ldr	r3, [r5, #0]
   806a4:	689b      	ldr	r3, [r3, #8]
   806a6:	681a      	ldr	r2, [r3, #0]
   806a8:	3201      	adds	r2, #1
   806aa:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('n');
   806ac:	6828      	ldr	r0, [r5, #0]
   806ae:	6882      	ldr	r2, [r0, #8]
   806b0:	6893      	ldr	r3, [r2, #8]
   806b2:	3b01      	subs	r3, #1
   806b4:	6093      	str	r3, [r2, #8]
   806b6:	2b00      	cmp	r3, #0
   806b8:	da16      	bge.n	806e8 <UnityPrint+0x1a8>
   806ba:	6882      	ldr	r2, [r0, #8]
   806bc:	6891      	ldr	r1, [r2, #8]
   806be:	6993      	ldr	r3, [r2, #24]
   806c0:	4299      	cmp	r1, r3
   806c2:	db0e      	blt.n	806e2 <UnityPrint+0x1a2>
   806c4:	6813      	ldr	r3, [r2, #0]
   806c6:	226e      	movs	r2, #110	; 0x6e
   806c8:	701a      	strb	r2, [r3, #0]
   806ca:	6828      	ldr	r0, [r5, #0]
   806cc:	6882      	ldr	r2, [r0, #8]
   806ce:	6813      	ldr	r3, [r2, #0]
   806d0:	7819      	ldrb	r1, [r3, #0]
   806d2:	290a      	cmp	r1, #10
   806d4:	d002      	beq.n	806dc <UnityPrint+0x19c>
   806d6:	3301      	adds	r3, #1
   806d8:	6013      	str	r3, [r2, #0]
   806da:	e03a      	b.n	80752 <UnityPrint+0x212>
   806dc:	210a      	movs	r1, #10
   806de:	47b8      	blx	r7
   806e0:	e037      	b.n	80752 <UnityPrint+0x212>
   806e2:	216e      	movs	r1, #110	; 0x6e
   806e4:	47b8      	blx	r7
   806e6:	e034      	b.n	80752 <UnityPrint+0x212>
   806e8:	6883      	ldr	r3, [r0, #8]
   806ea:	681b      	ldr	r3, [r3, #0]
   806ec:	226e      	movs	r2, #110	; 0x6e
   806ee:	701a      	strb	r2, [r3, #0]
   806f0:	682b      	ldr	r3, [r5, #0]
   806f2:	689b      	ldr	r3, [r3, #8]
   806f4:	681a      	ldr	r2, [r3, #0]
   806f6:	3201      	adds	r2, #1
   806f8:	601a      	str	r2, [r3, #0]
   806fa:	e02a      	b.n	80752 <UnityPrint+0x212>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   806fc:	6828      	ldr	r0, [r5, #0]
   806fe:	6882      	ldr	r2, [r0, #8]
   80700:	6893      	ldr	r3, [r2, #8]
   80702:	3b01      	subs	r3, #1
   80704:	6093      	str	r3, [r2, #8]
   80706:	2b00      	cmp	r3, #0
   80708:	da16      	bge.n	80738 <UnityPrint+0x1f8>
   8070a:	6882      	ldr	r2, [r0, #8]
   8070c:	6891      	ldr	r1, [r2, #8]
   8070e:	6993      	ldr	r3, [r2, #24]
   80710:	4299      	cmp	r1, r3
   80712:	db0e      	blt.n	80732 <UnityPrint+0x1f2>
   80714:	6813      	ldr	r3, [r2, #0]
   80716:	225c      	movs	r2, #92	; 0x5c
   80718:	701a      	strb	r2, [r3, #0]
   8071a:	6828      	ldr	r0, [r5, #0]
   8071c:	6882      	ldr	r2, [r0, #8]
   8071e:	6813      	ldr	r3, [r2, #0]
   80720:	7819      	ldrb	r1, [r3, #0]
   80722:	290a      	cmp	r1, #10
   80724:	d002      	beq.n	8072c <UnityPrint+0x1ec>
   80726:	3301      	adds	r3, #1
   80728:	6013      	str	r3, [r2, #0]
   8072a:	e00e      	b.n	8074a <UnityPrint+0x20a>
   8072c:	210a      	movs	r1, #10
   8072e:	47b8      	blx	r7
   80730:	e00b      	b.n	8074a <UnityPrint+0x20a>
   80732:	215c      	movs	r1, #92	; 0x5c
   80734:	47b8      	blx	r7
   80736:	e008      	b.n	8074a <UnityPrint+0x20a>
   80738:	6883      	ldr	r3, [r0, #8]
   8073a:	681b      	ldr	r3, [r3, #0]
   8073c:	225c      	movs	r2, #92	; 0x5c
   8073e:	701a      	strb	r2, [r3, #0]
   80740:	682b      	ldr	r3, [r5, #0]
   80742:	689b      	ldr	r3, [r3, #8]
   80744:	681a      	ldr	r2, [r3, #0]
   80746:	3201      	adds	r2, #1
   80748:	601a      	str	r2, [r3, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   8074a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   8074e:	2102      	movs	r1, #2
   80750:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   80752:	f814 3b01 	ldrb.w	r3, [r4], #1
   80756:	2b00      	cmp	r3, #0
   80758:	f47f aefe 	bne.w	80558 <UnityPrint+0x18>
   8075c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8075e:	bf00      	nop
   80760:	20070560 	.word	0x20070560
   80764:	000803b5 	.word	0x000803b5
   80768:	00082879 	.word	0x00082879

0008076c <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   8076c:	b538      	push	{r3, r4, r5, lr}
   8076e:	460d      	mov	r5, r1
    UnityPrint(file);
   80770:	4b46      	ldr	r3, [pc, #280]	; (8088c <UnityTestResultsBegin+0x120>)
   80772:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80774:	4b46      	ldr	r3, [pc, #280]	; (80890 <UnityTestResultsBegin+0x124>)
   80776:	6818      	ldr	r0, [r3, #0]
   80778:	6884      	ldr	r4, [r0, #8]
   8077a:	68a2      	ldr	r2, [r4, #8]
   8077c:	3a01      	subs	r2, #1
   8077e:	60a2      	str	r2, [r4, #8]
   80780:	2a00      	cmp	r2, #0
   80782:	da19      	bge.n	807b8 <UnityTestResultsBegin+0x4c>
   80784:	6882      	ldr	r2, [r0, #8]
   80786:	6893      	ldr	r3, [r2, #8]
   80788:	6991      	ldr	r1, [r2, #24]
   8078a:	428b      	cmp	r3, r1
   8078c:	db10      	blt.n	807b0 <UnityTestResultsBegin+0x44>
   8078e:	6813      	ldr	r3, [r2, #0]
   80790:	223a      	movs	r2, #58	; 0x3a
   80792:	701a      	strb	r2, [r3, #0]
   80794:	4b3e      	ldr	r3, [pc, #248]	; (80890 <UnityTestResultsBegin+0x124>)
   80796:	6818      	ldr	r0, [r3, #0]
   80798:	6882      	ldr	r2, [r0, #8]
   8079a:	6813      	ldr	r3, [r2, #0]
   8079c:	7819      	ldrb	r1, [r3, #0]
   8079e:	290a      	cmp	r1, #10
   807a0:	d002      	beq.n	807a8 <UnityTestResultsBegin+0x3c>
   807a2:	3301      	adds	r3, #1
   807a4:	6013      	str	r3, [r2, #0]
   807a6:	e011      	b.n	807cc <UnityTestResultsBegin+0x60>
   807a8:	210a      	movs	r1, #10
   807aa:	4b3a      	ldr	r3, [pc, #232]	; (80894 <UnityTestResultsBegin+0x128>)
   807ac:	4798      	blx	r3
   807ae:	e00d      	b.n	807cc <UnityTestResultsBegin+0x60>
   807b0:	213a      	movs	r1, #58	; 0x3a
   807b2:	4b38      	ldr	r3, [pc, #224]	; (80894 <UnityTestResultsBegin+0x128>)
   807b4:	4798      	blx	r3
   807b6:	e009      	b.n	807cc <UnityTestResultsBegin+0x60>
   807b8:	6883      	ldr	r3, [r0, #8]
   807ba:	681b      	ldr	r3, [r3, #0]
   807bc:	223a      	movs	r2, #58	; 0x3a
   807be:	701a      	strb	r2, [r3, #0]
   807c0:	4b33      	ldr	r3, [pc, #204]	; (80890 <UnityTestResultsBegin+0x124>)
   807c2:	681b      	ldr	r3, [r3, #0]
   807c4:	689b      	ldr	r3, [r3, #8]
   807c6:	681a      	ldr	r2, [r3, #0]
   807c8:	3201      	adds	r2, #1
   807ca:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)line);
   807cc:	4628      	mov	r0, r5
   807ce:	4b32      	ldr	r3, [pc, #200]	; (80898 <UnityTestResultsBegin+0x12c>)
   807d0:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   807d2:	4b2f      	ldr	r3, [pc, #188]	; (80890 <UnityTestResultsBegin+0x124>)
   807d4:	6818      	ldr	r0, [r3, #0]
   807d6:	6882      	ldr	r2, [r0, #8]
   807d8:	6893      	ldr	r3, [r2, #8]
   807da:	3b01      	subs	r3, #1
   807dc:	6093      	str	r3, [r2, #8]
   807de:	2b00      	cmp	r3, #0
   807e0:	da19      	bge.n	80816 <UnityTestResultsBegin+0xaa>
   807e2:	6882      	ldr	r2, [r0, #8]
   807e4:	6891      	ldr	r1, [r2, #8]
   807e6:	6993      	ldr	r3, [r2, #24]
   807e8:	4299      	cmp	r1, r3
   807ea:	db10      	blt.n	8080e <UnityTestResultsBegin+0xa2>
   807ec:	6813      	ldr	r3, [r2, #0]
   807ee:	223a      	movs	r2, #58	; 0x3a
   807f0:	701a      	strb	r2, [r3, #0]
   807f2:	4b27      	ldr	r3, [pc, #156]	; (80890 <UnityTestResultsBegin+0x124>)
   807f4:	6818      	ldr	r0, [r3, #0]
   807f6:	6882      	ldr	r2, [r0, #8]
   807f8:	6813      	ldr	r3, [r2, #0]
   807fa:	7819      	ldrb	r1, [r3, #0]
   807fc:	290a      	cmp	r1, #10
   807fe:	d002      	beq.n	80806 <UnityTestResultsBegin+0x9a>
   80800:	3301      	adds	r3, #1
   80802:	6013      	str	r3, [r2, #0]
   80804:	e011      	b.n	8082a <UnityTestResultsBegin+0xbe>
   80806:	210a      	movs	r1, #10
   80808:	4b22      	ldr	r3, [pc, #136]	; (80894 <UnityTestResultsBegin+0x128>)
   8080a:	4798      	blx	r3
   8080c:	e00d      	b.n	8082a <UnityTestResultsBegin+0xbe>
   8080e:	213a      	movs	r1, #58	; 0x3a
   80810:	4b20      	ldr	r3, [pc, #128]	; (80894 <UnityTestResultsBegin+0x128>)
   80812:	4798      	blx	r3
   80814:	e009      	b.n	8082a <UnityTestResultsBegin+0xbe>
   80816:	6883      	ldr	r3, [r0, #8]
   80818:	681b      	ldr	r3, [r3, #0]
   8081a:	223a      	movs	r2, #58	; 0x3a
   8081c:	701a      	strb	r2, [r3, #0]
   8081e:	4b1c      	ldr	r3, [pc, #112]	; (80890 <UnityTestResultsBegin+0x124>)
   80820:	681b      	ldr	r3, [r3, #0]
   80822:	689b      	ldr	r3, [r3, #8]
   80824:	681a      	ldr	r2, [r3, #0]
   80826:	3201      	adds	r2, #1
   80828:	601a      	str	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
   8082a:	4b1c      	ldr	r3, [pc, #112]	; (8089c <UnityTestResultsBegin+0x130>)
   8082c:	6858      	ldr	r0, [r3, #4]
   8082e:	4b17      	ldr	r3, [pc, #92]	; (8088c <UnityTestResultsBegin+0x120>)
   80830:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80832:	4b17      	ldr	r3, [pc, #92]	; (80890 <UnityTestResultsBegin+0x124>)
   80834:	6818      	ldr	r0, [r3, #0]
   80836:	6882      	ldr	r2, [r0, #8]
   80838:	6893      	ldr	r3, [r2, #8]
   8083a:	3b01      	subs	r3, #1
   8083c:	6093      	str	r3, [r2, #8]
   8083e:	2b00      	cmp	r3, #0
   80840:	da19      	bge.n	80876 <UnityTestResultsBegin+0x10a>
   80842:	6882      	ldr	r2, [r0, #8]
   80844:	6891      	ldr	r1, [r2, #8]
   80846:	6993      	ldr	r3, [r2, #24]
   80848:	4299      	cmp	r1, r3
   8084a:	db10      	blt.n	8086e <UnityTestResultsBegin+0x102>
   8084c:	6813      	ldr	r3, [r2, #0]
   8084e:	223a      	movs	r2, #58	; 0x3a
   80850:	701a      	strb	r2, [r3, #0]
   80852:	4b0f      	ldr	r3, [pc, #60]	; (80890 <UnityTestResultsBegin+0x124>)
   80854:	6818      	ldr	r0, [r3, #0]
   80856:	6882      	ldr	r2, [r0, #8]
   80858:	6813      	ldr	r3, [r2, #0]
   8085a:	7819      	ldrb	r1, [r3, #0]
   8085c:	290a      	cmp	r1, #10
   8085e:	d002      	beq.n	80866 <UnityTestResultsBegin+0xfa>
   80860:	3301      	adds	r3, #1
   80862:	6013      	str	r3, [r2, #0]
   80864:	bd38      	pop	{r3, r4, r5, pc}
   80866:	210a      	movs	r1, #10
   80868:	4b0a      	ldr	r3, [pc, #40]	; (80894 <UnityTestResultsBegin+0x128>)
   8086a:	4798      	blx	r3
   8086c:	bd38      	pop	{r3, r4, r5, pc}
   8086e:	213a      	movs	r1, #58	; 0x3a
   80870:	4b08      	ldr	r3, [pc, #32]	; (80894 <UnityTestResultsBegin+0x128>)
   80872:	4798      	blx	r3
   80874:	bd38      	pop	{r3, r4, r5, pc}
   80876:	6883      	ldr	r3, [r0, #8]
   80878:	681b      	ldr	r3, [r3, #0]
   8087a:	223a      	movs	r2, #58	; 0x3a
   8087c:	701a      	strb	r2, [r3, #0]
   8087e:	4b04      	ldr	r3, [pc, #16]	; (80890 <UnityTestResultsBegin+0x124>)
   80880:	681b      	ldr	r3, [r3, #0]
   80882:	689b      	ldr	r3, [r3, #8]
   80884:	681a      	ldr	r2, [r3, #0]
   80886:	3201      	adds	r2, #1
   80888:	601a      	str	r2, [r3, #0]
   8088a:	bd38      	pop	{r3, r4, r5, pc}
   8088c:	00080541 	.word	0x00080541
   80890:	20070560 	.word	0x20070560
   80894:	00082879 	.word	0x00082879
   80898:	00080219 	.word	0x00080219
   8089c:	20070b04 	.word	0x20070b04

000808a0 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   808a0:	b508      	push	{r3, lr}
   808a2:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   808a4:	4b19      	ldr	r3, [pc, #100]	; (8090c <UnityTestResultsFailBegin+0x6c>)
   808a6:	6818      	ldr	r0, [r3, #0]
   808a8:	4b19      	ldr	r3, [pc, #100]	; (80910 <UnityTestResultsFailBegin+0x70>)
   808aa:	4798      	blx	r3
    UnityPrint(UnityStrFail);
   808ac:	4819      	ldr	r0, [pc, #100]	; (80914 <UnityTestResultsFailBegin+0x74>)
   808ae:	4b1a      	ldr	r3, [pc, #104]	; (80918 <UnityTestResultsFailBegin+0x78>)
   808b0:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   808b2:	4b1a      	ldr	r3, [pc, #104]	; (8091c <UnityTestResultsFailBegin+0x7c>)
   808b4:	6818      	ldr	r0, [r3, #0]
   808b6:	6882      	ldr	r2, [r0, #8]
   808b8:	6893      	ldr	r3, [r2, #8]
   808ba:	3b01      	subs	r3, #1
   808bc:	6093      	str	r3, [r2, #8]
   808be:	2b00      	cmp	r3, #0
   808c0:	da19      	bge.n	808f6 <UnityTestResultsFailBegin+0x56>
   808c2:	6882      	ldr	r2, [r0, #8]
   808c4:	6891      	ldr	r1, [r2, #8]
   808c6:	6993      	ldr	r3, [r2, #24]
   808c8:	4299      	cmp	r1, r3
   808ca:	db10      	blt.n	808ee <UnityTestResultsFailBegin+0x4e>
   808cc:	6813      	ldr	r3, [r2, #0]
   808ce:	223a      	movs	r2, #58	; 0x3a
   808d0:	701a      	strb	r2, [r3, #0]
   808d2:	4b12      	ldr	r3, [pc, #72]	; (8091c <UnityTestResultsFailBegin+0x7c>)
   808d4:	6818      	ldr	r0, [r3, #0]
   808d6:	6882      	ldr	r2, [r0, #8]
   808d8:	6813      	ldr	r3, [r2, #0]
   808da:	7819      	ldrb	r1, [r3, #0]
   808dc:	290a      	cmp	r1, #10
   808de:	d002      	beq.n	808e6 <UnityTestResultsFailBegin+0x46>
   808e0:	3301      	adds	r3, #1
   808e2:	6013      	str	r3, [r2, #0]
   808e4:	bd08      	pop	{r3, pc}
   808e6:	210a      	movs	r1, #10
   808e8:	4b0d      	ldr	r3, [pc, #52]	; (80920 <UnityTestResultsFailBegin+0x80>)
   808ea:	4798      	blx	r3
   808ec:	bd08      	pop	{r3, pc}
   808ee:	213a      	movs	r1, #58	; 0x3a
   808f0:	4b0b      	ldr	r3, [pc, #44]	; (80920 <UnityTestResultsFailBegin+0x80>)
   808f2:	4798      	blx	r3
   808f4:	bd08      	pop	{r3, pc}
   808f6:	6883      	ldr	r3, [r0, #8]
   808f8:	681b      	ldr	r3, [r3, #0]
   808fa:	223a      	movs	r2, #58	; 0x3a
   808fc:	701a      	strb	r2, [r3, #0]
   808fe:	4b07      	ldr	r3, [pc, #28]	; (8091c <UnityTestResultsFailBegin+0x7c>)
   80900:	681b      	ldr	r3, [r3, #0]
   80902:	689b      	ldr	r3, [r3, #8]
   80904:	681a      	ldr	r2, [r3, #0]
   80906:	3201      	adds	r2, #1
   80908:	601a      	str	r2, [r3, #0]
   8090a:	bd08      	pop	{r3, pc}
   8090c:	20070b04 	.word	0x20070b04
   80910:	0008076d 	.word	0x0008076d
   80914:	000848b8 	.word	0x000848b8
   80918:	00080541 	.word	0x00080541
   8091c:	20070560 	.word	0x20070560
   80920:	00082879 	.word	0x00082879

00080924 <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   80924:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   80926:	4605      	mov	r5, r0
   80928:	b120      	cbz	r0, 80934 <UnityAddMsgIfSpecified+0x10>
    {
        UnityPrint(UnityStrSpacer);
   8092a:	4803      	ldr	r0, [pc, #12]	; (80938 <UnityAddMsgIfSpecified+0x14>)
   8092c:	4c03      	ldr	r4, [pc, #12]	; (8093c <UnityAddMsgIfSpecified+0x18>)
   8092e:	47a0      	blx	r4
        UnityPrint(msg);
   80930:	4628      	mov	r0, r5
   80932:	47a0      	blx	r4
   80934:	bd38      	pop	{r3, r4, r5, pc}
   80936:	bf00      	nop
   80938:	000848ac 	.word	0x000848ac
   8093c:	00080541 	.word	0x00080541

00080940 <UnityPrintMask>:
    }
}

//-----------------------------------------------
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
   80940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80944:	4607      	mov	r7, r0
   80946:	4688      	mov	r8, r1
   80948:	2520      	movs	r5, #32
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
   8094a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
                UNITY_OUTPUT_CHAR('0');
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   8094e:	4e43      	ldr	r6, [pc, #268]	; (80a5c <UnityPrintMask+0x11c>)
   80950:	f04f 0958 	mov.w	r9, #88	; 0x58
   80954:	f8df a108 	ldr.w	sl, [pc, #264]	; 80a60 <UnityPrintMask+0x120>
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
    {
        if (current_bit & mask)
   80958:	423c      	tst	r4, r7
   8095a:	d052      	beq.n	80a02 <UnityPrintMask+0xc2>
        {
            if (current_bit & number)
   8095c:	ea14 0f08 	tst.w	r4, r8
   80960:	d027      	beq.n	809b2 <UnityPrintMask+0x72>
            {
                UNITY_OUTPUT_CHAR('1');
   80962:	6830      	ldr	r0, [r6, #0]
   80964:	6882      	ldr	r2, [r0, #8]
   80966:	6893      	ldr	r3, [r2, #8]
   80968:	3b01      	subs	r3, #1
   8096a:	6093      	str	r3, [r2, #8]
   8096c:	2b00      	cmp	r3, #0
   8096e:	da16      	bge.n	8099e <UnityPrintMask+0x5e>
   80970:	6882      	ldr	r2, [r0, #8]
   80972:	6891      	ldr	r1, [r2, #8]
   80974:	6993      	ldr	r3, [r2, #24]
   80976:	4299      	cmp	r1, r3
   80978:	db0e      	blt.n	80998 <UnityPrintMask+0x58>
   8097a:	6813      	ldr	r3, [r2, #0]
   8097c:	2231      	movs	r2, #49	; 0x31
   8097e:	701a      	strb	r2, [r3, #0]
   80980:	6830      	ldr	r0, [r6, #0]
   80982:	6882      	ldr	r2, [r0, #8]
   80984:	6813      	ldr	r3, [r2, #0]
   80986:	7819      	ldrb	r1, [r3, #0]
   80988:	290a      	cmp	r1, #10
   8098a:	d002      	beq.n	80992 <UnityPrintMask+0x52>
   8098c:	3301      	adds	r3, #1
   8098e:	6013      	str	r3, [r2, #0]
   80990:	e05e      	b.n	80a50 <UnityPrintMask+0x110>
   80992:	210a      	movs	r1, #10
   80994:	47d0      	blx	sl
   80996:	e05b      	b.n	80a50 <UnityPrintMask+0x110>
   80998:	2131      	movs	r1, #49	; 0x31
   8099a:	47d0      	blx	sl
   8099c:	e058      	b.n	80a50 <UnityPrintMask+0x110>
   8099e:	6883      	ldr	r3, [r0, #8]
   809a0:	681b      	ldr	r3, [r3, #0]
   809a2:	2231      	movs	r2, #49	; 0x31
   809a4:	701a      	strb	r2, [r3, #0]
   809a6:	6833      	ldr	r3, [r6, #0]
   809a8:	689b      	ldr	r3, [r3, #8]
   809aa:	681a      	ldr	r2, [r3, #0]
   809ac:	3201      	adds	r2, #1
   809ae:	601a      	str	r2, [r3, #0]
   809b0:	e04e      	b.n	80a50 <UnityPrintMask+0x110>
            }
            else
            {
                UNITY_OUTPUT_CHAR('0');
   809b2:	6830      	ldr	r0, [r6, #0]
   809b4:	6882      	ldr	r2, [r0, #8]
   809b6:	6893      	ldr	r3, [r2, #8]
   809b8:	3b01      	subs	r3, #1
   809ba:	6093      	str	r3, [r2, #8]
   809bc:	2b00      	cmp	r3, #0
   809be:	da16      	bge.n	809ee <UnityPrintMask+0xae>
   809c0:	6882      	ldr	r2, [r0, #8]
   809c2:	6891      	ldr	r1, [r2, #8]
   809c4:	6993      	ldr	r3, [r2, #24]
   809c6:	4299      	cmp	r1, r3
   809c8:	db0e      	blt.n	809e8 <UnityPrintMask+0xa8>
   809ca:	6813      	ldr	r3, [r2, #0]
   809cc:	2230      	movs	r2, #48	; 0x30
   809ce:	701a      	strb	r2, [r3, #0]
   809d0:	6830      	ldr	r0, [r6, #0]
   809d2:	6882      	ldr	r2, [r0, #8]
   809d4:	6813      	ldr	r3, [r2, #0]
   809d6:	7819      	ldrb	r1, [r3, #0]
   809d8:	290a      	cmp	r1, #10
   809da:	d002      	beq.n	809e2 <UnityPrintMask+0xa2>
   809dc:	3301      	adds	r3, #1
   809de:	6013      	str	r3, [r2, #0]
   809e0:	e036      	b.n	80a50 <UnityPrintMask+0x110>
   809e2:	210a      	movs	r1, #10
   809e4:	47d0      	blx	sl
   809e6:	e033      	b.n	80a50 <UnityPrintMask+0x110>
   809e8:	2130      	movs	r1, #48	; 0x30
   809ea:	47d0      	blx	sl
   809ec:	e030      	b.n	80a50 <UnityPrintMask+0x110>
   809ee:	6883      	ldr	r3, [r0, #8]
   809f0:	681b      	ldr	r3, [r3, #0]
   809f2:	2230      	movs	r2, #48	; 0x30
   809f4:	701a      	strb	r2, [r3, #0]
   809f6:	6833      	ldr	r3, [r6, #0]
   809f8:	689b      	ldr	r3, [r3, #8]
   809fa:	681a      	ldr	r2, [r3, #0]
   809fc:	3201      	adds	r2, #1
   809fe:	601a      	str	r2, [r3, #0]
   80a00:	e026      	b.n	80a50 <UnityPrintMask+0x110>
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   80a02:	6830      	ldr	r0, [r6, #0]
   80a04:	6882      	ldr	r2, [r0, #8]
   80a06:	6893      	ldr	r3, [r2, #8]
   80a08:	3b01      	subs	r3, #1
   80a0a:	6093      	str	r3, [r2, #8]
   80a0c:	2b00      	cmp	r3, #0
   80a0e:	da16      	bge.n	80a3e <UnityPrintMask+0xfe>
   80a10:	6882      	ldr	r2, [r0, #8]
   80a12:	6891      	ldr	r1, [r2, #8]
   80a14:	6993      	ldr	r3, [r2, #24]
   80a16:	4299      	cmp	r1, r3
   80a18:	db0e      	blt.n	80a38 <UnityPrintMask+0xf8>
   80a1a:	6813      	ldr	r3, [r2, #0]
   80a1c:	f883 9000 	strb.w	r9, [r3]
   80a20:	6830      	ldr	r0, [r6, #0]
   80a22:	6882      	ldr	r2, [r0, #8]
   80a24:	6813      	ldr	r3, [r2, #0]
   80a26:	7819      	ldrb	r1, [r3, #0]
   80a28:	290a      	cmp	r1, #10
   80a2a:	d002      	beq.n	80a32 <UnityPrintMask+0xf2>
   80a2c:	3301      	adds	r3, #1
   80a2e:	6013      	str	r3, [r2, #0]
   80a30:	e00e      	b.n	80a50 <UnityPrintMask+0x110>
   80a32:	210a      	movs	r1, #10
   80a34:	47d0      	blx	sl
   80a36:	e00b      	b.n	80a50 <UnityPrintMask+0x110>
   80a38:	4649      	mov	r1, r9
   80a3a:	47d0      	blx	sl
   80a3c:	e008      	b.n	80a50 <UnityPrintMask+0x110>
   80a3e:	6883      	ldr	r3, [r0, #8]
   80a40:	681b      	ldr	r3, [r3, #0]
   80a42:	f883 9000 	strb.w	r9, [r3]
   80a46:	6833      	ldr	r3, [r6, #0]
   80a48:	689b      	ldr	r3, [r3, #8]
   80a4a:	681a      	ldr	r2, [r3, #0]
   80a4c:	3201      	adds	r2, #1
   80a4e:	601a      	str	r2, [r3, #0]
        }
        current_bit = current_bit >> 1;
   80a50:	0864      	lsrs	r4, r4, #1
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
   80a52:	3d01      	subs	r5, #1
   80a54:	d180      	bne.n	80958 <UnityPrintMask+0x18>
        {
            UNITY_OUTPUT_CHAR('X');
        }
        current_bit = current_bit >> 1;
    }
}
   80a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80a5a:	bf00      	nop
   80a5c:	20070560 	.word	0x20070560
   80a60:	00082879 	.word	0x00082879

00080a64 <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   80a64:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   80a66:	4802      	ldr	r0, [pc, #8]	; (80a70 <UnityPrintFail+0xc>)
   80a68:	4b02      	ldr	r3, [pc, #8]	; (80a74 <UnityPrintFail+0x10>)
   80a6a:	4798      	blx	r3
   80a6c:	bd08      	pop	{r3, pc}
   80a6e:	bf00      	nop
   80a70:	000848b8 	.word	0x000848b8
   80a74:	00080541 	.word	0x00080541

00080a78 <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   80a78:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   80a7a:	4802      	ldr	r0, [pc, #8]	; (80a84 <UnityPrintOk+0xc>)
   80a7c:	4b02      	ldr	r3, [pc, #8]	; (80a88 <UnityPrintOk+0x10>)
   80a7e:	4798      	blx	r3
   80a80:	bd08      	pop	{r3, pc}
   80a82:	bf00      	nop
   80a84:	000848a8 	.word	0x000848a8
   80a88:	00080541 	.word	0x00080541

00080a8c <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   80a8c:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   80a8e:	4b24      	ldr	r3, [pc, #144]	; (80b20 <UnityConcludeTest+0x94>)
   80a90:	69db      	ldr	r3, [r3, #28]
   80a92:	b123      	cbz	r3, 80a9e <UnityConcludeTest+0x12>
    {
        Unity.TestIgnores++;
   80a94:	4b22      	ldr	r3, [pc, #136]	; (80b20 <UnityConcludeTest+0x94>)
   80a96:	695a      	ldr	r2, [r3, #20]
   80a98:	3201      	adds	r2, #1
   80a9a:	615a      	str	r2, [r3, #20]
   80a9c:	e00f      	b.n	80abe <UnityConcludeTest+0x32>
    }
    else if (!Unity.CurrentTestFailed)
   80a9e:	4b20      	ldr	r3, [pc, #128]	; (80b20 <UnityConcludeTest+0x94>)
   80aa0:	699b      	ldr	r3, [r3, #24]
   80aa2:	b943      	cbnz	r3, 80ab6 <UnityConcludeTest+0x2a>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   80aa4:	4b1e      	ldr	r3, [pc, #120]	; (80b20 <UnityConcludeTest+0x94>)
   80aa6:	6818      	ldr	r0, [r3, #0]
   80aa8:	6899      	ldr	r1, [r3, #8]
   80aaa:	4b1e      	ldr	r3, [pc, #120]	; (80b24 <UnityConcludeTest+0x98>)
   80aac:	4798      	blx	r3
        UnityPrint(UnityStrPass);
   80aae:	481e      	ldr	r0, [pc, #120]	; (80b28 <UnityConcludeTest+0x9c>)
   80ab0:	4b1e      	ldr	r3, [pc, #120]	; (80b2c <UnityConcludeTest+0xa0>)
   80ab2:	4798      	blx	r3
   80ab4:	e003      	b.n	80abe <UnityConcludeTest+0x32>
    }
    else
    {
        Unity.TestFailures++;
   80ab6:	4b1a      	ldr	r3, [pc, #104]	; (80b20 <UnityConcludeTest+0x94>)
   80ab8:	691a      	ldr	r2, [r3, #16]
   80aba:	3201      	adds	r2, #1
   80abc:	611a      	str	r2, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   80abe:	4b18      	ldr	r3, [pc, #96]	; (80b20 <UnityConcludeTest+0x94>)
   80ac0:	2200      	movs	r2, #0
   80ac2:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80ac4:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   80ac6:	4b1a      	ldr	r3, [pc, #104]	; (80b30 <UnityConcludeTest+0xa4>)
   80ac8:	6818      	ldr	r0, [r3, #0]
   80aca:	6882      	ldr	r2, [r0, #8]
   80acc:	6893      	ldr	r3, [r2, #8]
   80ace:	3b01      	subs	r3, #1
   80ad0:	6093      	str	r3, [r2, #8]
   80ad2:	2b00      	cmp	r3, #0
   80ad4:	da19      	bge.n	80b0a <UnityConcludeTest+0x7e>
   80ad6:	6882      	ldr	r2, [r0, #8]
   80ad8:	6891      	ldr	r1, [r2, #8]
   80ada:	6993      	ldr	r3, [r2, #24]
   80adc:	4299      	cmp	r1, r3
   80ade:	db10      	blt.n	80b02 <UnityConcludeTest+0x76>
   80ae0:	6813      	ldr	r3, [r2, #0]
   80ae2:	220a      	movs	r2, #10
   80ae4:	701a      	strb	r2, [r3, #0]
   80ae6:	4b12      	ldr	r3, [pc, #72]	; (80b30 <UnityConcludeTest+0xa4>)
   80ae8:	6818      	ldr	r0, [r3, #0]
   80aea:	6882      	ldr	r2, [r0, #8]
   80aec:	6813      	ldr	r3, [r2, #0]
   80aee:	7819      	ldrb	r1, [r3, #0]
   80af0:	290a      	cmp	r1, #10
   80af2:	d002      	beq.n	80afa <UnityConcludeTest+0x6e>
   80af4:	3301      	adds	r3, #1
   80af6:	6013      	str	r3, [r2, #0]
   80af8:	bd08      	pop	{r3, pc}
   80afa:	210a      	movs	r1, #10
   80afc:	4b0d      	ldr	r3, [pc, #52]	; (80b34 <UnityConcludeTest+0xa8>)
   80afe:	4798      	blx	r3
   80b00:	bd08      	pop	{r3, pc}
   80b02:	210a      	movs	r1, #10
   80b04:	4b0b      	ldr	r3, [pc, #44]	; (80b34 <UnityConcludeTest+0xa8>)
   80b06:	4798      	blx	r3
   80b08:	bd08      	pop	{r3, pc}
   80b0a:	6883      	ldr	r3, [r0, #8]
   80b0c:	681b      	ldr	r3, [r3, #0]
   80b0e:	220a      	movs	r2, #10
   80b10:	701a      	strb	r2, [r3, #0]
   80b12:	4b07      	ldr	r3, [pc, #28]	; (80b30 <UnityConcludeTest+0xa4>)
   80b14:	681b      	ldr	r3, [r3, #0]
   80b16:	689b      	ldr	r3, [r3, #8]
   80b18:	681a      	ldr	r2, [r3, #0]
   80b1a:	3201      	adds	r2, #1
   80b1c:	601a      	str	r2, [r3, #0]
   80b1e:	bd08      	pop	{r3, pc}
   80b20:	20070b04 	.word	0x20070b04
   80b24:	0008076d 	.word	0x0008076d
   80b28:	00084904 	.word	0x00084904
   80b2c:	00080541 	.word	0x00080541
   80b30:	20070560 	.word	0x20070560
   80b34:	00082879 	.word	0x00082879

00080b38 <UnityAssertBits>:
void UnityAssertBits(const _U_SINT mask,
                     const _U_SINT expected,
                     const _U_SINT actual,
                     const char* msg,
                     const UNITY_LINE_TYPE lineNumber)
{
   80b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80b3c:	4605      	mov	r5, r0
   80b3e:	460f      	mov	r7, r1
   80b40:	4616      	mov	r6, r2
   80b42:	4698      	mov	r8, r3
    UNITY_SKIP_EXECUTION;
   80b44:	4c12      	ldr	r4, [pc, #72]	; (80b90 <UnityAssertBits+0x58>)
   80b46:	69a4      	ldr	r4, [r4, #24]
   80b48:	b9fc      	cbnz	r4, 80b8a <UnityAssertBits+0x52>
   80b4a:	4a11      	ldr	r2, [pc, #68]	; (80b90 <UnityAssertBits+0x58>)
   80b4c:	69d2      	ldr	r2, [r2, #28]
   80b4e:	b9e2      	cbnz	r2, 80b8a <UnityAssertBits+0x52>

    if ((mask & expected) != (mask & actual))
   80b50:	ea81 0306 	eor.w	r3, r1, r6
   80b54:	4203      	tst	r3, r0
   80b56:	d018      	beq.n	80b8a <UnityAssertBits+0x52>
    {
        UnityTestResultsFailBegin(lineNumber);
   80b58:	9808      	ldr	r0, [sp, #32]
   80b5a:	4b0e      	ldr	r3, [pc, #56]	; (80b94 <UnityAssertBits+0x5c>)
   80b5c:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   80b5e:	480e      	ldr	r0, [pc, #56]	; (80b98 <UnityAssertBits+0x60>)
   80b60:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80bac <UnityAssertBits+0x74>
   80b64:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)expected);
   80b66:	4628      	mov	r0, r5
   80b68:	4639      	mov	r1, r7
   80b6a:	4c0c      	ldr	r4, [pc, #48]	; (80b9c <UnityAssertBits+0x64>)
   80b6c:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   80b6e:	480c      	ldr	r0, [pc, #48]	; (80ba0 <UnityAssertBits+0x68>)
   80b70:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)actual);
   80b72:	4628      	mov	r0, r5
   80b74:	4631      	mov	r1, r6
   80b76:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   80b78:	4640      	mov	r0, r8
   80b7a:	4b0a      	ldr	r3, [pc, #40]	; (80ba4 <UnityAssertBits+0x6c>)
   80b7c:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   80b7e:	4804      	ldr	r0, [pc, #16]	; (80b90 <UnityAssertBits+0x58>)
   80b80:	2101      	movs	r1, #1
   80b82:	6181      	str	r1, [r0, #24]
   80b84:	3020      	adds	r0, #32
   80b86:	4b08      	ldr	r3, [pc, #32]	; (80ba8 <UnityAssertBits+0x70>)
   80b88:	4798      	blx	r3
   80b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b8e:	bf00      	nop
   80b90:	20070b04 	.word	0x20070b04
   80b94:	000808a1 	.word	0x000808a1
   80b98:	000848c0 	.word	0x000848c0
   80b9c:	00080941 	.word	0x00080941
   80ba0:	000848b0 	.word	0x000848b0
   80ba4:	00080925 	.word	0x00080925
   80ba8:	00081a21 	.word	0x00081a21
   80bac:	00080541 	.word	0x00080541

00080bb0 <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   80bb0:	b500      	push	{lr}
   80bb2:	b083      	sub	sp, #12
   80bb4:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   80bb6:	480e      	ldr	r0, [pc, #56]	; (80bf0 <UnityDefaultTestRun+0x40>)
   80bb8:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   80bba:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   80bbc:	68c3      	ldr	r3, [r0, #12]
   80bbe:	3301      	adds	r3, #1
   80bc0:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   80bc2:	3020      	adds	r0, #32
   80bc4:	4b0b      	ldr	r3, [pc, #44]	; (80bf4 <UnityDefaultTestRun+0x44>)
   80bc6:	4798      	blx	r3
   80bc8:	b918      	cbnz	r0, 80bd2 <UnityDefaultTestRun+0x22>
    {
        setUp();
   80bca:	4b0b      	ldr	r3, [pc, #44]	; (80bf8 <UnityDefaultTestRun+0x48>)
   80bcc:	4798      	blx	r3
        Func();
   80bce:	9b01      	ldr	r3, [sp, #4]
   80bd0:	4798      	blx	r3
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   80bd2:	480a      	ldr	r0, [pc, #40]	; (80bfc <UnityDefaultTestRun+0x4c>)
   80bd4:	4b07      	ldr	r3, [pc, #28]	; (80bf4 <UnityDefaultTestRun+0x44>)
   80bd6:	4798      	blx	r3
   80bd8:	b920      	cbnz	r0, 80be4 <UnityDefaultTestRun+0x34>
   80bda:	4b05      	ldr	r3, [pc, #20]	; (80bf0 <UnityDefaultTestRun+0x40>)
   80bdc:	69db      	ldr	r3, [r3, #28]
   80bde:	b90b      	cbnz	r3, 80be4 <UnityDefaultTestRun+0x34>
    {
        tearDown();
   80be0:	4b07      	ldr	r3, [pc, #28]	; (80c00 <UnityDefaultTestRun+0x50>)
   80be2:	4798      	blx	r3
    }
    UnityConcludeTest();
   80be4:	4b07      	ldr	r3, [pc, #28]	; (80c04 <UnityDefaultTestRun+0x54>)
   80be6:	4798      	blx	r3
}
   80be8:	b003      	add	sp, #12
   80bea:	f85d fb04 	ldr.w	pc, [sp], #4
   80bee:	bf00      	nop
   80bf0:	20070b04 	.word	0x20070b04
   80bf4:	00081a15 	.word	0x00081a15
   80bf8:	00080f61 	.word	0x00080f61
   80bfc:	20070b24 	.word	0x20070b24
   80c00:	00080f71 	.word	0x00080f71
   80c04:	00080a8d 	.word	0x00080a8d

00080c08 <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   80c08:	4b05      	ldr	r3, [pc, #20]	; (80c20 <UnityBegin+0x18>)
   80c0a:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   80c0c:	2200      	movs	r2, #0
   80c0e:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   80c10:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   80c12:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   80c14:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   80c16:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   80c18:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80c1a:	61da      	str	r2, [r3, #28]
   80c1c:	4770      	bx	lr
   80c1e:	bf00      	nop
   80c20:	20070b04 	.word	0x20070b04

00080c24 <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   80c24:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   80c26:	4b66      	ldr	r3, [pc, #408]	; (80dc0 <UnityEnd+0x19c>)
   80c28:	6818      	ldr	r0, [r3, #0]
   80c2a:	6882      	ldr	r2, [r0, #8]
   80c2c:	6893      	ldr	r3, [r2, #8]
   80c2e:	3b01      	subs	r3, #1
   80c30:	6093      	str	r3, [r2, #8]
   80c32:	2b00      	cmp	r3, #0
   80c34:	da19      	bge.n	80c6a <UnityEnd+0x46>
   80c36:	6882      	ldr	r2, [r0, #8]
   80c38:	6891      	ldr	r1, [r2, #8]
   80c3a:	6993      	ldr	r3, [r2, #24]
   80c3c:	4299      	cmp	r1, r3
   80c3e:	db10      	blt.n	80c62 <UnityEnd+0x3e>
   80c40:	6813      	ldr	r3, [r2, #0]
   80c42:	220a      	movs	r2, #10
   80c44:	701a      	strb	r2, [r3, #0]
   80c46:	4b5e      	ldr	r3, [pc, #376]	; (80dc0 <UnityEnd+0x19c>)
   80c48:	6818      	ldr	r0, [r3, #0]
   80c4a:	6882      	ldr	r2, [r0, #8]
   80c4c:	6813      	ldr	r3, [r2, #0]
   80c4e:	7819      	ldrb	r1, [r3, #0]
   80c50:	290a      	cmp	r1, #10
   80c52:	d002      	beq.n	80c5a <UnityEnd+0x36>
   80c54:	3301      	adds	r3, #1
   80c56:	6013      	str	r3, [r2, #0]
   80c58:	e011      	b.n	80c7e <UnityEnd+0x5a>
   80c5a:	210a      	movs	r1, #10
   80c5c:	4b59      	ldr	r3, [pc, #356]	; (80dc4 <UnityEnd+0x1a0>)
   80c5e:	4798      	blx	r3
   80c60:	e00d      	b.n	80c7e <UnityEnd+0x5a>
   80c62:	210a      	movs	r1, #10
   80c64:	4b57      	ldr	r3, [pc, #348]	; (80dc4 <UnityEnd+0x1a0>)
   80c66:	4798      	blx	r3
   80c68:	e009      	b.n	80c7e <UnityEnd+0x5a>
   80c6a:	6883      	ldr	r3, [r0, #8]
   80c6c:	681b      	ldr	r3, [r3, #0]
   80c6e:	220a      	movs	r2, #10
   80c70:	701a      	strb	r2, [r3, #0]
   80c72:	4b53      	ldr	r3, [pc, #332]	; (80dc0 <UnityEnd+0x19c>)
   80c74:	681b      	ldr	r3, [r3, #0]
   80c76:	689b      	ldr	r3, [r3, #8]
   80c78:	681a      	ldr	r2, [r3, #0]
   80c7a:	3201      	adds	r2, #1
   80c7c:	601a      	str	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
   80c7e:	4852      	ldr	r0, [pc, #328]	; (80dc8 <UnityEnd+0x1a4>)
   80c80:	4b52      	ldr	r3, [pc, #328]	; (80dcc <UnityEnd+0x1a8>)
   80c82:	4798      	blx	r3
    UNITY_PRINT_EOL;
   80c84:	4b4e      	ldr	r3, [pc, #312]	; (80dc0 <UnityEnd+0x19c>)
   80c86:	6818      	ldr	r0, [r3, #0]
   80c88:	6882      	ldr	r2, [r0, #8]
   80c8a:	6893      	ldr	r3, [r2, #8]
   80c8c:	3b01      	subs	r3, #1
   80c8e:	6093      	str	r3, [r2, #8]
   80c90:	2b00      	cmp	r3, #0
   80c92:	da19      	bge.n	80cc8 <UnityEnd+0xa4>
   80c94:	6882      	ldr	r2, [r0, #8]
   80c96:	6891      	ldr	r1, [r2, #8]
   80c98:	6993      	ldr	r3, [r2, #24]
   80c9a:	4299      	cmp	r1, r3
   80c9c:	db10      	blt.n	80cc0 <UnityEnd+0x9c>
   80c9e:	6813      	ldr	r3, [r2, #0]
   80ca0:	220a      	movs	r2, #10
   80ca2:	701a      	strb	r2, [r3, #0]
   80ca4:	4b46      	ldr	r3, [pc, #280]	; (80dc0 <UnityEnd+0x19c>)
   80ca6:	6818      	ldr	r0, [r3, #0]
   80ca8:	6882      	ldr	r2, [r0, #8]
   80caa:	6813      	ldr	r3, [r2, #0]
   80cac:	7819      	ldrb	r1, [r3, #0]
   80cae:	290a      	cmp	r1, #10
   80cb0:	d002      	beq.n	80cb8 <UnityEnd+0x94>
   80cb2:	3301      	adds	r3, #1
   80cb4:	6013      	str	r3, [r2, #0]
   80cb6:	e011      	b.n	80cdc <UnityEnd+0xb8>
   80cb8:	210a      	movs	r1, #10
   80cba:	4b42      	ldr	r3, [pc, #264]	; (80dc4 <UnityEnd+0x1a0>)
   80cbc:	4798      	blx	r3
   80cbe:	e00d      	b.n	80cdc <UnityEnd+0xb8>
   80cc0:	210a      	movs	r1, #10
   80cc2:	4b40      	ldr	r3, [pc, #256]	; (80dc4 <UnityEnd+0x1a0>)
   80cc4:	4798      	blx	r3
   80cc6:	e009      	b.n	80cdc <UnityEnd+0xb8>
   80cc8:	6883      	ldr	r3, [r0, #8]
   80cca:	681b      	ldr	r3, [r3, #0]
   80ccc:	220a      	movs	r2, #10
   80cce:	701a      	strb	r2, [r3, #0]
   80cd0:	4b3b      	ldr	r3, [pc, #236]	; (80dc0 <UnityEnd+0x19c>)
   80cd2:	681b      	ldr	r3, [r3, #0]
   80cd4:	689b      	ldr	r3, [r3, #8]
   80cd6:	681a      	ldr	r2, [r3, #0]
   80cd8:	3201      	adds	r2, #1
   80cda:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   80cdc:	4e3c      	ldr	r6, [pc, #240]	; (80dd0 <UnityEnd+0x1ac>)
   80cde:	68f0      	ldr	r0, [r6, #12]
   80ce0:	4d3c      	ldr	r5, [pc, #240]	; (80dd4 <UnityEnd+0x1b0>)
   80ce2:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   80ce4:	483c      	ldr	r0, [pc, #240]	; (80dd8 <UnityEnd+0x1b4>)
   80ce6:	4c39      	ldr	r4, [pc, #228]	; (80dcc <UnityEnd+0x1a8>)
   80ce8:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   80cea:	6930      	ldr	r0, [r6, #16]
   80cec:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   80cee:	483b      	ldr	r0, [pc, #236]	; (80ddc <UnityEnd+0x1b8>)
   80cf0:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   80cf2:	6970      	ldr	r0, [r6, #20]
   80cf4:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   80cf6:	483a      	ldr	r0, [pc, #232]	; (80de0 <UnityEnd+0x1bc>)
   80cf8:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   80cfa:	4b31      	ldr	r3, [pc, #196]	; (80dc0 <UnityEnd+0x19c>)
   80cfc:	6818      	ldr	r0, [r3, #0]
   80cfe:	6882      	ldr	r2, [r0, #8]
   80d00:	6893      	ldr	r3, [r2, #8]
   80d02:	3b01      	subs	r3, #1
   80d04:	6093      	str	r3, [r2, #8]
   80d06:	2b00      	cmp	r3, #0
   80d08:	da19      	bge.n	80d3e <UnityEnd+0x11a>
   80d0a:	6882      	ldr	r2, [r0, #8]
   80d0c:	6891      	ldr	r1, [r2, #8]
   80d0e:	6993      	ldr	r3, [r2, #24]
   80d10:	4299      	cmp	r1, r3
   80d12:	db10      	blt.n	80d36 <UnityEnd+0x112>
   80d14:	6813      	ldr	r3, [r2, #0]
   80d16:	220a      	movs	r2, #10
   80d18:	701a      	strb	r2, [r3, #0]
   80d1a:	4b29      	ldr	r3, [pc, #164]	; (80dc0 <UnityEnd+0x19c>)
   80d1c:	6818      	ldr	r0, [r3, #0]
   80d1e:	6882      	ldr	r2, [r0, #8]
   80d20:	6813      	ldr	r3, [r2, #0]
   80d22:	7819      	ldrb	r1, [r3, #0]
   80d24:	290a      	cmp	r1, #10
   80d26:	d002      	beq.n	80d2e <UnityEnd+0x10a>
   80d28:	3301      	adds	r3, #1
   80d2a:	6013      	str	r3, [r2, #0]
   80d2c:	e011      	b.n	80d52 <UnityEnd+0x12e>
   80d2e:	210a      	movs	r1, #10
   80d30:	4b24      	ldr	r3, [pc, #144]	; (80dc4 <UnityEnd+0x1a0>)
   80d32:	4798      	blx	r3
   80d34:	e00d      	b.n	80d52 <UnityEnd+0x12e>
   80d36:	210a      	movs	r1, #10
   80d38:	4b22      	ldr	r3, [pc, #136]	; (80dc4 <UnityEnd+0x1a0>)
   80d3a:	4798      	blx	r3
   80d3c:	e009      	b.n	80d52 <UnityEnd+0x12e>
   80d3e:	6883      	ldr	r3, [r0, #8]
   80d40:	681b      	ldr	r3, [r3, #0]
   80d42:	220a      	movs	r2, #10
   80d44:	701a      	strb	r2, [r3, #0]
   80d46:	4b1e      	ldr	r3, [pc, #120]	; (80dc0 <UnityEnd+0x19c>)
   80d48:	681b      	ldr	r3, [r3, #0]
   80d4a:	689b      	ldr	r3, [r3, #8]
   80d4c:	681a      	ldr	r2, [r3, #0]
   80d4e:	3201      	adds	r2, #1
   80d50:	601a      	str	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
   80d52:	4b1f      	ldr	r3, [pc, #124]	; (80dd0 <UnityEnd+0x1ac>)
   80d54:	691b      	ldr	r3, [r3, #16]
   80d56:	b913      	cbnz	r3, 80d5e <UnityEnd+0x13a>
    {
        UnityPrintOk();
   80d58:	4b22      	ldr	r3, [pc, #136]	; (80de4 <UnityEnd+0x1c0>)
   80d5a:	4798      	blx	r3
   80d5c:	e001      	b.n	80d62 <UnityEnd+0x13e>
    }
    else
    {
        UnityPrintFail();
   80d5e:	4b22      	ldr	r3, [pc, #136]	; (80de8 <UnityEnd+0x1c4>)
   80d60:	4798      	blx	r3
    }
    UNITY_PRINT_EOL;
   80d62:	4b17      	ldr	r3, [pc, #92]	; (80dc0 <UnityEnd+0x19c>)
   80d64:	6818      	ldr	r0, [r3, #0]
   80d66:	6882      	ldr	r2, [r0, #8]
   80d68:	6893      	ldr	r3, [r2, #8]
   80d6a:	3b01      	subs	r3, #1
   80d6c:	6093      	str	r3, [r2, #8]
   80d6e:	2b00      	cmp	r3, #0
   80d70:	da19      	bge.n	80da6 <UnityEnd+0x182>
   80d72:	6882      	ldr	r2, [r0, #8]
   80d74:	6891      	ldr	r1, [r2, #8]
   80d76:	6993      	ldr	r3, [r2, #24]
   80d78:	4299      	cmp	r1, r3
   80d7a:	db10      	blt.n	80d9e <UnityEnd+0x17a>
   80d7c:	6813      	ldr	r3, [r2, #0]
   80d7e:	220a      	movs	r2, #10
   80d80:	701a      	strb	r2, [r3, #0]
   80d82:	4b0f      	ldr	r3, [pc, #60]	; (80dc0 <UnityEnd+0x19c>)
   80d84:	6818      	ldr	r0, [r3, #0]
   80d86:	6882      	ldr	r2, [r0, #8]
   80d88:	6813      	ldr	r3, [r2, #0]
   80d8a:	7819      	ldrb	r1, [r3, #0]
   80d8c:	290a      	cmp	r1, #10
   80d8e:	d002      	beq.n	80d96 <UnityEnd+0x172>
   80d90:	3301      	adds	r3, #1
   80d92:	6013      	str	r3, [r2, #0]
   80d94:	e011      	b.n	80dba <UnityEnd+0x196>
   80d96:	210a      	movs	r1, #10
   80d98:	4b0a      	ldr	r3, [pc, #40]	; (80dc4 <UnityEnd+0x1a0>)
   80d9a:	4798      	blx	r3
   80d9c:	e00d      	b.n	80dba <UnityEnd+0x196>
   80d9e:	210a      	movs	r1, #10
   80da0:	4b08      	ldr	r3, [pc, #32]	; (80dc4 <UnityEnd+0x1a0>)
   80da2:	4798      	blx	r3
   80da4:	e009      	b.n	80dba <UnityEnd+0x196>
   80da6:	6883      	ldr	r3, [r0, #8]
   80da8:	681b      	ldr	r3, [r3, #0]
   80daa:	220a      	movs	r2, #10
   80dac:	701a      	strb	r2, [r3, #0]
   80dae:	4b04      	ldr	r3, [pc, #16]	; (80dc0 <UnityEnd+0x19c>)
   80db0:	681b      	ldr	r3, [r3, #0]
   80db2:	689b      	ldr	r3, [r3, #8]
   80db4:	681a      	ldr	r2, [r3, #0]
   80db6:	3201      	adds	r2, #1
   80db8:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   80dba:	4b05      	ldr	r3, [pc, #20]	; (80dd0 <UnityEnd+0x1ac>)
   80dbc:	6918      	ldr	r0, [r3, #16]
   80dbe:	bd70      	pop	{r4, r5, r6, pc}
   80dc0:	20070560 	.word	0x20070560
   80dc4:	00082879 	.word	0x00082879
   80dc8:	000848cc 	.word	0x000848cc
   80dcc:	00080541 	.word	0x00080541
   80dd0:	20070b04 	.word	0x20070b04
   80dd4:	00080219 	.word	0x00080219
   80dd8:	000848fc 	.word	0x000848fc
   80ddc:	000848e4 	.word	0x000848e4
   80de0:	000848f0 	.word	0x000848f0
   80de4:	00080a79 	.word	0x00080a79
   80de8:	00080a65 	.word	0x00080a65

00080dec <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80df0:	460e      	mov	r6, r1
   80df2:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80df4:	3801      	subs	r0, #1
   80df6:	2802      	cmp	r0, #2
   80df8:	d80f      	bhi.n	80e1a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80dfa:	b192      	cbz	r2, 80e22 <_write+0x36>
   80dfc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80dfe:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80e3c <_write+0x50>
   80e02:	4f0d      	ldr	r7, [pc, #52]	; (80e38 <_write+0x4c>)
   80e04:	f8d8 0000 	ldr.w	r0, [r8]
   80e08:	5d31      	ldrb	r1, [r6, r4]
   80e0a:	683b      	ldr	r3, [r7, #0]
   80e0c:	4798      	blx	r3
   80e0e:	2800      	cmp	r0, #0
   80e10:	db0a      	blt.n	80e28 <_write+0x3c>
			return -1;
		}
		++nChars;
   80e12:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80e14:	42a5      	cmp	r5, r4
   80e16:	d1f5      	bne.n	80e04 <_write+0x18>
   80e18:	e00a      	b.n	80e30 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80e1a:	f04f 30ff 	mov.w	r0, #4294967295
   80e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80e22:	2000      	movs	r0, #0
   80e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80e28:	f04f 30ff 	mov.w	r0, #4294967295
   80e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80e30:	4620      	mov	r0, r4
	}
	return nChars;
}
   80e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e36:	bf00      	nop
   80e38:	20070b80 	.word	0x20070b80
   80e3c:	20070b84 	.word	0x20070b84

00080e40 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e44:	b083      	sub	sp, #12
   80e46:	4605      	mov	r5, r0
	while (len) {
   80e48:	4690      	mov	r8, r2
   80e4a:	2a00      	cmp	r2, #0
   80e4c:	d047      	beq.n	80ede <usart_serial_read_packet+0x9e>
   80e4e:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80e50:	4f25      	ldr	r7, [pc, #148]	; (80ee8 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   80e52:	4c26      	ldr	r4, [pc, #152]	; (80eec <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80e54:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80f00 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80e58:	f8df b094 	ldr.w	fp, [pc, #148]	; 80ef0 <usart_serial_read_packet+0xb0>
   80e5c:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80e60:	2300      	movs	r3, #0
   80e62:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80e64:	4b22      	ldr	r3, [pc, #136]	; (80ef0 <usart_serial_read_packet+0xb0>)
   80e66:	429d      	cmp	r5, r3
   80e68:	d106      	bne.n	80e78 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80e6a:	4658      	mov	r0, fp
   80e6c:	4649      	mov	r1, r9
   80e6e:	4b21      	ldr	r3, [pc, #132]	; (80ef4 <usart_serial_read_packet+0xb4>)
   80e70:	4798      	blx	r3
   80e72:	2800      	cmp	r0, #0
   80e74:	d1f9      	bne.n	80e6a <usart_serial_read_packet+0x2a>
   80e76:	e019      	b.n	80eac <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80e78:	4b1f      	ldr	r3, [pc, #124]	; (80ef8 <usart_serial_read_packet+0xb8>)
   80e7a:	429d      	cmp	r5, r3
   80e7c:	d109      	bne.n	80e92 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80e7e:	4699      	mov	r9, r3
   80e80:	4648      	mov	r0, r9
   80e82:	a901      	add	r1, sp, #4
   80e84:	47a0      	blx	r4
   80e86:	2800      	cmp	r0, #0
   80e88:	d1fa      	bne.n	80e80 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80e8a:	9b01      	ldr	r3, [sp, #4]
   80e8c:	f806 3c01 	strb.w	r3, [r6, #-1]
   80e90:	e017      	b.n	80ec2 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80e92:	4b1a      	ldr	r3, [pc, #104]	; (80efc <usart_serial_read_packet+0xbc>)
   80e94:	429d      	cmp	r5, r3
   80e96:	d109      	bne.n	80eac <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80e98:	4699      	mov	r9, r3
   80e9a:	4648      	mov	r0, r9
   80e9c:	a901      	add	r1, sp, #4
   80e9e:	47a0      	blx	r4
   80ea0:	2800      	cmp	r0, #0
   80ea2:	d1fa      	bne.n	80e9a <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80ea4:	9b01      	ldr	r3, [sp, #4]
   80ea6:	f806 3c01 	strb.w	r3, [r6, #-1]
   80eaa:	e014      	b.n	80ed6 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80eac:	4555      	cmp	r5, sl
   80eae:	d108      	bne.n	80ec2 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80eb0:	4650      	mov	r0, sl
   80eb2:	a901      	add	r1, sp, #4
   80eb4:	47a0      	blx	r4
   80eb6:	2800      	cmp	r0, #0
   80eb8:	d1fa      	bne.n	80eb0 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80eba:	9b01      	ldr	r3, [sp, #4]
   80ebc:	f806 3c01 	strb.w	r3, [r6, #-1]
   80ec0:	e009      	b.n	80ed6 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80ec2:	42bd      	cmp	r5, r7
   80ec4:	d107      	bne.n	80ed6 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80ec6:	4638      	mov	r0, r7
   80ec8:	a901      	add	r1, sp, #4
   80eca:	47a0      	blx	r4
   80ecc:	2800      	cmp	r0, #0
   80ece:	d1fa      	bne.n	80ec6 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80ed0:	9b01      	ldr	r3, [sp, #4]
   80ed2:	f806 3c01 	strb.w	r3, [r6, #-1]
   80ed6:	3601      	adds	r6, #1
   80ed8:	f1b8 0801 	subs.w	r8, r8, #1
   80edc:	d1be      	bne.n	80e5c <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   80ede:	2000      	movs	r0, #0
   80ee0:	b003      	add	sp, #12
   80ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80ee6:	bf00      	nop
   80ee8:	400a4000 	.word	0x400a4000
   80eec:	0008019d 	.word	0x0008019d
   80ef0:	400e0800 	.word	0x400e0800
   80ef4:	00080f4d 	.word	0x00080f4d
   80ef8:	40098000 	.word	0x40098000
   80efc:	4009c000 	.word	0x4009c000
   80f00:	400a0000 	.word	0x400a0000

00080f04 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80f04:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80f06:	23ac      	movs	r3, #172	; 0xac
   80f08:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80f0a:	680a      	ldr	r2, [r1, #0]
   80f0c:	684b      	ldr	r3, [r1, #4]
   80f0e:	fbb2 f3f3 	udiv	r3, r2, r3
   80f12:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80f14:	1e5c      	subs	r4, r3, #1
   80f16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80f1a:	4294      	cmp	r4, r2
   80f1c:	d80a      	bhi.n	80f34 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80f1e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80f20:	688b      	ldr	r3, [r1, #8]
   80f22:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80f24:	f240 2302 	movw	r3, #514	; 0x202
   80f28:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80f2c:	2350      	movs	r3, #80	; 0x50
   80f2e:	6003      	str	r3, [r0, #0]

	return 0;
   80f30:	2000      	movs	r0, #0
   80f32:	e000      	b.n	80f36 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80f34:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80f36:	f85d 4b04 	ldr.w	r4, [sp], #4
   80f3a:	4770      	bx	lr

00080f3c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80f3c:	6943      	ldr	r3, [r0, #20]
   80f3e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80f42:	bf1a      	itte	ne
   80f44:	61c1      	strne	r1, [r0, #28]
	return 0;
   80f46:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80f48:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80f4a:	4770      	bx	lr

00080f4c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80f4c:	6943      	ldr	r3, [r0, #20]
   80f4e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80f52:	bf1d      	ittte	ne
   80f54:	6983      	ldrne	r3, [r0, #24]
   80f56:	700b      	strbne	r3, [r1, #0]
	return 0;
   80f58:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80f5a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80f5c:	4770      	bx	lr
   80f5e:	bf00      	nop

00080f60 <setUp>:
uint32_t *const p_PIOB_ODSR = (uint32_t *) (PIOB_BASE_ADDRESS+0x0038U);	/* defines the address for status (values) of the output pins of the B register  */
uint32_t *const p_PIOB_OWER = (uint32_t *) (PIOB_BASE_ADDRESS+0x0010U);	/*   */

void setUp(void)
{
	*p_PIOB_PDR = 0xFFFFFFFFU; /* Disable PORT B */
   80f60:	f04f 32ff 	mov.w	r2, #4294967295
   80f64:	4b01      	ldr	r3, [pc, #4]	; (80f6c <setUp+0xc>)
   80f66:	601a      	str	r2, [r3, #0]
   80f68:	4770      	bx	lr
   80f6a:	bf00      	nop
   80f6c:	400e1004 	.word	0x400e1004

00080f70 <tearDown>:
}

void tearDown(void)
{
	*p_PIOB_PDR = 0xFFFFFFFF; /* Disable PORT B */
   80f70:	f04f 32ff 	mov.w	r2, #4294967295
   80f74:	4b01      	ldr	r3, [pc, #4]	; (80f7c <tearDown+0xc>)
   80f76:	601a      	str	r2, [r3, #0]
   80f78:	4770      	bx	lr
   80f7a:	bf00      	nop
   80f7c:	400e1004 	.word	0x400e1004

00080f80 <test_digitalDuePin13InitialiseProperly>:
	tearDown();
	setUp();
}

void test_digitalDuePin13InitialiseProperly(void)
{
   80f80:	b510      	push	{r4, lr}
   80f82:	b082      	sub	sp, #8
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output */
   80f84:	200d      	movs	r0, #13
   80f86:	2102      	movs	r1, #2
   80f88:	4b0c      	ldr	r3, [pc, #48]	; (80fbc <test_digitalDuePin13InitialiseProperly+0x3c>)
   80f8a:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH_MESSAGE(27, *p_PIOB_PSR, "PB27 is not initialised");	/* Check the status bit that PB27 on port B is properly initialised */
   80f8c:	4b0c      	ldr	r3, [pc, #48]	; (80fc0 <test_digitalDuePin13InitialiseProperly+0x40>)
   80f8e:	681a      	ldr	r2, [r3, #0]
   80f90:	2334      	movs	r3, #52	; 0x34
   80f92:	9300      	str	r3, [sp, #0]
   80f94:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   80f98:	f04f 31ff 	mov.w	r1, #4294967295
   80f9c:	4b09      	ldr	r3, [pc, #36]	; (80fc4 <test_digitalDuePin13InitialiseProperly+0x44>)
   80f9e:	4c0a      	ldr	r4, [pc, #40]	; (80fc8 <test_digitalDuePin13InitialiseProperly+0x48>)
   80fa0:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH_MESSAGE(27, *p_PIOB_OSR, "PB27 is not an output");	/* Check the status bit that PB27 on port B is an output */
   80fa2:	4b0a      	ldr	r3, [pc, #40]	; (80fcc <test_digitalDuePin13InitialiseProperly+0x4c>)
   80fa4:	681a      	ldr	r2, [r3, #0]
   80fa6:	2335      	movs	r3, #53	; 0x35
   80fa8:	9300      	str	r3, [sp, #0]
   80faa:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   80fae:	f04f 31ff 	mov.w	r1, #4294967295
   80fb2:	4b07      	ldr	r3, [pc, #28]	; (80fd0 <test_digitalDuePin13InitialiseProperly+0x50>)
   80fb4:	47a0      	blx	r4
}
   80fb6:	b002      	add	sp, #8
   80fb8:	bd10      	pop	{r4, pc}
   80fba:	bf00      	nop
   80fbc:	00080215 	.word	0x00080215
   80fc0:	400e1008 	.word	0x400e1008
   80fc4:	0008490c 	.word	0x0008490c
   80fc8:	00080b39 	.word	0x00080b39
   80fcc:	400e1018 	.word	0x400e1018
   80fd0:	00084924 	.word	0x00084924

00080fd4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   80fd6:	b083      	sub	sp, #12
   80fd8:	4604      	mov	r4, r0
   80fda:	460d      	mov	r5, r1
	uint32_t val = 0;
   80fdc:	2300      	movs	r3, #0
   80fde:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80fe0:	4b1f      	ldr	r3, [pc, #124]	; (81060 <usart_serial_getchar+0x8c>)
   80fe2:	4298      	cmp	r0, r3
   80fe4:	d107      	bne.n	80ff6 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80fe6:	461f      	mov	r7, r3
   80fe8:	4e1e      	ldr	r6, [pc, #120]	; (81064 <usart_serial_getchar+0x90>)
   80fea:	4638      	mov	r0, r7
   80fec:	4629      	mov	r1, r5
   80fee:	47b0      	blx	r6
   80ff0:	2800      	cmp	r0, #0
   80ff2:	d1fa      	bne.n	80fea <usart_serial_getchar+0x16>
   80ff4:	e019      	b.n	8102a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80ff6:	4b1c      	ldr	r3, [pc, #112]	; (81068 <usart_serial_getchar+0x94>)
   80ff8:	4298      	cmp	r0, r3
   80ffa:	d109      	bne.n	81010 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80ffc:	461f      	mov	r7, r3
   80ffe:	4e1b      	ldr	r6, [pc, #108]	; (8106c <usart_serial_getchar+0x98>)
   81000:	4638      	mov	r0, r7
   81002:	a901      	add	r1, sp, #4
   81004:	47b0      	blx	r6
   81006:	2800      	cmp	r0, #0
   81008:	d1fa      	bne.n	81000 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8100a:	9b01      	ldr	r3, [sp, #4]
   8100c:	702b      	strb	r3, [r5, #0]
   8100e:	e019      	b.n	81044 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81010:	4b17      	ldr	r3, [pc, #92]	; (81070 <usart_serial_getchar+0x9c>)
   81012:	4298      	cmp	r0, r3
   81014:	d109      	bne.n	8102a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   81016:	461e      	mov	r6, r3
   81018:	4c14      	ldr	r4, [pc, #80]	; (8106c <usart_serial_getchar+0x98>)
   8101a:	4630      	mov	r0, r6
   8101c:	a901      	add	r1, sp, #4
   8101e:	47a0      	blx	r4
   81020:	2800      	cmp	r0, #0
   81022:	d1fa      	bne.n	8101a <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   81024:	9b01      	ldr	r3, [sp, #4]
   81026:	702b      	strb	r3, [r5, #0]
   81028:	e018      	b.n	8105c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8102a:	4b12      	ldr	r3, [pc, #72]	; (81074 <usart_serial_getchar+0xa0>)
   8102c:	429c      	cmp	r4, r3
   8102e:	d109      	bne.n	81044 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   81030:	461e      	mov	r6, r3
   81032:	4c0e      	ldr	r4, [pc, #56]	; (8106c <usart_serial_getchar+0x98>)
   81034:	4630      	mov	r0, r6
   81036:	a901      	add	r1, sp, #4
   81038:	47a0      	blx	r4
   8103a:	2800      	cmp	r0, #0
   8103c:	d1fa      	bne.n	81034 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8103e:	9b01      	ldr	r3, [sp, #4]
   81040:	702b      	strb	r3, [r5, #0]
   81042:	e00b      	b.n	8105c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81044:	4b0c      	ldr	r3, [pc, #48]	; (81078 <usart_serial_getchar+0xa4>)
   81046:	429c      	cmp	r4, r3
   81048:	d108      	bne.n	8105c <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   8104a:	461e      	mov	r6, r3
   8104c:	4c07      	ldr	r4, [pc, #28]	; (8106c <usart_serial_getchar+0x98>)
   8104e:	4630      	mov	r0, r6
   81050:	a901      	add	r1, sp, #4
   81052:	47a0      	blx	r4
   81054:	2800      	cmp	r0, #0
   81056:	d1fa      	bne.n	8104e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   81058:	9b01      	ldr	r3, [sp, #4]
   8105a:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8105c:	b003      	add	sp, #12
   8105e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81060:	400e0800 	.word	0x400e0800
   81064:	00080f4d 	.word	0x00080f4d
   81068:	40098000 	.word	0x40098000
   8106c:	0008019d 	.word	0x0008019d
   81070:	4009c000 	.word	0x4009c000
   81074:	400a0000 	.word	0x400a0000
   81078:	400a4000 	.word	0x400a4000

0008107c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   8107c:	b570      	push	{r4, r5, r6, lr}
   8107e:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81080:	4b21      	ldr	r3, [pc, #132]	; (81108 <usart_serial_putchar+0x8c>)
   81082:	4298      	cmp	r0, r3
   81084:	d107      	bne.n	81096 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   81086:	461e      	mov	r6, r3
   81088:	4d20      	ldr	r5, [pc, #128]	; (8110c <usart_serial_putchar+0x90>)
   8108a:	4630      	mov	r0, r6
   8108c:	4621      	mov	r1, r4
   8108e:	47a8      	blx	r5
   81090:	2800      	cmp	r0, #0
   81092:	d1fa      	bne.n	8108a <usart_serial_putchar+0xe>
   81094:	e02b      	b.n	810ee <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81096:	4b1e      	ldr	r3, [pc, #120]	; (81110 <usart_serial_putchar+0x94>)
   81098:	4298      	cmp	r0, r3
   8109a:	d107      	bne.n	810ac <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   8109c:	461e      	mov	r6, r3
   8109e:	4d1d      	ldr	r5, [pc, #116]	; (81114 <usart_serial_putchar+0x98>)
   810a0:	4630      	mov	r0, r6
   810a2:	4621      	mov	r1, r4
   810a4:	47a8      	blx	r5
   810a6:	2800      	cmp	r0, #0
   810a8:	d1fa      	bne.n	810a0 <usart_serial_putchar+0x24>
   810aa:	e022      	b.n	810f2 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   810ac:	4b1a      	ldr	r3, [pc, #104]	; (81118 <usart_serial_putchar+0x9c>)
   810ae:	4298      	cmp	r0, r3
   810b0:	d107      	bne.n	810c2 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   810b2:	461e      	mov	r6, r3
   810b4:	4d17      	ldr	r5, [pc, #92]	; (81114 <usart_serial_putchar+0x98>)
   810b6:	4630      	mov	r0, r6
   810b8:	4621      	mov	r1, r4
   810ba:	47a8      	blx	r5
   810bc:	2800      	cmp	r0, #0
   810be:	d1fa      	bne.n	810b6 <usart_serial_putchar+0x3a>
   810c0:	e019      	b.n	810f6 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   810c2:	4b16      	ldr	r3, [pc, #88]	; (8111c <usart_serial_putchar+0xa0>)
   810c4:	4298      	cmp	r0, r3
   810c6:	d107      	bne.n	810d8 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   810c8:	461e      	mov	r6, r3
   810ca:	4d12      	ldr	r5, [pc, #72]	; (81114 <usart_serial_putchar+0x98>)
   810cc:	4630      	mov	r0, r6
   810ce:	4621      	mov	r1, r4
   810d0:	47a8      	blx	r5
   810d2:	2800      	cmp	r0, #0
   810d4:	d1fa      	bne.n	810cc <usart_serial_putchar+0x50>
   810d6:	e010      	b.n	810fa <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   810d8:	4b11      	ldr	r3, [pc, #68]	; (81120 <usart_serial_putchar+0xa4>)
   810da:	4298      	cmp	r0, r3
   810dc:	d10f      	bne.n	810fe <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   810de:	461e      	mov	r6, r3
   810e0:	4d0c      	ldr	r5, [pc, #48]	; (81114 <usart_serial_putchar+0x98>)
   810e2:	4630      	mov	r0, r6
   810e4:	4621      	mov	r1, r4
   810e6:	47a8      	blx	r5
   810e8:	2800      	cmp	r0, #0
   810ea:	d1fa      	bne.n	810e2 <usart_serial_putchar+0x66>
   810ec:	e009      	b.n	81102 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   810ee:	2001      	movs	r0, #1
   810f0:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   810f2:	2001      	movs	r0, #1
   810f4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   810f6:	2001      	movs	r0, #1
   810f8:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   810fa:	2001      	movs	r0, #1
   810fc:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   810fe:	2000      	movs	r0, #0
   81100:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81102:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   81104:	bd70      	pop	{r4, r5, r6, pc}
   81106:	bf00      	nop
   81108:	400e0800 	.word	0x400e0800
   8110c:	00080f3d 	.word	0x00080f3d
   81110:	40098000 	.word	0x40098000
   81114:	00080189 	.word	0x00080189
   81118:	4009c000 	.word	0x4009c000
   8111c:	400a0000 	.word	0x400a0000
   81120:	400a4000 	.word	0x400a4000

00081124 <main>:
	printf("=============\n");
}


int main(void)
{
   81124:	b530      	push	{r4, r5, lr}
   81126:	b085      	sub	sp, #20
	/* Insert system clock initialization code here (sysclk_init()). */
	 sysclk_init();
   81128:	4b1c      	ldr	r3, [pc, #112]	; (8119c <main+0x78>)
   8112a:	4798      	blx	r3
	 board_init();
   8112c:	4b1c      	ldr	r3, [pc, #112]	; (811a0 <main+0x7c>)
   8112e:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81130:	2008      	movs	r0, #8
   81132:	4d1c      	ldr	r5, [pc, #112]	; (811a4 <main+0x80>)
   81134:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   81136:	4c1c      	ldr	r4, [pc, #112]	; (811a8 <main+0x84>)
   81138:	4b1c      	ldr	r3, [pc, #112]	; (811ac <main+0x88>)
   8113a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8113c:	4a1c      	ldr	r2, [pc, #112]	; (811b0 <main+0x8c>)
   8113e:	4b1d      	ldr	r3, [pc, #116]	; (811b4 <main+0x90>)
   81140:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81142:	4a1d      	ldr	r2, [pc, #116]	; (811b8 <main+0x94>)
   81144:	4b1d      	ldr	r3, [pc, #116]	; (811bc <main+0x98>)
   81146:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81148:	4b1d      	ldr	r3, [pc, #116]	; (811c0 <main+0x9c>)
   8114a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8114c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81150:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   81152:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81156:	9303      	str	r3, [sp, #12]
   81158:	2008      	movs	r0, #8
   8115a:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8115c:	4620      	mov	r0, r4
   8115e:	a901      	add	r1, sp, #4
   81160:	4b18      	ldr	r3, [pc, #96]	; (811c4 <main+0xa0>)
   81162:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81164:	4d18      	ldr	r5, [pc, #96]	; (811c8 <main+0xa4>)
   81166:	682b      	ldr	r3, [r5, #0]
   81168:	6898      	ldr	r0, [r3, #8]
   8116a:	2100      	movs	r1, #0
   8116c:	4c17      	ldr	r4, [pc, #92]	; (811cc <main+0xa8>)
   8116e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   81170:	682b      	ldr	r3, [r5, #0]
   81172:	6858      	ldr	r0, [r3, #4]
   81174:	2100      	movs	r1, #0
   81176:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   81178:	4815      	ldr	r0, [pc, #84]	; (811d0 <main+0xac>)
   8117a:	4c16      	ldr	r4, [pc, #88]	; (811d4 <main+0xb0>)
   8117c:	47a0      	blx	r4
	printf("=============\n");
   8117e:	4816      	ldr	r0, [pc, #88]	; (811d8 <main+0xb4>)
   81180:	47a0      	blx	r4

	/* Initialize the console UART used from within Atmel Studio*/
	configure_console();
	
	/* From here on the program uses the Unity testing framework */
	UnityBegin("../test/testDigitalIO.c");
   81182:	4816      	ldr	r0, [pc, #88]	; (811dc <main+0xb8>)
   81184:	4b16      	ldr	r3, [pc, #88]	; (811e0 <main+0xbc>)
   81186:	4798      	blx	r3
	
	/* Run the tests from the test-file */
	RUN_TEST(test_digitalDuePin13InitialiseProperly, 10);
   81188:	4816      	ldr	r0, [pc, #88]	; (811e4 <main+0xc0>)
   8118a:	4917      	ldr	r1, [pc, #92]	; (811e8 <main+0xc4>)
   8118c:	220a      	movs	r2, #10
   8118e:	4b17      	ldr	r3, [pc, #92]	; (811ec <main+0xc8>)
   81190:	4798      	blx	r3
	//
	//RUN_TEST(test_digitalDuePin13And22InitialiseProperly, 30);
	//RUN_TEST(test_digitalDuePin13And22IsSet, 35);
	//RUN_TEST(test_digitalDuePin13isClearedAnd22IsSet, 38);

	UnityEnd();
   81192:	4b17      	ldr	r3, [pc, #92]	; (811f0 <main+0xcc>)
   81194:	4798      	blx	r3
	
	return 0;
}
   81196:	2000      	movs	r0, #0
   81198:	b005      	add	sp, #20
   8119a:	bd30      	pop	{r4, r5, pc}
   8119c:	000811f5 	.word	0x000811f5
   811a0:	00081259 	.word	0x00081259
   811a4:	00081681 	.word	0x00081681
   811a8:	400e0800 	.word	0x400e0800
   811ac:	20070b84 	.word	0x20070b84
   811b0:	0008107d 	.word	0x0008107d
   811b4:	20070b80 	.word	0x20070b80
   811b8:	00080fd5 	.word	0x00080fd5
   811bc:	20070b00 	.word	0x20070b00
   811c0:	0501bd00 	.word	0x0501bd00
   811c4:	00080f05 	.word	0x00080f05
   811c8:	20070560 	.word	0x20070560
   811cc:	00081a05 	.word	0x00081a05
   811d0:	0008498c 	.word	0x0008498c
   811d4:	00081949 	.word	0x00081949
   811d8:	0008499c 	.word	0x0008499c
   811dc:	000849ac 	.word	0x000849ac
   811e0:	00080c09 	.word	0x00080c09
   811e4:	00080f81 	.word	0x00080f81
   811e8:	000849c4 	.word	0x000849c4
   811ec:	00080bb1 	.word	0x00080bb1
   811f0:	00080c25 	.word	0x00080c25

000811f4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   811f4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   811f6:	480e      	ldr	r0, [pc, #56]	; (81230 <sysclk_init+0x3c>)
   811f8:	4b0e      	ldr	r3, [pc, #56]	; (81234 <sysclk_init+0x40>)
   811fa:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   811fc:	2000      	movs	r0, #0
   811fe:	213e      	movs	r1, #62	; 0x3e
   81200:	4b0d      	ldr	r3, [pc, #52]	; (81238 <sysclk_init+0x44>)
   81202:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81204:	4c0d      	ldr	r4, [pc, #52]	; (8123c <sysclk_init+0x48>)
   81206:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81208:	2800      	cmp	r0, #0
   8120a:	d0fc      	beq.n	81206 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8120c:	4b0c      	ldr	r3, [pc, #48]	; (81240 <sysclk_init+0x4c>)
   8120e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81210:	4a0c      	ldr	r2, [pc, #48]	; (81244 <sysclk_init+0x50>)
   81212:	4b0d      	ldr	r3, [pc, #52]	; (81248 <sysclk_init+0x54>)
   81214:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81216:	4c0d      	ldr	r4, [pc, #52]	; (8124c <sysclk_init+0x58>)
   81218:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8121a:	2800      	cmp	r0, #0
   8121c:	d0fc      	beq.n	81218 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8121e:	2010      	movs	r0, #16
   81220:	4b0b      	ldr	r3, [pc, #44]	; (81250 <sysclk_init+0x5c>)
   81222:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81224:	4b0b      	ldr	r3, [pc, #44]	; (81254 <sysclk_init+0x60>)
   81226:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81228:	4801      	ldr	r0, [pc, #4]	; (81230 <sysclk_init+0x3c>)
   8122a:	4b02      	ldr	r3, [pc, #8]	; (81234 <sysclk_init+0x40>)
   8122c:	4798      	blx	r3
   8122e:	bd10      	pop	{r4, pc}
   81230:	0501bd00 	.word	0x0501bd00
   81234:	200700a5 	.word	0x200700a5
   81238:	000815fd 	.word	0x000815fd
   8123c:	00081651 	.word	0x00081651
   81240:	00081661 	.word	0x00081661
   81244:	200d3f01 	.word	0x200d3f01
   81248:	400e0600 	.word	0x400e0600
   8124c:	00081671 	.word	0x00081671
   81250:	00081599 	.word	0x00081599
   81254:	0008178d 	.word	0x0008178d

00081258 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81258:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8125a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8125e:	4b16      	ldr	r3, [pc, #88]	; (812b8 <board_init+0x60>)
   81260:	605a      	str	r2, [r3, #4]
   81262:	200b      	movs	r0, #11
   81264:	4c15      	ldr	r4, [pc, #84]	; (812bc <board_init+0x64>)
   81266:	47a0      	blx	r4
   81268:	200c      	movs	r0, #12
   8126a:	47a0      	blx	r4
   8126c:	200d      	movs	r0, #13
   8126e:	47a0      	blx	r4
   81270:	200e      	movs	r0, #14
   81272:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81274:	203b      	movs	r0, #59	; 0x3b
   81276:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8127a:	4c11      	ldr	r4, [pc, #68]	; (812c0 <board_init+0x68>)
   8127c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8127e:	2055      	movs	r0, #85	; 0x55
   81280:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81284:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81286:	2056      	movs	r0, #86	; 0x56
   81288:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8128c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8128e:	2068      	movs	r0, #104	; 0x68
   81290:	490c      	ldr	r1, [pc, #48]	; (812c4 <board_init+0x6c>)
   81292:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81294:	205c      	movs	r0, #92	; 0x5c
   81296:	490c      	ldr	r1, [pc, #48]	; (812c8 <board_init+0x70>)
   81298:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8129a:	480c      	ldr	r0, [pc, #48]	; (812cc <board_init+0x74>)
   8129c:	f44f 7140 	mov.w	r1, #768	; 0x300
   812a0:	4a0b      	ldr	r2, [pc, #44]	; (812d0 <board_init+0x78>)
   812a2:	4b0c      	ldr	r3, [pc, #48]	; (812d4 <board_init+0x7c>)
   812a4:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   812a6:	202b      	movs	r0, #43	; 0x2b
   812a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   812ac:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   812ae:	202a      	movs	r0, #42	; 0x2a
   812b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   812b4:	47a0      	blx	r4
   812b6:	bd10      	pop	{r4, pc}
   812b8:	400e1a50 	.word	0x400e1a50
   812bc:	00081681 	.word	0x00081681
   812c0:	0008137d 	.word	0x0008137d
   812c4:	28000079 	.word	0x28000079
   812c8:	28000001 	.word	0x28000001
   812cc:	400e0e00 	.word	0x400e0e00
   812d0:	08000001 	.word	0x08000001
   812d4:	00081451 	.word	0x00081451

000812d8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   812d8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   812da:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   812de:	d016      	beq.n	8130e <pio_set_peripheral+0x36>
   812e0:	d804      	bhi.n	812ec <pio_set_peripheral+0x14>
   812e2:	b1c1      	cbz	r1, 81316 <pio_set_peripheral+0x3e>
   812e4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   812e8:	d00a      	beq.n	81300 <pio_set_peripheral+0x28>
   812ea:	e013      	b.n	81314 <pio_set_peripheral+0x3c>
   812ec:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   812f0:	d011      	beq.n	81316 <pio_set_peripheral+0x3e>
   812f2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   812f6:	d00e      	beq.n	81316 <pio_set_peripheral+0x3e>
   812f8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   812fc:	d10a      	bne.n	81314 <pio_set_peripheral+0x3c>
   812fe:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81300:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81302:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81304:	400b      	ands	r3, r1
   81306:	ea23 0302 	bic.w	r3, r3, r2
   8130a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8130c:	e002      	b.n	81314 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8130e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81310:	4313      	orrs	r3, r2
   81312:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81314:	6042      	str	r2, [r0, #4]
   81316:	4770      	bx	lr

00081318 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81318:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8131a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8131e:	bf14      	ite	ne
   81320:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81322:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81324:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81328:	bf14      	ite	ne
   8132a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8132c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8132e:	f012 0f02 	tst.w	r2, #2
   81332:	d002      	beq.n	8133a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81334:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81338:	e004      	b.n	81344 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8133a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8133e:	bf18      	it	ne
   81340:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81344:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81346:	6001      	str	r1, [r0, #0]
   81348:	4770      	bx	lr
   8134a:	bf00      	nop

0008134c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8134c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8134e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81350:	9c01      	ldr	r4, [sp, #4]
   81352:	b10c      	cbz	r4, 81358 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81354:	6641      	str	r1, [r0, #100]	; 0x64
   81356:	e000      	b.n	8135a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81358:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8135a:	b10b      	cbz	r3, 81360 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8135c:	6501      	str	r1, [r0, #80]	; 0x50
   8135e:	e000      	b.n	81362 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81360:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81362:	b10a      	cbz	r2, 81368 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81364:	6301      	str	r1, [r0, #48]	; 0x30
   81366:	e000      	b.n	8136a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81368:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8136a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8136c:	6001      	str	r1, [r0, #0]
}
   8136e:	f85d 4b04 	ldr.w	r4, [sp], #4
   81372:	4770      	bx	lr

00081374 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81374:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81376:	4770      	bx	lr

00081378 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81378:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8137a:	4770      	bx	lr

0008137c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8137c:	b570      	push	{r4, r5, r6, lr}
   8137e:	b082      	sub	sp, #8
   81380:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81382:	0944      	lsrs	r4, r0, #5
   81384:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   81388:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8138c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8138e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   81392:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81396:	d030      	beq.n	813fa <pio_configure_pin+0x7e>
   81398:	d806      	bhi.n	813a8 <pio_configure_pin+0x2c>
   8139a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8139e:	d00a      	beq.n	813b6 <pio_configure_pin+0x3a>
   813a0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   813a4:	d018      	beq.n	813d8 <pio_configure_pin+0x5c>
   813a6:	e049      	b.n	8143c <pio_configure_pin+0xc0>
   813a8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   813ac:	d030      	beq.n	81410 <pio_configure_pin+0x94>
   813ae:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   813b2:	d02d      	beq.n	81410 <pio_configure_pin+0x94>
   813b4:	e042      	b.n	8143c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   813b6:	f000 001f 	and.w	r0, r0, #31
   813ba:	2401      	movs	r4, #1
   813bc:	4084      	lsls	r4, r0
   813be:	4630      	mov	r0, r6
   813c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   813c4:	4622      	mov	r2, r4
   813c6:	4b1f      	ldr	r3, [pc, #124]	; (81444 <pio_configure_pin+0xc8>)
   813c8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   813ca:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   813ce:	bf14      	ite	ne
   813d0:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   813d2:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   813d4:	2001      	movs	r0, #1
   813d6:	e032      	b.n	8143e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   813d8:	f000 001f 	and.w	r0, r0, #31
   813dc:	2401      	movs	r4, #1
   813de:	4084      	lsls	r4, r0
   813e0:	4630      	mov	r0, r6
   813e2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   813e6:	4622      	mov	r2, r4
   813e8:	4b16      	ldr	r3, [pc, #88]	; (81444 <pio_configure_pin+0xc8>)
   813ea:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   813ec:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   813f0:	bf14      	ite	ne
   813f2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   813f4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   813f6:	2001      	movs	r0, #1
   813f8:	e021      	b.n	8143e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   813fa:	f000 011f 	and.w	r1, r0, #31
   813fe:	2401      	movs	r4, #1
   81400:	4630      	mov	r0, r6
   81402:	fa04 f101 	lsl.w	r1, r4, r1
   81406:	462a      	mov	r2, r5
   81408:	4b0f      	ldr	r3, [pc, #60]	; (81448 <pio_configure_pin+0xcc>)
   8140a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8140c:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8140e:	e016      	b.n	8143e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81410:	f000 011f 	and.w	r1, r0, #31
   81414:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81416:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8141a:	ea05 0304 	and.w	r3, r5, r4
   8141e:	9300      	str	r3, [sp, #0]
   81420:	4630      	mov	r0, r6
   81422:	fa04 f101 	lsl.w	r1, r4, r1
   81426:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8142a:	bf14      	ite	ne
   8142c:	2200      	movne	r2, #0
   8142e:	2201      	moveq	r2, #1
   81430:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81434:	4d05      	ldr	r5, [pc, #20]	; (8144c <pio_configure_pin+0xd0>)
   81436:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   81438:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8143a:	e000      	b.n	8143e <pio_configure_pin+0xc2>

	default:
		return 0;
   8143c:	2000      	movs	r0, #0
	}

	return 1;
}
   8143e:	b002      	add	sp, #8
   81440:	bd70      	pop	{r4, r5, r6, pc}
   81442:	bf00      	nop
   81444:	000812d9 	.word	0x000812d9
   81448:	00081319 	.word	0x00081319
   8144c:	0008134d 	.word	0x0008134d

00081450 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81450:	b5f0      	push	{r4, r5, r6, r7, lr}
   81452:	b083      	sub	sp, #12
   81454:	4607      	mov	r7, r0
   81456:	460e      	mov	r6, r1
   81458:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8145a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8145e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81462:	d026      	beq.n	814b2 <pio_configure_pin_group+0x62>
   81464:	d806      	bhi.n	81474 <pio_configure_pin_group+0x24>
   81466:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8146a:	d00a      	beq.n	81482 <pio_configure_pin_group+0x32>
   8146c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81470:	d013      	beq.n	8149a <pio_configure_pin_group+0x4a>
   81472:	e034      	b.n	814de <pio_configure_pin_group+0x8e>
   81474:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81478:	d01f      	beq.n	814ba <pio_configure_pin_group+0x6a>
   8147a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8147e:	d01c      	beq.n	814ba <pio_configure_pin_group+0x6a>
   81480:	e02d      	b.n	814de <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81482:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81486:	4632      	mov	r2, r6
   81488:	4b16      	ldr	r3, [pc, #88]	; (814e4 <pio_configure_pin_group+0x94>)
   8148a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8148c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81490:	bf14      	ite	ne
   81492:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81494:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81496:	2001      	movs	r0, #1
   81498:	e022      	b.n	814e0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8149a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8149e:	4632      	mov	r2, r6
   814a0:	4b10      	ldr	r3, [pc, #64]	; (814e4 <pio_configure_pin_group+0x94>)
   814a2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   814a4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   814a8:	bf14      	ite	ne
   814aa:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   814ac:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   814ae:	2001      	movs	r0, #1
   814b0:	e016      	b.n	814e0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   814b2:	4b0d      	ldr	r3, [pc, #52]	; (814e8 <pio_configure_pin_group+0x98>)
   814b4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   814b6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   814b8:	e012      	b.n	814e0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   814ba:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   814be:	f005 0301 	and.w	r3, r5, #1
   814c2:	9300      	str	r3, [sp, #0]
   814c4:	4638      	mov	r0, r7
   814c6:	4631      	mov	r1, r6
   814c8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   814cc:	bf14      	ite	ne
   814ce:	2200      	movne	r2, #0
   814d0:	2201      	moveq	r2, #1
   814d2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   814d6:	4c05      	ldr	r4, [pc, #20]	; (814ec <pio_configure_pin_group+0x9c>)
   814d8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   814da:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   814dc:	e000      	b.n	814e0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   814de:	2000      	movs	r0, #0
	}

	return 1;
}
   814e0:	b003      	add	sp, #12
   814e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   814e4:	000812d9 	.word	0x000812d9
   814e8:	00081319 	.word	0x00081319
   814ec:	0008134d 	.word	0x0008134d

000814f0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   814f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   814f4:	4604      	mov	r4, r0
   814f6:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   814f8:	4b10      	ldr	r3, [pc, #64]	; (8153c <pio_handler_process+0x4c>)
   814fa:	4798      	blx	r3
   814fc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   814fe:	4620      	mov	r0, r4
   81500:	4b0f      	ldr	r3, [pc, #60]	; (81540 <pio_handler_process+0x50>)
   81502:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81504:	4005      	ands	r5, r0
   81506:	d017      	beq.n	81538 <pio_handler_process+0x48>
   81508:	4f0e      	ldr	r7, [pc, #56]	; (81544 <pio_handler_process+0x54>)
   8150a:	f107 040c 	add.w	r4, r7, #12
   8150e:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81510:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81514:	42b3      	cmp	r3, r6
   81516:	d10a      	bne.n	8152e <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81518:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8151c:	4229      	tst	r1, r5
   8151e:	d006      	beq.n	8152e <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81520:	6823      	ldr	r3, [r4, #0]
   81522:	4630      	mov	r0, r6
   81524:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81526:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8152a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8152e:	42bc      	cmp	r4, r7
   81530:	d002      	beq.n	81538 <pio_handler_process+0x48>
   81532:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81534:	2d00      	cmp	r5, #0
   81536:	d1eb      	bne.n	81510 <pio_handler_process+0x20>
   81538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8153c:	00081375 	.word	0x00081375
   81540:	00081379 	.word	0x00081379
   81544:	20070a58 	.word	0x20070a58

00081548 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81548:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8154a:	4802      	ldr	r0, [pc, #8]	; (81554 <PIOA_Handler+0xc>)
   8154c:	210b      	movs	r1, #11
   8154e:	4b02      	ldr	r3, [pc, #8]	; (81558 <PIOA_Handler+0x10>)
   81550:	4798      	blx	r3
   81552:	bd08      	pop	{r3, pc}
   81554:	400e0e00 	.word	0x400e0e00
   81558:	000814f1 	.word	0x000814f1

0008155c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8155c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8155e:	4802      	ldr	r0, [pc, #8]	; (81568 <PIOB_Handler+0xc>)
   81560:	210c      	movs	r1, #12
   81562:	4b02      	ldr	r3, [pc, #8]	; (8156c <PIOB_Handler+0x10>)
   81564:	4798      	blx	r3
   81566:	bd08      	pop	{r3, pc}
   81568:	400e1000 	.word	0x400e1000
   8156c:	000814f1 	.word	0x000814f1

00081570 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81570:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81572:	4802      	ldr	r0, [pc, #8]	; (8157c <PIOC_Handler+0xc>)
   81574:	210d      	movs	r1, #13
   81576:	4b02      	ldr	r3, [pc, #8]	; (81580 <PIOC_Handler+0x10>)
   81578:	4798      	blx	r3
   8157a:	bd08      	pop	{r3, pc}
   8157c:	400e1200 	.word	0x400e1200
   81580:	000814f1 	.word	0x000814f1

00081584 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81584:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81586:	4802      	ldr	r0, [pc, #8]	; (81590 <PIOD_Handler+0xc>)
   81588:	210e      	movs	r1, #14
   8158a:	4b02      	ldr	r3, [pc, #8]	; (81594 <PIOD_Handler+0x10>)
   8158c:	4798      	blx	r3
   8158e:	bd08      	pop	{r3, pc}
   81590:	400e1400 	.word	0x400e1400
   81594:	000814f1 	.word	0x000814f1

00081598 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81598:	4b17      	ldr	r3, [pc, #92]	; (815f8 <pmc_switch_mck_to_pllack+0x60>)
   8159a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8159c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   815a0:	4310      	orrs	r0, r2
   815a2:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   815a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   815a6:	f013 0f08 	tst.w	r3, #8
   815aa:	d109      	bne.n	815c0 <pmc_switch_mck_to_pllack+0x28>
   815ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
   815b0:	4911      	ldr	r1, [pc, #68]	; (815f8 <pmc_switch_mck_to_pllack+0x60>)
   815b2:	e001      	b.n	815b8 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   815b4:	3b01      	subs	r3, #1
   815b6:	d019      	beq.n	815ec <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   815b8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   815ba:	f012 0f08 	tst.w	r2, #8
   815be:	d0f9      	beq.n	815b4 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   815c0:	4b0d      	ldr	r3, [pc, #52]	; (815f8 <pmc_switch_mck_to_pllack+0x60>)
   815c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   815c4:	f022 0203 	bic.w	r2, r2, #3
   815c8:	f042 0202 	orr.w	r2, r2, #2
   815cc:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   815ce:	6e98      	ldr	r0, [r3, #104]	; 0x68
   815d0:	f010 0008 	ands.w	r0, r0, #8
   815d4:	d10c      	bne.n	815f0 <pmc_switch_mck_to_pllack+0x58>
   815d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   815da:	4907      	ldr	r1, [pc, #28]	; (815f8 <pmc_switch_mck_to_pllack+0x60>)
   815dc:	e001      	b.n	815e2 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   815de:	3b01      	subs	r3, #1
   815e0:	d008      	beq.n	815f4 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   815e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   815e4:	f012 0f08 	tst.w	r2, #8
   815e8:	d0f9      	beq.n	815de <pmc_switch_mck_to_pllack+0x46>
   815ea:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   815ec:	2001      	movs	r0, #1
   815ee:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   815f0:	2000      	movs	r0, #0
   815f2:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   815f4:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   815f6:	4770      	bx	lr
   815f8:	400e0600 	.word	0x400e0600

000815fc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   815fc:	b138      	cbz	r0, 8160e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   815fe:	4911      	ldr	r1, [pc, #68]	; (81644 <pmc_switch_mainck_to_xtal+0x48>)
   81600:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81602:	4a11      	ldr	r2, [pc, #68]	; (81648 <pmc_switch_mainck_to_xtal+0x4c>)
   81604:	401a      	ands	r2, r3
   81606:	4b11      	ldr	r3, [pc, #68]	; (8164c <pmc_switch_mainck_to_xtal+0x50>)
   81608:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8160a:	620b      	str	r3, [r1, #32]
   8160c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8160e:	4a0d      	ldr	r2, [pc, #52]	; (81644 <pmc_switch_mainck_to_xtal+0x48>)
   81610:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81612:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81616:	f023 0303 	bic.w	r3, r3, #3
   8161a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8161e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81622:	0209      	lsls	r1, r1, #8
   81624:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81626:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81628:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8162a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8162c:	f013 0f01 	tst.w	r3, #1
   81630:	d0fb      	beq.n	8162a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81632:	4a04      	ldr	r2, [pc, #16]	; (81644 <pmc_switch_mainck_to_xtal+0x48>)
   81634:	6a13      	ldr	r3, [r2, #32]
   81636:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8163a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8163e:	6213      	str	r3, [r2, #32]
   81640:	4770      	bx	lr
   81642:	bf00      	nop
   81644:	400e0600 	.word	0x400e0600
   81648:	fec8fffc 	.word	0xfec8fffc
   8164c:	01370002 	.word	0x01370002

00081650 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81650:	4b02      	ldr	r3, [pc, #8]	; (8165c <pmc_osc_is_ready_mainck+0xc>)
   81652:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81654:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81658:	4770      	bx	lr
   8165a:	bf00      	nop
   8165c:	400e0600 	.word	0x400e0600

00081660 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81660:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81664:	4b01      	ldr	r3, [pc, #4]	; (8166c <pmc_disable_pllack+0xc>)
   81666:	629a      	str	r2, [r3, #40]	; 0x28
   81668:	4770      	bx	lr
   8166a:	bf00      	nop
   8166c:	400e0600 	.word	0x400e0600

00081670 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81670:	4b02      	ldr	r3, [pc, #8]	; (8167c <pmc_is_locked_pllack+0xc>)
   81672:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81674:	f000 0002 	and.w	r0, r0, #2
   81678:	4770      	bx	lr
   8167a:	bf00      	nop
   8167c:	400e0600 	.word	0x400e0600

00081680 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81680:	282c      	cmp	r0, #44	; 0x2c
   81682:	d820      	bhi.n	816c6 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   81684:	281f      	cmp	r0, #31
   81686:	d80d      	bhi.n	816a4 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81688:	4b12      	ldr	r3, [pc, #72]	; (816d4 <pmc_enable_periph_clk+0x54>)
   8168a:	699a      	ldr	r2, [r3, #24]
   8168c:	2301      	movs	r3, #1
   8168e:	4083      	lsls	r3, r0
   81690:	401a      	ands	r2, r3
   81692:	4293      	cmp	r3, r2
   81694:	d019      	beq.n	816ca <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   81696:	2301      	movs	r3, #1
   81698:	fa03 f000 	lsl.w	r0, r3, r0
   8169c:	4b0d      	ldr	r3, [pc, #52]	; (816d4 <pmc_enable_periph_clk+0x54>)
   8169e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   816a0:	2000      	movs	r0, #0
   816a2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   816a4:	4b0b      	ldr	r3, [pc, #44]	; (816d4 <pmc_enable_periph_clk+0x54>)
   816a6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   816aa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   816ac:	2301      	movs	r3, #1
   816ae:	4083      	lsls	r3, r0
   816b0:	401a      	ands	r2, r3
   816b2:	4293      	cmp	r3, r2
   816b4:	d00b      	beq.n	816ce <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   816b6:	2301      	movs	r3, #1
   816b8:	fa03 f000 	lsl.w	r0, r3, r0
   816bc:	4b05      	ldr	r3, [pc, #20]	; (816d4 <pmc_enable_periph_clk+0x54>)
   816be:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   816c2:	2000      	movs	r0, #0
   816c4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   816c6:	2001      	movs	r0, #1
   816c8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   816ca:	2000      	movs	r0, #0
   816cc:	4770      	bx	lr
   816ce:	2000      	movs	r0, #0
}
   816d0:	4770      	bx	lr
   816d2:	bf00      	nop
   816d4:	400e0600 	.word	0x400e0600

000816d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   816d8:	e7fe      	b.n	816d8 <Dummy_Handler>
   816da:	bf00      	nop

000816dc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   816dc:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   816de:	4b1e      	ldr	r3, [pc, #120]	; (81758 <Reset_Handler+0x7c>)
   816e0:	4a1e      	ldr	r2, [pc, #120]	; (8175c <Reset_Handler+0x80>)
   816e2:	429a      	cmp	r2, r3
   816e4:	d003      	beq.n	816ee <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   816e6:	4b1e      	ldr	r3, [pc, #120]	; (81760 <Reset_Handler+0x84>)
   816e8:	4a1b      	ldr	r2, [pc, #108]	; (81758 <Reset_Handler+0x7c>)
   816ea:	429a      	cmp	r2, r3
   816ec:	d304      	bcc.n	816f8 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   816ee:	4b1d      	ldr	r3, [pc, #116]	; (81764 <Reset_Handler+0x88>)
   816f0:	4a1d      	ldr	r2, [pc, #116]	; (81768 <Reset_Handler+0x8c>)
   816f2:	429a      	cmp	r2, r3
   816f4:	d30f      	bcc.n	81716 <Reset_Handler+0x3a>
   816f6:	e01a      	b.n	8172e <Reset_Handler+0x52>
   816f8:	4b1c      	ldr	r3, [pc, #112]	; (8176c <Reset_Handler+0x90>)
   816fa:	4c1d      	ldr	r4, [pc, #116]	; (81770 <Reset_Handler+0x94>)
   816fc:	1ae4      	subs	r4, r4, r3
   816fe:	f024 0403 	bic.w	r4, r4, #3
   81702:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81704:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   81706:	4814      	ldr	r0, [pc, #80]	; (81758 <Reset_Handler+0x7c>)
   81708:	4914      	ldr	r1, [pc, #80]	; (8175c <Reset_Handler+0x80>)
   8170a:	585a      	ldr	r2, [r3, r1]
   8170c:	501a      	str	r2, [r3, r0]
   8170e:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81710:	42a3      	cmp	r3, r4
   81712:	d1fa      	bne.n	8170a <Reset_Handler+0x2e>
   81714:	e7eb      	b.n	816ee <Reset_Handler+0x12>
   81716:	4b17      	ldr	r3, [pc, #92]	; (81774 <Reset_Handler+0x98>)
   81718:	4917      	ldr	r1, [pc, #92]	; (81778 <Reset_Handler+0x9c>)
   8171a:	1ac9      	subs	r1, r1, r3
   8171c:	f021 0103 	bic.w	r1, r1, #3
   81720:	1d1a      	adds	r2, r3, #4
   81722:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81724:	2200      	movs	r2, #0
   81726:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8172a:	428b      	cmp	r3, r1
   8172c:	d1fb      	bne.n	81726 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8172e:	4a13      	ldr	r2, [pc, #76]	; (8177c <Reset_Handler+0xa0>)
   81730:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81734:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81738:	4911      	ldr	r1, [pc, #68]	; (81780 <Reset_Handler+0xa4>)
   8173a:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8173c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   81740:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81744:	d203      	bcs.n	8174e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81746:	688a      	ldr	r2, [r1, #8]
   81748:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8174c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8174e:	4b0d      	ldr	r3, [pc, #52]	; (81784 <Reset_Handler+0xa8>)
   81750:	4798      	blx	r3

	/* Branch to main function */
	main();
   81752:	4b0d      	ldr	r3, [pc, #52]	; (81788 <Reset_Handler+0xac>)
   81754:	4798      	blx	r3
   81756:	e7fe      	b.n	81756 <Reset_Handler+0x7a>
   81758:	20070000 	.word	0x20070000
   8175c:	00084a70 	.word	0x00084a70
   81760:	2007099c 	.word	0x2007099c
   81764:	20070b8c 	.word	0x20070b8c
   81768:	2007099c 	.word	0x2007099c
   8176c:	20070004 	.word	0x20070004
   81770:	2007099f 	.word	0x2007099f
   81774:	20070998 	.word	0x20070998
   81778:	20070b87 	.word	0x20070b87
   8177c:	00080000 	.word	0x00080000
   81780:	e000ed00 	.word	0xe000ed00
   81784:	000818f9 	.word	0x000818f9
   81788:	00081125 	.word	0x00081125

0008178c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8178c:	4b3e      	ldr	r3, [pc, #248]	; (81888 <SystemCoreClockUpdate+0xfc>)
   8178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81790:	f003 0303 	and.w	r3, r3, #3
   81794:	2b03      	cmp	r3, #3
   81796:	d85f      	bhi.n	81858 <SystemCoreClockUpdate+0xcc>
   81798:	e8df f003 	tbb	[pc, r3]
   8179c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   817a0:	4b3a      	ldr	r3, [pc, #232]	; (8188c <SystemCoreClockUpdate+0x100>)
   817a2:	695b      	ldr	r3, [r3, #20]
   817a4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   817a8:	bf14      	ite	ne
   817aa:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   817ae:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   817b2:	4b37      	ldr	r3, [pc, #220]	; (81890 <SystemCoreClockUpdate+0x104>)
   817b4:	601a      	str	r2, [r3, #0]
   817b6:	e04f      	b.n	81858 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   817b8:	4b33      	ldr	r3, [pc, #204]	; (81888 <SystemCoreClockUpdate+0xfc>)
   817ba:	6a1b      	ldr	r3, [r3, #32]
   817bc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   817c0:	d003      	beq.n	817ca <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   817c2:	4a34      	ldr	r2, [pc, #208]	; (81894 <SystemCoreClockUpdate+0x108>)
   817c4:	4b32      	ldr	r3, [pc, #200]	; (81890 <SystemCoreClockUpdate+0x104>)
   817c6:	601a      	str	r2, [r3, #0]
   817c8:	e046      	b.n	81858 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   817ca:	4a33      	ldr	r2, [pc, #204]	; (81898 <SystemCoreClockUpdate+0x10c>)
   817cc:	4b30      	ldr	r3, [pc, #192]	; (81890 <SystemCoreClockUpdate+0x104>)
   817ce:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   817d0:	4b2d      	ldr	r3, [pc, #180]	; (81888 <SystemCoreClockUpdate+0xfc>)
   817d2:	6a1b      	ldr	r3, [r3, #32]
   817d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   817d8:	2b10      	cmp	r3, #16
   817da:	d002      	beq.n	817e2 <SystemCoreClockUpdate+0x56>
   817dc:	2b20      	cmp	r3, #32
   817de:	d004      	beq.n	817ea <SystemCoreClockUpdate+0x5e>
   817e0:	e03a      	b.n	81858 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   817e2:	4a2e      	ldr	r2, [pc, #184]	; (8189c <SystemCoreClockUpdate+0x110>)
   817e4:	4b2a      	ldr	r3, [pc, #168]	; (81890 <SystemCoreClockUpdate+0x104>)
   817e6:	601a      	str	r2, [r3, #0]
				break;
   817e8:	e036      	b.n	81858 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   817ea:	4a2a      	ldr	r2, [pc, #168]	; (81894 <SystemCoreClockUpdate+0x108>)
   817ec:	4b28      	ldr	r3, [pc, #160]	; (81890 <SystemCoreClockUpdate+0x104>)
   817ee:	601a      	str	r2, [r3, #0]
				break;
   817f0:	e032      	b.n	81858 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   817f2:	4b25      	ldr	r3, [pc, #148]	; (81888 <SystemCoreClockUpdate+0xfc>)
   817f4:	6a1b      	ldr	r3, [r3, #32]
   817f6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   817fa:	d003      	beq.n	81804 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   817fc:	4a25      	ldr	r2, [pc, #148]	; (81894 <SystemCoreClockUpdate+0x108>)
   817fe:	4b24      	ldr	r3, [pc, #144]	; (81890 <SystemCoreClockUpdate+0x104>)
   81800:	601a      	str	r2, [r3, #0]
   81802:	e012      	b.n	8182a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81804:	4a24      	ldr	r2, [pc, #144]	; (81898 <SystemCoreClockUpdate+0x10c>)
   81806:	4b22      	ldr	r3, [pc, #136]	; (81890 <SystemCoreClockUpdate+0x104>)
   81808:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8180a:	4b1f      	ldr	r3, [pc, #124]	; (81888 <SystemCoreClockUpdate+0xfc>)
   8180c:	6a1b      	ldr	r3, [r3, #32]
   8180e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81812:	2b10      	cmp	r3, #16
   81814:	d002      	beq.n	8181c <SystemCoreClockUpdate+0x90>
   81816:	2b20      	cmp	r3, #32
   81818:	d004      	beq.n	81824 <SystemCoreClockUpdate+0x98>
   8181a:	e006      	b.n	8182a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8181c:	4a1f      	ldr	r2, [pc, #124]	; (8189c <SystemCoreClockUpdate+0x110>)
   8181e:	4b1c      	ldr	r3, [pc, #112]	; (81890 <SystemCoreClockUpdate+0x104>)
   81820:	601a      	str	r2, [r3, #0]
				break;
   81822:	e002      	b.n	8182a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81824:	4a1b      	ldr	r2, [pc, #108]	; (81894 <SystemCoreClockUpdate+0x108>)
   81826:	4b1a      	ldr	r3, [pc, #104]	; (81890 <SystemCoreClockUpdate+0x104>)
   81828:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8182a:	4b17      	ldr	r3, [pc, #92]	; (81888 <SystemCoreClockUpdate+0xfc>)
   8182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8182e:	f003 0303 	and.w	r3, r3, #3
   81832:	2b02      	cmp	r3, #2
   81834:	d10d      	bne.n	81852 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81836:	4b14      	ldr	r3, [pc, #80]	; (81888 <SystemCoreClockUpdate+0xfc>)
   81838:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8183a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   8183c:	4b14      	ldr	r3, [pc, #80]	; (81890 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8183e:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81842:	681a      	ldr	r2, [r3, #0]
   81844:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81848:	b2c9      	uxtb	r1, r1
   8184a:	fbb2 f2f1 	udiv	r2, r2, r1
   8184e:	601a      	str	r2, [r3, #0]
   81850:	e002      	b.n	81858 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81852:	4a13      	ldr	r2, [pc, #76]	; (818a0 <SystemCoreClockUpdate+0x114>)
   81854:	4b0e      	ldr	r3, [pc, #56]	; (81890 <SystemCoreClockUpdate+0x104>)
   81856:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81858:	4b0b      	ldr	r3, [pc, #44]	; (81888 <SystemCoreClockUpdate+0xfc>)
   8185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8185c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81860:	2b70      	cmp	r3, #112	; 0x70
   81862:	d107      	bne.n	81874 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81864:	4b0a      	ldr	r3, [pc, #40]	; (81890 <SystemCoreClockUpdate+0x104>)
   81866:	681a      	ldr	r2, [r3, #0]
   81868:	490e      	ldr	r1, [pc, #56]	; (818a4 <SystemCoreClockUpdate+0x118>)
   8186a:	fba1 0202 	umull	r0, r2, r1, r2
   8186e:	0852      	lsrs	r2, r2, #1
   81870:	601a      	str	r2, [r3, #0]
   81872:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81874:	4b04      	ldr	r3, [pc, #16]	; (81888 <SystemCoreClockUpdate+0xfc>)
   81876:	6b19      	ldr	r1, [r3, #48]	; 0x30
   81878:	4b05      	ldr	r3, [pc, #20]	; (81890 <SystemCoreClockUpdate+0x104>)
   8187a:	f3c1 1102 	ubfx	r1, r1, #4, #3
   8187e:	681a      	ldr	r2, [r3, #0]
   81880:	40ca      	lsrs	r2, r1
   81882:	601a      	str	r2, [r3, #0]
   81884:	4770      	bx	lr
   81886:	bf00      	nop
   81888:	400e0600 	.word	0x400e0600
   8188c:	400e1a10 	.word	0x400e1a10
   81890:	20070130 	.word	0x20070130
   81894:	00b71b00 	.word	0x00b71b00
   81898:	003d0900 	.word	0x003d0900
   8189c:	007a1200 	.word	0x007a1200
   818a0:	0e4e1c00 	.word	0x0e4e1c00
   818a4:	aaaaaaab 	.word	0xaaaaaaab

000818a8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   818a8:	4b09      	ldr	r3, [pc, #36]	; (818d0 <_sbrk+0x28>)
   818aa:	681b      	ldr	r3, [r3, #0]
   818ac:	b913      	cbnz	r3, 818b4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   818ae:	4a09      	ldr	r2, [pc, #36]	; (818d4 <_sbrk+0x2c>)
   818b0:	4b07      	ldr	r3, [pc, #28]	; (818d0 <_sbrk+0x28>)
   818b2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   818b4:	4b06      	ldr	r3, [pc, #24]	; (818d0 <_sbrk+0x28>)
   818b6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   818b8:	181a      	adds	r2, r3, r0
   818ba:	4907      	ldr	r1, [pc, #28]	; (818d8 <_sbrk+0x30>)
   818bc:	4291      	cmp	r1, r2
   818be:	db04      	blt.n	818ca <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   818c0:	4610      	mov	r0, r2
   818c2:	4a03      	ldr	r2, [pc, #12]	; (818d0 <_sbrk+0x28>)
   818c4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   818c6:	4618      	mov	r0, r3
   818c8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   818ca:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   818ce:	4770      	bx	lr
   818d0:	20070ac8 	.word	0x20070ac8
   818d4:	20072b90 	.word	0x20072b90
   818d8:	20087ffc 	.word	0x20087ffc

000818dc <_close>:
}

extern int _close(int file)
{
	return -1;
}
   818dc:	f04f 30ff 	mov.w	r0, #4294967295
   818e0:	4770      	bx	lr
   818e2:	bf00      	nop

000818e4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   818e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   818e8:	604b      	str	r3, [r1, #4]

	return 0;
}
   818ea:	2000      	movs	r0, #0
   818ec:	4770      	bx	lr
   818ee:	bf00      	nop

000818f0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   818f0:	2001      	movs	r0, #1
   818f2:	4770      	bx	lr

000818f4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   818f4:	2000      	movs	r0, #0
   818f6:	4770      	bx	lr

000818f8 <__libc_init_array>:
   818f8:	b570      	push	{r4, r5, r6, lr}
   818fa:	4e0f      	ldr	r6, [pc, #60]	; (81938 <__libc_init_array+0x40>)
   818fc:	4d0f      	ldr	r5, [pc, #60]	; (8193c <__libc_init_array+0x44>)
   818fe:	1b76      	subs	r6, r6, r5
   81900:	10b6      	asrs	r6, r6, #2
   81902:	d007      	beq.n	81914 <__libc_init_array+0x1c>
   81904:	3d04      	subs	r5, #4
   81906:	2400      	movs	r4, #0
   81908:	3401      	adds	r4, #1
   8190a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8190e:	4798      	blx	r3
   81910:	42a6      	cmp	r6, r4
   81912:	d1f9      	bne.n	81908 <__libc_init_array+0x10>
   81914:	4e0a      	ldr	r6, [pc, #40]	; (81940 <__libc_init_array+0x48>)
   81916:	4d0b      	ldr	r5, [pc, #44]	; (81944 <__libc_init_array+0x4c>)
   81918:	f003 f894 	bl	84a44 <_init>
   8191c:	1b76      	subs	r6, r6, r5
   8191e:	10b6      	asrs	r6, r6, #2
   81920:	d008      	beq.n	81934 <__libc_init_array+0x3c>
   81922:	3d04      	subs	r5, #4
   81924:	2400      	movs	r4, #0
   81926:	3401      	adds	r4, #1
   81928:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8192c:	4798      	blx	r3
   8192e:	42a6      	cmp	r6, r4
   81930:	d1f9      	bne.n	81926 <__libc_init_array+0x2e>
   81932:	bd70      	pop	{r4, r5, r6, pc}
   81934:	bd70      	pop	{r4, r5, r6, pc}
   81936:	bf00      	nop
   81938:	00084a50 	.word	0x00084a50
   8193c:	00084a50 	.word	0x00084a50
   81940:	00084a58 	.word	0x00084a58
   81944:	00084a50 	.word	0x00084a50

00081948 <iprintf>:
   81948:	b40f      	push	{r0, r1, r2, r3}
   8194a:	b510      	push	{r4, lr}
   8194c:	4b07      	ldr	r3, [pc, #28]	; (8196c <iprintf+0x24>)
   8194e:	b082      	sub	sp, #8
   81950:	ac04      	add	r4, sp, #16
   81952:	f854 2b04 	ldr.w	r2, [r4], #4
   81956:	6818      	ldr	r0, [r3, #0]
   81958:	4623      	mov	r3, r4
   8195a:	6881      	ldr	r1, [r0, #8]
   8195c:	9401      	str	r4, [sp, #4]
   8195e:	f000 f923 	bl	81ba8 <_vfiprintf_r>
   81962:	b002      	add	sp, #8
   81964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81968:	b004      	add	sp, #16
   8196a:	4770      	bx	lr
   8196c:	20070560 	.word	0x20070560

00081970 <memset>:
   81970:	b4f0      	push	{r4, r5, r6, r7}
   81972:	0784      	lsls	r4, r0, #30
   81974:	d043      	beq.n	819fe <memset+0x8e>
   81976:	1e54      	subs	r4, r2, #1
   81978:	2a00      	cmp	r2, #0
   8197a:	d03e      	beq.n	819fa <memset+0x8a>
   8197c:	b2cd      	uxtb	r5, r1
   8197e:	4603      	mov	r3, r0
   81980:	e003      	b.n	8198a <memset+0x1a>
   81982:	1e62      	subs	r2, r4, #1
   81984:	2c00      	cmp	r4, #0
   81986:	d038      	beq.n	819fa <memset+0x8a>
   81988:	4614      	mov	r4, r2
   8198a:	f803 5b01 	strb.w	r5, [r3], #1
   8198e:	079a      	lsls	r2, r3, #30
   81990:	d1f7      	bne.n	81982 <memset+0x12>
   81992:	2c03      	cmp	r4, #3
   81994:	d92a      	bls.n	819ec <memset+0x7c>
   81996:	b2cd      	uxtb	r5, r1
   81998:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8199c:	2c0f      	cmp	r4, #15
   8199e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   819a2:	d915      	bls.n	819d0 <memset+0x60>
   819a4:	f1a4 0710 	sub.w	r7, r4, #16
   819a8:	093f      	lsrs	r7, r7, #4
   819aa:	f103 0610 	add.w	r6, r3, #16
   819ae:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   819b2:	461a      	mov	r2, r3
   819b4:	6015      	str	r5, [r2, #0]
   819b6:	6055      	str	r5, [r2, #4]
   819b8:	6095      	str	r5, [r2, #8]
   819ba:	60d5      	str	r5, [r2, #12]
   819bc:	3210      	adds	r2, #16
   819be:	42b2      	cmp	r2, r6
   819c0:	d1f8      	bne.n	819b4 <memset+0x44>
   819c2:	f004 040f 	and.w	r4, r4, #15
   819c6:	3701      	adds	r7, #1
   819c8:	2c03      	cmp	r4, #3
   819ca:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   819ce:	d90d      	bls.n	819ec <memset+0x7c>
   819d0:	461e      	mov	r6, r3
   819d2:	4622      	mov	r2, r4
   819d4:	3a04      	subs	r2, #4
   819d6:	2a03      	cmp	r2, #3
   819d8:	f846 5b04 	str.w	r5, [r6], #4
   819dc:	d8fa      	bhi.n	819d4 <memset+0x64>
   819de:	1f22      	subs	r2, r4, #4
   819e0:	f022 0203 	bic.w	r2, r2, #3
   819e4:	3204      	adds	r2, #4
   819e6:	4413      	add	r3, r2
   819e8:	f004 0403 	and.w	r4, r4, #3
   819ec:	b12c      	cbz	r4, 819fa <memset+0x8a>
   819ee:	b2c9      	uxtb	r1, r1
   819f0:	441c      	add	r4, r3
   819f2:	f803 1b01 	strb.w	r1, [r3], #1
   819f6:	42a3      	cmp	r3, r4
   819f8:	d1fb      	bne.n	819f2 <memset+0x82>
   819fa:	bcf0      	pop	{r4, r5, r6, r7}
   819fc:	4770      	bx	lr
   819fe:	4614      	mov	r4, r2
   81a00:	4603      	mov	r3, r0
   81a02:	e7c6      	b.n	81992 <memset+0x22>

00081a04 <setbuf>:
   81a04:	2900      	cmp	r1, #0
   81a06:	bf0c      	ite	eq
   81a08:	2202      	moveq	r2, #2
   81a0a:	2200      	movne	r2, #0
   81a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81a10:	f000 b80e 	b.w	81a30 <setvbuf>

00081a14 <setjmp>:
   81a14:	46ec      	mov	ip, sp
   81a16:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81a1a:	f04f 0000 	mov.w	r0, #0
   81a1e:	4770      	bx	lr

00081a20 <longjmp>:
   81a20:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81a24:	46e5      	mov	sp, ip
   81a26:	0008      	movs	r0, r1
   81a28:	bf08      	it	eq
   81a2a:	2001      	moveq	r0, #1
   81a2c:	4770      	bx	lr
   81a2e:	bf00      	nop

00081a30 <setvbuf>:
   81a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81a34:	4d3c      	ldr	r5, [pc, #240]	; (81b28 <setvbuf+0xf8>)
   81a36:	4604      	mov	r4, r0
   81a38:	682d      	ldr	r5, [r5, #0]
   81a3a:	4688      	mov	r8, r1
   81a3c:	4616      	mov	r6, r2
   81a3e:	461f      	mov	r7, r3
   81a40:	b115      	cbz	r5, 81a48 <setvbuf+0x18>
   81a42:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81a44:	2b00      	cmp	r3, #0
   81a46:	d04f      	beq.n	81ae8 <setvbuf+0xb8>
   81a48:	2e02      	cmp	r6, #2
   81a4a:	d830      	bhi.n	81aae <setvbuf+0x7e>
   81a4c:	2f00      	cmp	r7, #0
   81a4e:	db2e      	blt.n	81aae <setvbuf+0x7e>
   81a50:	4628      	mov	r0, r5
   81a52:	4621      	mov	r1, r4
   81a54:	f001 f87a 	bl	82b4c <_fflush_r>
   81a58:	89a3      	ldrh	r3, [r4, #12]
   81a5a:	2200      	movs	r2, #0
   81a5c:	6062      	str	r2, [r4, #4]
   81a5e:	61a2      	str	r2, [r4, #24]
   81a60:	061a      	lsls	r2, r3, #24
   81a62:	d428      	bmi.n	81ab6 <setvbuf+0x86>
   81a64:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81a68:	b29b      	uxth	r3, r3
   81a6a:	2e02      	cmp	r6, #2
   81a6c:	81a3      	strh	r3, [r4, #12]
   81a6e:	d02d      	beq.n	81acc <setvbuf+0x9c>
   81a70:	f1b8 0f00 	cmp.w	r8, #0
   81a74:	d03c      	beq.n	81af0 <setvbuf+0xc0>
   81a76:	2e01      	cmp	r6, #1
   81a78:	d013      	beq.n	81aa2 <setvbuf+0x72>
   81a7a:	b29b      	uxth	r3, r3
   81a7c:	f003 0008 	and.w	r0, r3, #8
   81a80:	4a2a      	ldr	r2, [pc, #168]	; (81b2c <setvbuf+0xfc>)
   81a82:	b280      	uxth	r0, r0
   81a84:	63ea      	str	r2, [r5, #60]	; 0x3c
   81a86:	f8c4 8000 	str.w	r8, [r4]
   81a8a:	f8c4 8010 	str.w	r8, [r4, #16]
   81a8e:	6167      	str	r7, [r4, #20]
   81a90:	b178      	cbz	r0, 81ab2 <setvbuf+0x82>
   81a92:	f013 0f03 	tst.w	r3, #3
   81a96:	bf18      	it	ne
   81a98:	2700      	movne	r7, #0
   81a9a:	60a7      	str	r7, [r4, #8]
   81a9c:	2000      	movs	r0, #0
   81a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81aa2:	f043 0301 	orr.w	r3, r3, #1
   81aa6:	427a      	negs	r2, r7
   81aa8:	81a3      	strh	r3, [r4, #12]
   81aaa:	61a2      	str	r2, [r4, #24]
   81aac:	e7e5      	b.n	81a7a <setvbuf+0x4a>
   81aae:	f04f 30ff 	mov.w	r0, #4294967295
   81ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ab6:	4628      	mov	r0, r5
   81ab8:	6921      	ldr	r1, [r4, #16]
   81aba:	f001 f9a7 	bl	82e0c <_free_r>
   81abe:	89a3      	ldrh	r3, [r4, #12]
   81ac0:	2e02      	cmp	r6, #2
   81ac2:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81ac6:	b29b      	uxth	r3, r3
   81ac8:	81a3      	strh	r3, [r4, #12]
   81aca:	d1d1      	bne.n	81a70 <setvbuf+0x40>
   81acc:	2000      	movs	r0, #0
   81ace:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81ad2:	f043 0302 	orr.w	r3, r3, #2
   81ad6:	2500      	movs	r5, #0
   81ad8:	2101      	movs	r1, #1
   81ada:	81a3      	strh	r3, [r4, #12]
   81adc:	60a5      	str	r5, [r4, #8]
   81ade:	6022      	str	r2, [r4, #0]
   81ae0:	6122      	str	r2, [r4, #16]
   81ae2:	6161      	str	r1, [r4, #20]
   81ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ae8:	4628      	mov	r0, r5
   81aea:	f001 f84b 	bl	82b84 <__sinit>
   81aee:	e7ab      	b.n	81a48 <setvbuf+0x18>
   81af0:	2f00      	cmp	r7, #0
   81af2:	bf08      	it	eq
   81af4:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81af8:	4638      	mov	r0, r7
   81afa:	f001 fc7d 	bl	833f8 <malloc>
   81afe:	4680      	mov	r8, r0
   81b00:	b128      	cbz	r0, 81b0e <setvbuf+0xde>
   81b02:	89a3      	ldrh	r3, [r4, #12]
   81b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81b08:	b29b      	uxth	r3, r3
   81b0a:	81a3      	strh	r3, [r4, #12]
   81b0c:	e7b3      	b.n	81a76 <setvbuf+0x46>
   81b0e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81b12:	f001 fc71 	bl	833f8 <malloc>
   81b16:	4680      	mov	r8, r0
   81b18:	b918      	cbnz	r0, 81b22 <setvbuf+0xf2>
   81b1a:	89a3      	ldrh	r3, [r4, #12]
   81b1c:	f04f 30ff 	mov.w	r0, #4294967295
   81b20:	e7d5      	b.n	81ace <setvbuf+0x9e>
   81b22:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81b26:	e7ec      	b.n	81b02 <setvbuf+0xd2>
   81b28:	20070560 	.word	0x20070560
   81b2c:	00082b79 	.word	0x00082b79

00081b30 <__sprint_r.part.0>:
   81b30:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81b32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81b36:	049c      	lsls	r4, r3, #18
   81b38:	460e      	mov	r6, r1
   81b3a:	4680      	mov	r8, r0
   81b3c:	4691      	mov	r9, r2
   81b3e:	d52a      	bpl.n	81b96 <__sprint_r.part.0+0x66>
   81b40:	6893      	ldr	r3, [r2, #8]
   81b42:	6812      	ldr	r2, [r2, #0]
   81b44:	f102 0a08 	add.w	sl, r2, #8
   81b48:	b31b      	cbz	r3, 81b92 <__sprint_r.part.0+0x62>
   81b4a:	e91a 00a0 	ldmdb	sl, {r5, r7}
   81b4e:	08bf      	lsrs	r7, r7, #2
   81b50:	d017      	beq.n	81b82 <__sprint_r.part.0+0x52>
   81b52:	3d04      	subs	r5, #4
   81b54:	2400      	movs	r4, #0
   81b56:	e001      	b.n	81b5c <__sprint_r.part.0+0x2c>
   81b58:	42a7      	cmp	r7, r4
   81b5a:	d010      	beq.n	81b7e <__sprint_r.part.0+0x4e>
   81b5c:	4640      	mov	r0, r8
   81b5e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81b62:	4632      	mov	r2, r6
   81b64:	f001 f8a4 	bl	82cb0 <_fputwc_r>
   81b68:	1c43      	adds	r3, r0, #1
   81b6a:	f104 0401 	add.w	r4, r4, #1
   81b6e:	d1f3      	bne.n	81b58 <__sprint_r.part.0+0x28>
   81b70:	2300      	movs	r3, #0
   81b72:	f8c9 3008 	str.w	r3, [r9, #8]
   81b76:	f8c9 3004 	str.w	r3, [r9, #4]
   81b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81b7e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   81b82:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   81b86:	f8c9 3008 	str.w	r3, [r9, #8]
   81b8a:	f10a 0a08 	add.w	sl, sl, #8
   81b8e:	2b00      	cmp	r3, #0
   81b90:	d1db      	bne.n	81b4a <__sprint_r.part.0+0x1a>
   81b92:	2000      	movs	r0, #0
   81b94:	e7ec      	b.n	81b70 <__sprint_r.part.0+0x40>
   81b96:	f001 fa05 	bl	82fa4 <__sfvwrite_r>
   81b9a:	2300      	movs	r3, #0
   81b9c:	f8c9 3008 	str.w	r3, [r9, #8]
   81ba0:	f8c9 3004 	str.w	r3, [r9, #4]
   81ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081ba8 <_vfiprintf_r>:
   81ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81bac:	b0b1      	sub	sp, #196	; 0xc4
   81bae:	461c      	mov	r4, r3
   81bb0:	9102      	str	r1, [sp, #8]
   81bb2:	4690      	mov	r8, r2
   81bb4:	9308      	str	r3, [sp, #32]
   81bb6:	9006      	str	r0, [sp, #24]
   81bb8:	b118      	cbz	r0, 81bc2 <_vfiprintf_r+0x1a>
   81bba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81bbc:	2b00      	cmp	r3, #0
   81bbe:	f000 80e8 	beq.w	81d92 <_vfiprintf_r+0x1ea>
   81bc2:	9d02      	ldr	r5, [sp, #8]
   81bc4:	89ab      	ldrh	r3, [r5, #12]
   81bc6:	b29a      	uxth	r2, r3
   81bc8:	0490      	lsls	r0, r2, #18
   81bca:	d407      	bmi.n	81bdc <_vfiprintf_r+0x34>
   81bcc:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   81bce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81bd2:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   81bd6:	81ab      	strh	r3, [r5, #12]
   81bd8:	b29a      	uxth	r2, r3
   81bda:	6669      	str	r1, [r5, #100]	; 0x64
   81bdc:	0711      	lsls	r1, r2, #28
   81bde:	f140 80b7 	bpl.w	81d50 <_vfiprintf_r+0x1a8>
   81be2:	f8dd b008 	ldr.w	fp, [sp, #8]
   81be6:	f8db 3010 	ldr.w	r3, [fp, #16]
   81bea:	2b00      	cmp	r3, #0
   81bec:	f000 80b0 	beq.w	81d50 <_vfiprintf_r+0x1a8>
   81bf0:	f002 021a 	and.w	r2, r2, #26
   81bf4:	2a0a      	cmp	r2, #10
   81bf6:	f000 80b7 	beq.w	81d68 <_vfiprintf_r+0x1c0>
   81bfa:	2300      	movs	r3, #0
   81bfc:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81c00:	930a      	str	r3, [sp, #40]	; 0x28
   81c02:	9315      	str	r3, [sp, #84]	; 0x54
   81c04:	9314      	str	r3, [sp, #80]	; 0x50
   81c06:	9309      	str	r3, [sp, #36]	; 0x24
   81c08:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81c0c:	464e      	mov	r6, r9
   81c0e:	f898 3000 	ldrb.w	r3, [r8]
   81c12:	2b00      	cmp	r3, #0
   81c14:	f000 84c8 	beq.w	825a8 <_vfiprintf_r+0xa00>
   81c18:	2b25      	cmp	r3, #37	; 0x25
   81c1a:	f000 84c5 	beq.w	825a8 <_vfiprintf_r+0xa00>
   81c1e:	f108 0201 	add.w	r2, r8, #1
   81c22:	e001      	b.n	81c28 <_vfiprintf_r+0x80>
   81c24:	2b25      	cmp	r3, #37	; 0x25
   81c26:	d004      	beq.n	81c32 <_vfiprintf_r+0x8a>
   81c28:	7813      	ldrb	r3, [r2, #0]
   81c2a:	4614      	mov	r4, r2
   81c2c:	3201      	adds	r2, #1
   81c2e:	2b00      	cmp	r3, #0
   81c30:	d1f8      	bne.n	81c24 <_vfiprintf_r+0x7c>
   81c32:	ebc8 0504 	rsb	r5, r8, r4
   81c36:	b195      	cbz	r5, 81c5e <_vfiprintf_r+0xb6>
   81c38:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81c3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c3c:	3301      	adds	r3, #1
   81c3e:	442a      	add	r2, r5
   81c40:	2b07      	cmp	r3, #7
   81c42:	f8c6 8000 	str.w	r8, [r6]
   81c46:	6075      	str	r5, [r6, #4]
   81c48:	9215      	str	r2, [sp, #84]	; 0x54
   81c4a:	9314      	str	r3, [sp, #80]	; 0x50
   81c4c:	dd7b      	ble.n	81d46 <_vfiprintf_r+0x19e>
   81c4e:	2a00      	cmp	r2, #0
   81c50:	f040 84d5 	bne.w	825fe <_vfiprintf_r+0xa56>
   81c54:	9809      	ldr	r0, [sp, #36]	; 0x24
   81c56:	9214      	str	r2, [sp, #80]	; 0x50
   81c58:	4428      	add	r0, r5
   81c5a:	464e      	mov	r6, r9
   81c5c:	9009      	str	r0, [sp, #36]	; 0x24
   81c5e:	7823      	ldrb	r3, [r4, #0]
   81c60:	2b00      	cmp	r3, #0
   81c62:	f000 83ed 	beq.w	82440 <_vfiprintf_r+0x898>
   81c66:	2100      	movs	r1, #0
   81c68:	f04f 0200 	mov.w	r2, #0
   81c6c:	f04f 3cff 	mov.w	ip, #4294967295
   81c70:	7863      	ldrb	r3, [r4, #1]
   81c72:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   81c76:	9104      	str	r1, [sp, #16]
   81c78:	468a      	mov	sl, r1
   81c7a:	f104 0801 	add.w	r8, r4, #1
   81c7e:	4608      	mov	r0, r1
   81c80:	4665      	mov	r5, ip
   81c82:	f108 0801 	add.w	r8, r8, #1
   81c86:	f1a3 0220 	sub.w	r2, r3, #32
   81c8a:	2a58      	cmp	r2, #88	; 0x58
   81c8c:	f200 82d9 	bhi.w	82242 <_vfiprintf_r+0x69a>
   81c90:	e8df f012 	tbh	[pc, r2, lsl #1]
   81c94:	02d702cb 	.word	0x02d702cb
   81c98:	02d202d7 	.word	0x02d202d7
   81c9c:	02d702d7 	.word	0x02d702d7
   81ca0:	02d702d7 	.word	0x02d702d7
   81ca4:	02d702d7 	.word	0x02d702d7
   81ca8:	028f0282 	.word	0x028f0282
   81cac:	008402d7 	.word	0x008402d7
   81cb0:	02d70293 	.word	0x02d70293
   81cb4:	0196012b 	.word	0x0196012b
   81cb8:	01960196 	.word	0x01960196
   81cbc:	01960196 	.word	0x01960196
   81cc0:	01960196 	.word	0x01960196
   81cc4:	01960196 	.word	0x01960196
   81cc8:	02d702d7 	.word	0x02d702d7
   81ccc:	02d702d7 	.word	0x02d702d7
   81cd0:	02d702d7 	.word	0x02d702d7
   81cd4:	02d702d7 	.word	0x02d702d7
   81cd8:	02d702d7 	.word	0x02d702d7
   81cdc:	02d70130 	.word	0x02d70130
   81ce0:	02d702d7 	.word	0x02d702d7
   81ce4:	02d702d7 	.word	0x02d702d7
   81ce8:	02d702d7 	.word	0x02d702d7
   81cec:	02d702d7 	.word	0x02d702d7
   81cf0:	017b02d7 	.word	0x017b02d7
   81cf4:	02d702d7 	.word	0x02d702d7
   81cf8:	02d702d7 	.word	0x02d702d7
   81cfc:	01a402d7 	.word	0x01a402d7
   81d00:	02d702d7 	.word	0x02d702d7
   81d04:	02d701bf 	.word	0x02d701bf
   81d08:	02d702d7 	.word	0x02d702d7
   81d0c:	02d702d7 	.word	0x02d702d7
   81d10:	02d702d7 	.word	0x02d702d7
   81d14:	02d702d7 	.word	0x02d702d7
   81d18:	01e402d7 	.word	0x01e402d7
   81d1c:	02d701fa 	.word	0x02d701fa
   81d20:	02d702d7 	.word	0x02d702d7
   81d24:	01fa0216 	.word	0x01fa0216
   81d28:	02d702d7 	.word	0x02d702d7
   81d2c:	02d7021b 	.word	0x02d7021b
   81d30:	00890228 	.word	0x00890228
   81d34:	027d0266 	.word	0x027d0266
   81d38:	023a02d7 	.word	0x023a02d7
   81d3c:	011902d7 	.word	0x011902d7
   81d40:	02d702d7 	.word	0x02d702d7
   81d44:	02af      	.short	0x02af
   81d46:	3608      	adds	r6, #8
   81d48:	9809      	ldr	r0, [sp, #36]	; 0x24
   81d4a:	4428      	add	r0, r5
   81d4c:	9009      	str	r0, [sp, #36]	; 0x24
   81d4e:	e786      	b.n	81c5e <_vfiprintf_r+0xb6>
   81d50:	9806      	ldr	r0, [sp, #24]
   81d52:	9902      	ldr	r1, [sp, #8]
   81d54:	f000 fde4 	bl	82920 <__swsetup_r>
   81d58:	b9b0      	cbnz	r0, 81d88 <_vfiprintf_r+0x1e0>
   81d5a:	9d02      	ldr	r5, [sp, #8]
   81d5c:	89aa      	ldrh	r2, [r5, #12]
   81d5e:	f002 021a 	and.w	r2, r2, #26
   81d62:	2a0a      	cmp	r2, #10
   81d64:	f47f af49 	bne.w	81bfa <_vfiprintf_r+0x52>
   81d68:	f8dd b008 	ldr.w	fp, [sp, #8]
   81d6c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81d70:	2b00      	cmp	r3, #0
   81d72:	f6ff af42 	blt.w	81bfa <_vfiprintf_r+0x52>
   81d76:	9806      	ldr	r0, [sp, #24]
   81d78:	4659      	mov	r1, fp
   81d7a:	4642      	mov	r2, r8
   81d7c:	4623      	mov	r3, r4
   81d7e:	f000 fd3d 	bl	827fc <__sbprintf>
   81d82:	b031      	add	sp, #196	; 0xc4
   81d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d88:	f04f 30ff 	mov.w	r0, #4294967295
   81d8c:	b031      	add	sp, #196	; 0xc4
   81d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d92:	f000 fef7 	bl	82b84 <__sinit>
   81d96:	e714      	b.n	81bc2 <_vfiprintf_r+0x1a>
   81d98:	4240      	negs	r0, r0
   81d9a:	9308      	str	r3, [sp, #32]
   81d9c:	f04a 0a04 	orr.w	sl, sl, #4
   81da0:	f898 3000 	ldrb.w	r3, [r8]
   81da4:	e76d      	b.n	81c82 <_vfiprintf_r+0xda>
   81da6:	f01a 0320 	ands.w	r3, sl, #32
   81daa:	9004      	str	r0, [sp, #16]
   81dac:	46ac      	mov	ip, r5
   81dae:	f000 80f4 	beq.w	81f9a <_vfiprintf_r+0x3f2>
   81db2:	f8dd b020 	ldr.w	fp, [sp, #32]
   81db6:	f10b 0307 	add.w	r3, fp, #7
   81dba:	f023 0307 	bic.w	r3, r3, #7
   81dbe:	f103 0408 	add.w	r4, r3, #8
   81dc2:	9408      	str	r4, [sp, #32]
   81dc4:	e9d3 4500 	ldrd	r4, r5, [r3]
   81dc8:	2300      	movs	r3, #0
   81dca:	f04f 0000 	mov.w	r0, #0
   81dce:	2100      	movs	r1, #0
   81dd0:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   81dd4:	f8cd c014 	str.w	ip, [sp, #20]
   81dd8:	9107      	str	r1, [sp, #28]
   81dda:	f1bc 0f00 	cmp.w	ip, #0
   81dde:	bfa8      	it	ge
   81de0:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81de4:	ea54 0205 	orrs.w	r2, r4, r5
   81de8:	f040 80ad 	bne.w	81f46 <_vfiprintf_r+0x39e>
   81dec:	f1bc 0f00 	cmp.w	ip, #0
   81df0:	f040 80a9 	bne.w	81f46 <_vfiprintf_r+0x39e>
   81df4:	2b00      	cmp	r3, #0
   81df6:	f040 83c0 	bne.w	8257a <_vfiprintf_r+0x9d2>
   81dfa:	f01a 0f01 	tst.w	sl, #1
   81dfe:	f000 83bc 	beq.w	8257a <_vfiprintf_r+0x9d2>
   81e02:	2330      	movs	r3, #48	; 0x30
   81e04:	af30      	add	r7, sp, #192	; 0xc0
   81e06:	f807 3d41 	strb.w	r3, [r7, #-65]!
   81e0a:	ebc7 0409 	rsb	r4, r7, r9
   81e0e:	9405      	str	r4, [sp, #20]
   81e10:	f8dd b014 	ldr.w	fp, [sp, #20]
   81e14:	9c07      	ldr	r4, [sp, #28]
   81e16:	45e3      	cmp	fp, ip
   81e18:	bfb8      	it	lt
   81e1a:	46e3      	movlt	fp, ip
   81e1c:	f8cd b00c 	str.w	fp, [sp, #12]
   81e20:	b11c      	cbz	r4, 81e2a <_vfiprintf_r+0x282>
   81e22:	f10b 0b01 	add.w	fp, fp, #1
   81e26:	f8cd b00c 	str.w	fp, [sp, #12]
   81e2a:	f01a 0502 	ands.w	r5, sl, #2
   81e2e:	9507      	str	r5, [sp, #28]
   81e30:	d005      	beq.n	81e3e <_vfiprintf_r+0x296>
   81e32:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81e36:	f10b 0b02 	add.w	fp, fp, #2
   81e3a:	f8cd b00c 	str.w	fp, [sp, #12]
   81e3e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   81e42:	930b      	str	r3, [sp, #44]	; 0x2c
   81e44:	f040 821b 	bne.w	8227e <_vfiprintf_r+0x6d6>
   81e48:	9d04      	ldr	r5, [sp, #16]
   81e4a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81e4e:	ebcb 0405 	rsb	r4, fp, r5
   81e52:	2c00      	cmp	r4, #0
   81e54:	f340 8213 	ble.w	8227e <_vfiprintf_r+0x6d6>
   81e58:	2c10      	cmp	r4, #16
   81e5a:	f340 8489 	ble.w	82770 <_vfiprintf_r+0xbc8>
   81e5e:	4dbe      	ldr	r5, [pc, #760]	; (82158 <_vfiprintf_r+0x5b0>)
   81e60:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e62:	462b      	mov	r3, r5
   81e64:	9814      	ldr	r0, [sp, #80]	; 0x50
   81e66:	4625      	mov	r5, r4
   81e68:	f04f 0b10 	mov.w	fp, #16
   81e6c:	4664      	mov	r4, ip
   81e6e:	46b4      	mov	ip, r6
   81e70:	461e      	mov	r6, r3
   81e72:	e006      	b.n	81e82 <_vfiprintf_r+0x2da>
   81e74:	1c83      	adds	r3, r0, #2
   81e76:	f10c 0c08 	add.w	ip, ip, #8
   81e7a:	4608      	mov	r0, r1
   81e7c:	3d10      	subs	r5, #16
   81e7e:	2d10      	cmp	r5, #16
   81e80:	dd11      	ble.n	81ea6 <_vfiprintf_r+0x2fe>
   81e82:	1c41      	adds	r1, r0, #1
   81e84:	3210      	adds	r2, #16
   81e86:	2907      	cmp	r1, #7
   81e88:	9215      	str	r2, [sp, #84]	; 0x54
   81e8a:	e88c 0840 	stmia.w	ip, {r6, fp}
   81e8e:	9114      	str	r1, [sp, #80]	; 0x50
   81e90:	ddf0      	ble.n	81e74 <_vfiprintf_r+0x2cc>
   81e92:	2a00      	cmp	r2, #0
   81e94:	f040 81e6 	bne.w	82264 <_vfiprintf_r+0x6bc>
   81e98:	3d10      	subs	r5, #16
   81e9a:	2d10      	cmp	r5, #16
   81e9c:	f04f 0301 	mov.w	r3, #1
   81ea0:	4610      	mov	r0, r2
   81ea2:	46cc      	mov	ip, r9
   81ea4:	dced      	bgt.n	81e82 <_vfiprintf_r+0x2da>
   81ea6:	4631      	mov	r1, r6
   81ea8:	4666      	mov	r6, ip
   81eaa:	46a4      	mov	ip, r4
   81eac:	462c      	mov	r4, r5
   81eae:	460d      	mov	r5, r1
   81eb0:	4422      	add	r2, r4
   81eb2:	2b07      	cmp	r3, #7
   81eb4:	9215      	str	r2, [sp, #84]	; 0x54
   81eb6:	6035      	str	r5, [r6, #0]
   81eb8:	6074      	str	r4, [r6, #4]
   81eba:	9314      	str	r3, [sp, #80]	; 0x50
   81ebc:	f300 836d 	bgt.w	8259a <_vfiprintf_r+0x9f2>
   81ec0:	3608      	adds	r6, #8
   81ec2:	1c59      	adds	r1, r3, #1
   81ec4:	e1de      	b.n	82284 <_vfiprintf_r+0x6dc>
   81ec6:	f01a 0f20 	tst.w	sl, #32
   81eca:	9004      	str	r0, [sp, #16]
   81ecc:	46ac      	mov	ip, r5
   81ece:	f000 808d 	beq.w	81fec <_vfiprintf_r+0x444>
   81ed2:	9d08      	ldr	r5, [sp, #32]
   81ed4:	1deb      	adds	r3, r5, #7
   81ed6:	f023 0307 	bic.w	r3, r3, #7
   81eda:	f103 0b08 	add.w	fp, r3, #8
   81ede:	e9d3 4500 	ldrd	r4, r5, [r3]
   81ee2:	f8cd b020 	str.w	fp, [sp, #32]
   81ee6:	2301      	movs	r3, #1
   81ee8:	e76f      	b.n	81dca <_vfiprintf_r+0x222>
   81eea:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   81eee:	f898 3000 	ldrb.w	r3, [r8]
   81ef2:	e6c6      	b.n	81c82 <_vfiprintf_r+0xda>
   81ef4:	f04a 0a10 	orr.w	sl, sl, #16
   81ef8:	f01a 0f20 	tst.w	sl, #32
   81efc:	9004      	str	r0, [sp, #16]
   81efe:	46ac      	mov	ip, r5
   81f00:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81f04:	f000 80c8 	beq.w	82098 <_vfiprintf_r+0x4f0>
   81f08:	9c08      	ldr	r4, [sp, #32]
   81f0a:	1de1      	adds	r1, r4, #7
   81f0c:	f021 0107 	bic.w	r1, r1, #7
   81f10:	e9d1 2300 	ldrd	r2, r3, [r1]
   81f14:	3108      	adds	r1, #8
   81f16:	9108      	str	r1, [sp, #32]
   81f18:	4614      	mov	r4, r2
   81f1a:	461d      	mov	r5, r3
   81f1c:	2a00      	cmp	r2, #0
   81f1e:	f173 0b00 	sbcs.w	fp, r3, #0
   81f22:	f2c0 83ce 	blt.w	826c2 <_vfiprintf_r+0xb1a>
   81f26:	f1bc 0f00 	cmp.w	ip, #0
   81f2a:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81f2e:	bfa8      	it	ge
   81f30:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81f34:	ea54 0205 	orrs.w	r2, r4, r5
   81f38:	9007      	str	r0, [sp, #28]
   81f3a:	f8cd c014 	str.w	ip, [sp, #20]
   81f3e:	f04f 0301 	mov.w	r3, #1
   81f42:	f43f af53 	beq.w	81dec <_vfiprintf_r+0x244>
   81f46:	2b01      	cmp	r3, #1
   81f48:	f000 8319 	beq.w	8257e <_vfiprintf_r+0x9d6>
   81f4c:	2b02      	cmp	r3, #2
   81f4e:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   81f52:	f040 824c 	bne.w	823ee <_vfiprintf_r+0x846>
   81f56:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   81f5a:	4619      	mov	r1, r3
   81f5c:	f004 000f 	and.w	r0, r4, #15
   81f60:	0922      	lsrs	r2, r4, #4
   81f62:	f81b 0000 	ldrb.w	r0, [fp, r0]
   81f66:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   81f6a:	092b      	lsrs	r3, r5, #4
   81f6c:	7008      	strb	r0, [r1, #0]
   81f6e:	ea52 0003 	orrs.w	r0, r2, r3
   81f72:	460f      	mov	r7, r1
   81f74:	4614      	mov	r4, r2
   81f76:	461d      	mov	r5, r3
   81f78:	f101 31ff 	add.w	r1, r1, #4294967295
   81f7c:	d1ee      	bne.n	81f5c <_vfiprintf_r+0x3b4>
   81f7e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   81f82:	ebc7 0309 	rsb	r3, r7, r9
   81f86:	9305      	str	r3, [sp, #20]
   81f88:	e742      	b.n	81e10 <_vfiprintf_r+0x268>
   81f8a:	f04a 0a10 	orr.w	sl, sl, #16
   81f8e:	f01a 0320 	ands.w	r3, sl, #32
   81f92:	9004      	str	r0, [sp, #16]
   81f94:	46ac      	mov	ip, r5
   81f96:	f47f af0c 	bne.w	81db2 <_vfiprintf_r+0x20a>
   81f9a:	f01a 0210 	ands.w	r2, sl, #16
   81f9e:	f040 8311 	bne.w	825c4 <_vfiprintf_r+0xa1c>
   81fa2:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   81fa6:	f000 830d 	beq.w	825c4 <_vfiprintf_r+0xa1c>
   81faa:	f8dd b020 	ldr.w	fp, [sp, #32]
   81fae:	4613      	mov	r3, r2
   81fb0:	f8bb 4000 	ldrh.w	r4, [fp]
   81fb4:	f10b 0b04 	add.w	fp, fp, #4
   81fb8:	2500      	movs	r5, #0
   81fba:	f8cd b020 	str.w	fp, [sp, #32]
   81fbe:	e704      	b.n	81dca <_vfiprintf_r+0x222>
   81fc0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81fc4:	2000      	movs	r0, #0
   81fc6:	f818 3b01 	ldrb.w	r3, [r8], #1
   81fca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81fce:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   81fd2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81fd6:	2a09      	cmp	r2, #9
   81fd8:	d9f5      	bls.n	81fc6 <_vfiprintf_r+0x41e>
   81fda:	e654      	b.n	81c86 <_vfiprintf_r+0xde>
   81fdc:	f04a 0a10 	orr.w	sl, sl, #16
   81fe0:	f01a 0f20 	tst.w	sl, #32
   81fe4:	9004      	str	r0, [sp, #16]
   81fe6:	46ac      	mov	ip, r5
   81fe8:	f47f af73 	bne.w	81ed2 <_vfiprintf_r+0x32a>
   81fec:	f01a 0f10 	tst.w	sl, #16
   81ff0:	f040 82ef 	bne.w	825d2 <_vfiprintf_r+0xa2a>
   81ff4:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81ff8:	f000 82eb 	beq.w	825d2 <_vfiprintf_r+0xa2a>
   81ffc:	f8dd b020 	ldr.w	fp, [sp, #32]
   82000:	2500      	movs	r5, #0
   82002:	f8bb 4000 	ldrh.w	r4, [fp]
   82006:	f10b 0b04 	add.w	fp, fp, #4
   8200a:	2301      	movs	r3, #1
   8200c:	f8cd b020 	str.w	fp, [sp, #32]
   82010:	e6db      	b.n	81dca <_vfiprintf_r+0x222>
   82012:	46ac      	mov	ip, r5
   82014:	4d51      	ldr	r5, [pc, #324]	; (8215c <_vfiprintf_r+0x5b4>)
   82016:	f01a 0f20 	tst.w	sl, #32
   8201a:	9004      	str	r0, [sp, #16]
   8201c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82020:	950a      	str	r5, [sp, #40]	; 0x28
   82022:	f000 80f0 	beq.w	82206 <_vfiprintf_r+0x65e>
   82026:	9d08      	ldr	r5, [sp, #32]
   82028:	1dea      	adds	r2, r5, #7
   8202a:	f022 0207 	bic.w	r2, r2, #7
   8202e:	f102 0b08 	add.w	fp, r2, #8
   82032:	f8cd b020 	str.w	fp, [sp, #32]
   82036:	e9d2 4500 	ldrd	r4, r5, [r2]
   8203a:	f01a 0f01 	tst.w	sl, #1
   8203e:	f000 82aa 	beq.w	82596 <_vfiprintf_r+0x9ee>
   82042:	ea54 0b05 	orrs.w	fp, r4, r5
   82046:	f000 82a6 	beq.w	82596 <_vfiprintf_r+0x9ee>
   8204a:	2230      	movs	r2, #48	; 0x30
   8204c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   82050:	f04a 0a02 	orr.w	sl, sl, #2
   82054:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82058:	2302      	movs	r3, #2
   8205a:	e6b6      	b.n	81dca <_vfiprintf_r+0x222>
   8205c:	9b08      	ldr	r3, [sp, #32]
   8205e:	f8dd b020 	ldr.w	fp, [sp, #32]
   82062:	681b      	ldr	r3, [r3, #0]
   82064:	2401      	movs	r4, #1
   82066:	f04f 0500 	mov.w	r5, #0
   8206a:	f10b 0b04 	add.w	fp, fp, #4
   8206e:	9004      	str	r0, [sp, #16]
   82070:	9403      	str	r4, [sp, #12]
   82072:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   82076:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8207a:	f8cd b020 	str.w	fp, [sp, #32]
   8207e:	9405      	str	r4, [sp, #20]
   82080:	af16      	add	r7, sp, #88	; 0x58
   82082:	f04f 0c00 	mov.w	ip, #0
   82086:	e6d0      	b.n	81e2a <_vfiprintf_r+0x282>
   82088:	f01a 0f20 	tst.w	sl, #32
   8208c:	9004      	str	r0, [sp, #16]
   8208e:	46ac      	mov	ip, r5
   82090:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82094:	f47f af38 	bne.w	81f08 <_vfiprintf_r+0x360>
   82098:	f01a 0f10 	tst.w	sl, #16
   8209c:	f040 82a7 	bne.w	825ee <_vfiprintf_r+0xa46>
   820a0:	f01a 0f40 	tst.w	sl, #64	; 0x40
   820a4:	f000 82a3 	beq.w	825ee <_vfiprintf_r+0xa46>
   820a8:	f8dd b020 	ldr.w	fp, [sp, #32]
   820ac:	f9bb 4000 	ldrsh.w	r4, [fp]
   820b0:	f10b 0b04 	add.w	fp, fp, #4
   820b4:	17e5      	asrs	r5, r4, #31
   820b6:	4622      	mov	r2, r4
   820b8:	462b      	mov	r3, r5
   820ba:	f8cd b020 	str.w	fp, [sp, #32]
   820be:	e72d      	b.n	81f1c <_vfiprintf_r+0x374>
   820c0:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   820c4:	f898 3000 	ldrb.w	r3, [r8]
   820c8:	e5db      	b.n	81c82 <_vfiprintf_r+0xda>
   820ca:	f898 3000 	ldrb.w	r3, [r8]
   820ce:	4642      	mov	r2, r8
   820d0:	2b6c      	cmp	r3, #108	; 0x6c
   820d2:	bf03      	ittte	eq
   820d4:	f108 0801 	addeq.w	r8, r8, #1
   820d8:	f04a 0a20 	orreq.w	sl, sl, #32
   820dc:	7853      	ldrbeq	r3, [r2, #1]
   820de:	f04a 0a10 	orrne.w	sl, sl, #16
   820e2:	e5ce      	b.n	81c82 <_vfiprintf_r+0xda>
   820e4:	f01a 0f20 	tst.w	sl, #32
   820e8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   820ec:	f000 82f7 	beq.w	826de <_vfiprintf_r+0xb36>
   820f0:	9c08      	ldr	r4, [sp, #32]
   820f2:	6821      	ldr	r1, [r4, #0]
   820f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   820f6:	17e5      	asrs	r5, r4, #31
   820f8:	462b      	mov	r3, r5
   820fa:	9d08      	ldr	r5, [sp, #32]
   820fc:	4622      	mov	r2, r4
   820fe:	3504      	adds	r5, #4
   82100:	9508      	str	r5, [sp, #32]
   82102:	e9c1 2300 	strd	r2, r3, [r1]
   82106:	e582      	b.n	81c0e <_vfiprintf_r+0x66>
   82108:	9c08      	ldr	r4, [sp, #32]
   8210a:	46ac      	mov	ip, r5
   8210c:	6827      	ldr	r7, [r4, #0]
   8210e:	f04f 0500 	mov.w	r5, #0
   82112:	9004      	str	r0, [sp, #16]
   82114:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   82118:	3404      	adds	r4, #4
   8211a:	2f00      	cmp	r7, #0
   8211c:	f000 8332 	beq.w	82784 <_vfiprintf_r+0xbdc>
   82120:	f1bc 0f00 	cmp.w	ip, #0
   82124:	4638      	mov	r0, r7
   82126:	f2c0 8307 	blt.w	82738 <_vfiprintf_r+0xb90>
   8212a:	4662      	mov	r2, ip
   8212c:	2100      	movs	r1, #0
   8212e:	f8cd c004 	str.w	ip, [sp, #4]
   82132:	f001 fc05 	bl	83940 <memchr>
   82136:	f8dd c004 	ldr.w	ip, [sp, #4]
   8213a:	2800      	cmp	r0, #0
   8213c:	f000 833a 	beq.w	827b4 <_vfiprintf_r+0xc0c>
   82140:	1bc0      	subs	r0, r0, r7
   82142:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   82146:	4560      	cmp	r0, ip
   82148:	bfa8      	it	ge
   8214a:	4660      	movge	r0, ip
   8214c:	9005      	str	r0, [sp, #20]
   8214e:	9408      	str	r4, [sp, #32]
   82150:	9507      	str	r5, [sp, #28]
   82152:	f04f 0c00 	mov.w	ip, #0
   82156:	e65b      	b.n	81e10 <_vfiprintf_r+0x268>
   82158:	00084a34 	.word	0x00084a34
   8215c:	000849f4 	.word	0x000849f4
   82160:	9b08      	ldr	r3, [sp, #32]
   82162:	f8dd b020 	ldr.w	fp, [sp, #32]
   82166:	9004      	str	r0, [sp, #16]
   82168:	48b2      	ldr	r0, [pc, #712]	; (82434 <_vfiprintf_r+0x88c>)
   8216a:	681c      	ldr	r4, [r3, #0]
   8216c:	2230      	movs	r2, #48	; 0x30
   8216e:	2378      	movs	r3, #120	; 0x78
   82170:	f10b 0b04 	add.w	fp, fp, #4
   82174:	46ac      	mov	ip, r5
   82176:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8217a:	f04a 0a02 	orr.w	sl, sl, #2
   8217e:	f8cd b020 	str.w	fp, [sp, #32]
   82182:	2500      	movs	r5, #0
   82184:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82188:	900a      	str	r0, [sp, #40]	; 0x28
   8218a:	2302      	movs	r3, #2
   8218c:	e61d      	b.n	81dca <_vfiprintf_r+0x222>
   8218e:	f04a 0a20 	orr.w	sl, sl, #32
   82192:	f898 3000 	ldrb.w	r3, [r8]
   82196:	e574      	b.n	81c82 <_vfiprintf_r+0xda>
   82198:	f8dd b020 	ldr.w	fp, [sp, #32]
   8219c:	f8db 0000 	ldr.w	r0, [fp]
   821a0:	f10b 0304 	add.w	r3, fp, #4
   821a4:	2800      	cmp	r0, #0
   821a6:	f6ff adf7 	blt.w	81d98 <_vfiprintf_r+0x1f0>
   821aa:	9308      	str	r3, [sp, #32]
   821ac:	f898 3000 	ldrb.w	r3, [r8]
   821b0:	e567      	b.n	81c82 <_vfiprintf_r+0xda>
   821b2:	f898 3000 	ldrb.w	r3, [r8]
   821b6:	212b      	movs	r1, #43	; 0x2b
   821b8:	e563      	b.n	81c82 <_vfiprintf_r+0xda>
   821ba:	f898 3000 	ldrb.w	r3, [r8]
   821be:	f108 0401 	add.w	r4, r8, #1
   821c2:	2b2a      	cmp	r3, #42	; 0x2a
   821c4:	f000 8305 	beq.w	827d2 <_vfiprintf_r+0xc2a>
   821c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   821cc:	2a09      	cmp	r2, #9
   821ce:	bf98      	it	ls
   821d0:	2500      	movls	r5, #0
   821d2:	f200 82fa 	bhi.w	827ca <_vfiprintf_r+0xc22>
   821d6:	f814 3b01 	ldrb.w	r3, [r4], #1
   821da:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   821de:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   821e2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   821e6:	2a09      	cmp	r2, #9
   821e8:	d9f5      	bls.n	821d6 <_vfiprintf_r+0x62e>
   821ea:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   821ee:	46a0      	mov	r8, r4
   821f0:	e549      	b.n	81c86 <_vfiprintf_r+0xde>
   821f2:	4c90      	ldr	r4, [pc, #576]	; (82434 <_vfiprintf_r+0x88c>)
   821f4:	f01a 0f20 	tst.w	sl, #32
   821f8:	9004      	str	r0, [sp, #16]
   821fa:	46ac      	mov	ip, r5
   821fc:	940a      	str	r4, [sp, #40]	; 0x28
   821fe:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82202:	f47f af10 	bne.w	82026 <_vfiprintf_r+0x47e>
   82206:	f01a 0f10 	tst.w	sl, #16
   8220a:	f040 81ea 	bne.w	825e2 <_vfiprintf_r+0xa3a>
   8220e:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82212:	f000 81e6 	beq.w	825e2 <_vfiprintf_r+0xa3a>
   82216:	f8dd b020 	ldr.w	fp, [sp, #32]
   8221a:	2500      	movs	r5, #0
   8221c:	f8bb 4000 	ldrh.w	r4, [fp]
   82220:	f10b 0b04 	add.w	fp, fp, #4
   82224:	f8cd b020 	str.w	fp, [sp, #32]
   82228:	e707      	b.n	8203a <_vfiprintf_r+0x492>
   8222a:	f898 3000 	ldrb.w	r3, [r8]
   8222e:	2900      	cmp	r1, #0
   82230:	f47f ad27 	bne.w	81c82 <_vfiprintf_r+0xda>
   82234:	2120      	movs	r1, #32
   82236:	e524      	b.n	81c82 <_vfiprintf_r+0xda>
   82238:	f04a 0a01 	orr.w	sl, sl, #1
   8223c:	f898 3000 	ldrb.w	r3, [r8]
   82240:	e51f      	b.n	81c82 <_vfiprintf_r+0xda>
   82242:	9004      	str	r0, [sp, #16]
   82244:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82248:	2b00      	cmp	r3, #0
   8224a:	f000 80f9 	beq.w	82440 <_vfiprintf_r+0x898>
   8224e:	2501      	movs	r5, #1
   82250:	f04f 0b00 	mov.w	fp, #0
   82254:	9503      	str	r5, [sp, #12]
   82256:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8225a:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   8225e:	9505      	str	r5, [sp, #20]
   82260:	af16      	add	r7, sp, #88	; 0x58
   82262:	e70e      	b.n	82082 <_vfiprintf_r+0x4da>
   82264:	9806      	ldr	r0, [sp, #24]
   82266:	9902      	ldr	r1, [sp, #8]
   82268:	aa13      	add	r2, sp, #76	; 0x4c
   8226a:	f7ff fc61 	bl	81b30 <__sprint_r.part.0>
   8226e:	2800      	cmp	r0, #0
   82270:	f040 80ed 	bne.w	8244e <_vfiprintf_r+0x8a6>
   82274:	9814      	ldr	r0, [sp, #80]	; 0x50
   82276:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82278:	1c43      	adds	r3, r0, #1
   8227a:	46cc      	mov	ip, r9
   8227c:	e5fe      	b.n	81e7c <_vfiprintf_r+0x2d4>
   8227e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82280:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82282:	1c59      	adds	r1, r3, #1
   82284:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   82288:	b168      	cbz	r0, 822a6 <_vfiprintf_r+0x6fe>
   8228a:	3201      	adds	r2, #1
   8228c:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   82290:	2301      	movs	r3, #1
   82292:	2907      	cmp	r1, #7
   82294:	9215      	str	r2, [sp, #84]	; 0x54
   82296:	9114      	str	r1, [sp, #80]	; 0x50
   82298:	e886 0009 	stmia.w	r6, {r0, r3}
   8229c:	f300 8160 	bgt.w	82560 <_vfiprintf_r+0x9b8>
   822a0:	460b      	mov	r3, r1
   822a2:	3608      	adds	r6, #8
   822a4:	3101      	adds	r1, #1
   822a6:	9c07      	ldr	r4, [sp, #28]
   822a8:	b164      	cbz	r4, 822c4 <_vfiprintf_r+0x71c>
   822aa:	3202      	adds	r2, #2
   822ac:	a812      	add	r0, sp, #72	; 0x48
   822ae:	2302      	movs	r3, #2
   822b0:	2907      	cmp	r1, #7
   822b2:	9215      	str	r2, [sp, #84]	; 0x54
   822b4:	9114      	str	r1, [sp, #80]	; 0x50
   822b6:	e886 0009 	stmia.w	r6, {r0, r3}
   822ba:	f300 8157 	bgt.w	8256c <_vfiprintf_r+0x9c4>
   822be:	460b      	mov	r3, r1
   822c0:	3608      	adds	r6, #8
   822c2:	3101      	adds	r1, #1
   822c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   822c6:	2d80      	cmp	r5, #128	; 0x80
   822c8:	f000 8101 	beq.w	824ce <_vfiprintf_r+0x926>
   822cc:	9d05      	ldr	r5, [sp, #20]
   822ce:	ebc5 040c 	rsb	r4, r5, ip
   822d2:	2c00      	cmp	r4, #0
   822d4:	dd2f      	ble.n	82336 <_vfiprintf_r+0x78e>
   822d6:	2c10      	cmp	r4, #16
   822d8:	4d57      	ldr	r5, [pc, #348]	; (82438 <_vfiprintf_r+0x890>)
   822da:	dd22      	ble.n	82322 <_vfiprintf_r+0x77a>
   822dc:	4630      	mov	r0, r6
   822de:	f04f 0b10 	mov.w	fp, #16
   822e2:	462e      	mov	r6, r5
   822e4:	4625      	mov	r5, r4
   822e6:	9c06      	ldr	r4, [sp, #24]
   822e8:	e006      	b.n	822f8 <_vfiprintf_r+0x750>
   822ea:	f103 0c02 	add.w	ip, r3, #2
   822ee:	3008      	adds	r0, #8
   822f0:	460b      	mov	r3, r1
   822f2:	3d10      	subs	r5, #16
   822f4:	2d10      	cmp	r5, #16
   822f6:	dd10      	ble.n	8231a <_vfiprintf_r+0x772>
   822f8:	1c59      	adds	r1, r3, #1
   822fa:	3210      	adds	r2, #16
   822fc:	2907      	cmp	r1, #7
   822fe:	9215      	str	r2, [sp, #84]	; 0x54
   82300:	e880 0840 	stmia.w	r0, {r6, fp}
   82304:	9114      	str	r1, [sp, #80]	; 0x50
   82306:	ddf0      	ble.n	822ea <_vfiprintf_r+0x742>
   82308:	2a00      	cmp	r2, #0
   8230a:	d163      	bne.n	823d4 <_vfiprintf_r+0x82c>
   8230c:	3d10      	subs	r5, #16
   8230e:	2d10      	cmp	r5, #16
   82310:	f04f 0c01 	mov.w	ip, #1
   82314:	4613      	mov	r3, r2
   82316:	4648      	mov	r0, r9
   82318:	dcee      	bgt.n	822f8 <_vfiprintf_r+0x750>
   8231a:	462c      	mov	r4, r5
   8231c:	4661      	mov	r1, ip
   8231e:	4635      	mov	r5, r6
   82320:	4606      	mov	r6, r0
   82322:	4422      	add	r2, r4
   82324:	2907      	cmp	r1, #7
   82326:	9215      	str	r2, [sp, #84]	; 0x54
   82328:	6035      	str	r5, [r6, #0]
   8232a:	6074      	str	r4, [r6, #4]
   8232c:	9114      	str	r1, [sp, #80]	; 0x50
   8232e:	f300 80c1 	bgt.w	824b4 <_vfiprintf_r+0x90c>
   82332:	3608      	adds	r6, #8
   82334:	3101      	adds	r1, #1
   82336:	9d05      	ldr	r5, [sp, #20]
   82338:	2907      	cmp	r1, #7
   8233a:	442a      	add	r2, r5
   8233c:	9215      	str	r2, [sp, #84]	; 0x54
   8233e:	6037      	str	r7, [r6, #0]
   82340:	6075      	str	r5, [r6, #4]
   82342:	9114      	str	r1, [sp, #80]	; 0x50
   82344:	f340 80c1 	ble.w	824ca <_vfiprintf_r+0x922>
   82348:	2a00      	cmp	r2, #0
   8234a:	f040 8130 	bne.w	825ae <_vfiprintf_r+0xa06>
   8234e:	9214      	str	r2, [sp, #80]	; 0x50
   82350:	464e      	mov	r6, r9
   82352:	f01a 0f04 	tst.w	sl, #4
   82356:	f000 808b 	beq.w	82470 <_vfiprintf_r+0x8c8>
   8235a:	9d04      	ldr	r5, [sp, #16]
   8235c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82360:	ebcb 0405 	rsb	r4, fp, r5
   82364:	2c00      	cmp	r4, #0
   82366:	f340 8083 	ble.w	82470 <_vfiprintf_r+0x8c8>
   8236a:	2c10      	cmp	r4, #16
   8236c:	f340 821e 	ble.w	827ac <_vfiprintf_r+0xc04>
   82370:	9914      	ldr	r1, [sp, #80]	; 0x50
   82372:	4d32      	ldr	r5, [pc, #200]	; (8243c <_vfiprintf_r+0x894>)
   82374:	2710      	movs	r7, #16
   82376:	f8dd a018 	ldr.w	sl, [sp, #24]
   8237a:	f8dd b008 	ldr.w	fp, [sp, #8]
   8237e:	e005      	b.n	8238c <_vfiprintf_r+0x7e4>
   82380:	1c88      	adds	r0, r1, #2
   82382:	3608      	adds	r6, #8
   82384:	4619      	mov	r1, r3
   82386:	3c10      	subs	r4, #16
   82388:	2c10      	cmp	r4, #16
   8238a:	dd10      	ble.n	823ae <_vfiprintf_r+0x806>
   8238c:	1c4b      	adds	r3, r1, #1
   8238e:	3210      	adds	r2, #16
   82390:	2b07      	cmp	r3, #7
   82392:	9215      	str	r2, [sp, #84]	; 0x54
   82394:	e886 00a0 	stmia.w	r6, {r5, r7}
   82398:	9314      	str	r3, [sp, #80]	; 0x50
   8239a:	ddf1      	ble.n	82380 <_vfiprintf_r+0x7d8>
   8239c:	2a00      	cmp	r2, #0
   8239e:	d17d      	bne.n	8249c <_vfiprintf_r+0x8f4>
   823a0:	3c10      	subs	r4, #16
   823a2:	2c10      	cmp	r4, #16
   823a4:	f04f 0001 	mov.w	r0, #1
   823a8:	4611      	mov	r1, r2
   823aa:	464e      	mov	r6, r9
   823ac:	dcee      	bgt.n	8238c <_vfiprintf_r+0x7e4>
   823ae:	4422      	add	r2, r4
   823b0:	2807      	cmp	r0, #7
   823b2:	9215      	str	r2, [sp, #84]	; 0x54
   823b4:	6035      	str	r5, [r6, #0]
   823b6:	6074      	str	r4, [r6, #4]
   823b8:	9014      	str	r0, [sp, #80]	; 0x50
   823ba:	dd59      	ble.n	82470 <_vfiprintf_r+0x8c8>
   823bc:	2a00      	cmp	r2, #0
   823be:	d14f      	bne.n	82460 <_vfiprintf_r+0x8b8>
   823c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   823c2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   823c6:	9d04      	ldr	r5, [sp, #16]
   823c8:	45ab      	cmp	fp, r5
   823ca:	bfac      	ite	ge
   823cc:	445c      	addge	r4, fp
   823ce:	1964      	addlt	r4, r4, r5
   823d0:	9409      	str	r4, [sp, #36]	; 0x24
   823d2:	e05e      	b.n	82492 <_vfiprintf_r+0x8ea>
   823d4:	4620      	mov	r0, r4
   823d6:	9902      	ldr	r1, [sp, #8]
   823d8:	aa13      	add	r2, sp, #76	; 0x4c
   823da:	f7ff fba9 	bl	81b30 <__sprint_r.part.0>
   823de:	2800      	cmp	r0, #0
   823e0:	d135      	bne.n	8244e <_vfiprintf_r+0x8a6>
   823e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   823e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   823e6:	f103 0c01 	add.w	ip, r3, #1
   823ea:	4648      	mov	r0, r9
   823ec:	e781      	b.n	822f2 <_vfiprintf_r+0x74a>
   823ee:	08e0      	lsrs	r0, r4, #3
   823f0:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   823f4:	f004 0207 	and.w	r2, r4, #7
   823f8:	08e9      	lsrs	r1, r5, #3
   823fa:	3230      	adds	r2, #48	; 0x30
   823fc:	ea50 0b01 	orrs.w	fp, r0, r1
   82400:	461f      	mov	r7, r3
   82402:	701a      	strb	r2, [r3, #0]
   82404:	4604      	mov	r4, r0
   82406:	460d      	mov	r5, r1
   82408:	f103 33ff 	add.w	r3, r3, #4294967295
   8240c:	d1ef      	bne.n	823ee <_vfiprintf_r+0x846>
   8240e:	f01a 0f01 	tst.w	sl, #1
   82412:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   82416:	4639      	mov	r1, r7
   82418:	f000 80b9 	beq.w	8258e <_vfiprintf_r+0x9e6>
   8241c:	2a30      	cmp	r2, #48	; 0x30
   8241e:	f43f acf4 	beq.w	81e0a <_vfiprintf_r+0x262>
   82422:	461f      	mov	r7, r3
   82424:	ebc7 0509 	rsb	r5, r7, r9
   82428:	2330      	movs	r3, #48	; 0x30
   8242a:	9505      	str	r5, [sp, #20]
   8242c:	f801 3c01 	strb.w	r3, [r1, #-1]
   82430:	e4ee      	b.n	81e10 <_vfiprintf_r+0x268>
   82432:	bf00      	nop
   82434:	00084a08 	.word	0x00084a08
   82438:	00084a24 	.word	0x00084a24
   8243c:	00084a34 	.word	0x00084a34
   82440:	9b15      	ldr	r3, [sp, #84]	; 0x54
   82442:	b123      	cbz	r3, 8244e <_vfiprintf_r+0x8a6>
   82444:	9806      	ldr	r0, [sp, #24]
   82446:	9902      	ldr	r1, [sp, #8]
   82448:	aa13      	add	r2, sp, #76	; 0x4c
   8244a:	f7ff fb71 	bl	81b30 <__sprint_r.part.0>
   8244e:	9c02      	ldr	r4, [sp, #8]
   82450:	89a3      	ldrh	r3, [r4, #12]
   82452:	065b      	lsls	r3, r3, #25
   82454:	f53f ac98 	bmi.w	81d88 <_vfiprintf_r+0x1e0>
   82458:	9809      	ldr	r0, [sp, #36]	; 0x24
   8245a:	b031      	add	sp, #196	; 0xc4
   8245c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82460:	9806      	ldr	r0, [sp, #24]
   82462:	9902      	ldr	r1, [sp, #8]
   82464:	aa13      	add	r2, sp, #76	; 0x4c
   82466:	f7ff fb63 	bl	81b30 <__sprint_r.part.0>
   8246a:	2800      	cmp	r0, #0
   8246c:	d1ef      	bne.n	8244e <_vfiprintf_r+0x8a6>
   8246e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82470:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82472:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82476:	9d04      	ldr	r5, [sp, #16]
   82478:	45ab      	cmp	fp, r5
   8247a:	bfac      	ite	ge
   8247c:	445c      	addge	r4, fp
   8247e:	1964      	addlt	r4, r4, r5
   82480:	9409      	str	r4, [sp, #36]	; 0x24
   82482:	b132      	cbz	r2, 82492 <_vfiprintf_r+0x8ea>
   82484:	9806      	ldr	r0, [sp, #24]
   82486:	9902      	ldr	r1, [sp, #8]
   82488:	aa13      	add	r2, sp, #76	; 0x4c
   8248a:	f7ff fb51 	bl	81b30 <__sprint_r.part.0>
   8248e:	2800      	cmp	r0, #0
   82490:	d1dd      	bne.n	8244e <_vfiprintf_r+0x8a6>
   82492:	2000      	movs	r0, #0
   82494:	9014      	str	r0, [sp, #80]	; 0x50
   82496:	464e      	mov	r6, r9
   82498:	f7ff bbb9 	b.w	81c0e <_vfiprintf_r+0x66>
   8249c:	4650      	mov	r0, sl
   8249e:	4659      	mov	r1, fp
   824a0:	aa13      	add	r2, sp, #76	; 0x4c
   824a2:	f7ff fb45 	bl	81b30 <__sprint_r.part.0>
   824a6:	2800      	cmp	r0, #0
   824a8:	d1d1      	bne.n	8244e <_vfiprintf_r+0x8a6>
   824aa:	9914      	ldr	r1, [sp, #80]	; 0x50
   824ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
   824ae:	1c48      	adds	r0, r1, #1
   824b0:	464e      	mov	r6, r9
   824b2:	e768      	b.n	82386 <_vfiprintf_r+0x7de>
   824b4:	2a00      	cmp	r2, #0
   824b6:	f040 80f7 	bne.w	826a8 <_vfiprintf_r+0xb00>
   824ba:	9c05      	ldr	r4, [sp, #20]
   824bc:	2301      	movs	r3, #1
   824be:	9720      	str	r7, [sp, #128]	; 0x80
   824c0:	9421      	str	r4, [sp, #132]	; 0x84
   824c2:	9415      	str	r4, [sp, #84]	; 0x54
   824c4:	4622      	mov	r2, r4
   824c6:	9314      	str	r3, [sp, #80]	; 0x50
   824c8:	464e      	mov	r6, r9
   824ca:	3608      	adds	r6, #8
   824cc:	e741      	b.n	82352 <_vfiprintf_r+0x7aa>
   824ce:	9d04      	ldr	r5, [sp, #16]
   824d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   824d4:	ebcb 0405 	rsb	r4, fp, r5
   824d8:	2c00      	cmp	r4, #0
   824da:	f77f aef7 	ble.w	822cc <_vfiprintf_r+0x724>
   824de:	2c10      	cmp	r4, #16
   824e0:	4da6      	ldr	r5, [pc, #664]	; (8277c <_vfiprintf_r+0xbd4>)
   824e2:	f340 8170 	ble.w	827c6 <_vfiprintf_r+0xc1e>
   824e6:	4629      	mov	r1, r5
   824e8:	f04f 0b10 	mov.w	fp, #16
   824ec:	4625      	mov	r5, r4
   824ee:	4664      	mov	r4, ip
   824f0:	46b4      	mov	ip, r6
   824f2:	460e      	mov	r6, r1
   824f4:	e006      	b.n	82504 <_vfiprintf_r+0x95c>
   824f6:	1c98      	adds	r0, r3, #2
   824f8:	f10c 0c08 	add.w	ip, ip, #8
   824fc:	460b      	mov	r3, r1
   824fe:	3d10      	subs	r5, #16
   82500:	2d10      	cmp	r5, #16
   82502:	dd0f      	ble.n	82524 <_vfiprintf_r+0x97c>
   82504:	1c59      	adds	r1, r3, #1
   82506:	3210      	adds	r2, #16
   82508:	2907      	cmp	r1, #7
   8250a:	9215      	str	r2, [sp, #84]	; 0x54
   8250c:	e88c 0840 	stmia.w	ip, {r6, fp}
   82510:	9114      	str	r1, [sp, #80]	; 0x50
   82512:	ddf0      	ble.n	824f6 <_vfiprintf_r+0x94e>
   82514:	b9ba      	cbnz	r2, 82546 <_vfiprintf_r+0x99e>
   82516:	3d10      	subs	r5, #16
   82518:	2d10      	cmp	r5, #16
   8251a:	f04f 0001 	mov.w	r0, #1
   8251e:	4613      	mov	r3, r2
   82520:	46cc      	mov	ip, r9
   82522:	dcef      	bgt.n	82504 <_vfiprintf_r+0x95c>
   82524:	4633      	mov	r3, r6
   82526:	4666      	mov	r6, ip
   82528:	46a4      	mov	ip, r4
   8252a:	462c      	mov	r4, r5
   8252c:	461d      	mov	r5, r3
   8252e:	4422      	add	r2, r4
   82530:	2807      	cmp	r0, #7
   82532:	9215      	str	r2, [sp, #84]	; 0x54
   82534:	6035      	str	r5, [r6, #0]
   82536:	6074      	str	r4, [r6, #4]
   82538:	9014      	str	r0, [sp, #80]	; 0x50
   8253a:	f300 80af 	bgt.w	8269c <_vfiprintf_r+0xaf4>
   8253e:	3608      	adds	r6, #8
   82540:	1c41      	adds	r1, r0, #1
   82542:	4603      	mov	r3, r0
   82544:	e6c2      	b.n	822cc <_vfiprintf_r+0x724>
   82546:	9806      	ldr	r0, [sp, #24]
   82548:	9902      	ldr	r1, [sp, #8]
   8254a:	aa13      	add	r2, sp, #76	; 0x4c
   8254c:	f7ff faf0 	bl	81b30 <__sprint_r.part.0>
   82550:	2800      	cmp	r0, #0
   82552:	f47f af7c 	bne.w	8244e <_vfiprintf_r+0x8a6>
   82556:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82558:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8255a:	1c58      	adds	r0, r3, #1
   8255c:	46cc      	mov	ip, r9
   8255e:	e7ce      	b.n	824fe <_vfiprintf_r+0x956>
   82560:	2a00      	cmp	r2, #0
   82562:	d179      	bne.n	82658 <_vfiprintf_r+0xab0>
   82564:	4619      	mov	r1, r3
   82566:	464e      	mov	r6, r9
   82568:	4613      	mov	r3, r2
   8256a:	e69c      	b.n	822a6 <_vfiprintf_r+0x6fe>
   8256c:	2a00      	cmp	r2, #0
   8256e:	f040 8084 	bne.w	8267a <_vfiprintf_r+0xad2>
   82572:	2101      	movs	r1, #1
   82574:	4613      	mov	r3, r2
   82576:	464e      	mov	r6, r9
   82578:	e6a4      	b.n	822c4 <_vfiprintf_r+0x71c>
   8257a:	464f      	mov	r7, r9
   8257c:	e448      	b.n	81e10 <_vfiprintf_r+0x268>
   8257e:	2d00      	cmp	r5, #0
   82580:	bf08      	it	eq
   82582:	2c0a      	cmpeq	r4, #10
   82584:	d246      	bcs.n	82614 <_vfiprintf_r+0xa6c>
   82586:	3430      	adds	r4, #48	; 0x30
   82588:	af30      	add	r7, sp, #192	; 0xc0
   8258a:	f807 4d41 	strb.w	r4, [r7, #-65]!
   8258e:	ebc7 0309 	rsb	r3, r7, r9
   82592:	9305      	str	r3, [sp, #20]
   82594:	e43c      	b.n	81e10 <_vfiprintf_r+0x268>
   82596:	2302      	movs	r3, #2
   82598:	e417      	b.n	81dca <_vfiprintf_r+0x222>
   8259a:	2a00      	cmp	r2, #0
   8259c:	f040 80af 	bne.w	826fe <_vfiprintf_r+0xb56>
   825a0:	4613      	mov	r3, r2
   825a2:	2101      	movs	r1, #1
   825a4:	464e      	mov	r6, r9
   825a6:	e66d      	b.n	82284 <_vfiprintf_r+0x6dc>
   825a8:	4644      	mov	r4, r8
   825aa:	f7ff bb58 	b.w	81c5e <_vfiprintf_r+0xb6>
   825ae:	9806      	ldr	r0, [sp, #24]
   825b0:	9902      	ldr	r1, [sp, #8]
   825b2:	aa13      	add	r2, sp, #76	; 0x4c
   825b4:	f7ff fabc 	bl	81b30 <__sprint_r.part.0>
   825b8:	2800      	cmp	r0, #0
   825ba:	f47f af48 	bne.w	8244e <_vfiprintf_r+0x8a6>
   825be:	9a15      	ldr	r2, [sp, #84]	; 0x54
   825c0:	464e      	mov	r6, r9
   825c2:	e6c6      	b.n	82352 <_vfiprintf_r+0x7aa>
   825c4:	9d08      	ldr	r5, [sp, #32]
   825c6:	682c      	ldr	r4, [r5, #0]
   825c8:	3504      	adds	r5, #4
   825ca:	9508      	str	r5, [sp, #32]
   825cc:	2500      	movs	r5, #0
   825ce:	f7ff bbfc 	b.w	81dca <_vfiprintf_r+0x222>
   825d2:	9d08      	ldr	r5, [sp, #32]
   825d4:	2301      	movs	r3, #1
   825d6:	682c      	ldr	r4, [r5, #0]
   825d8:	3504      	adds	r5, #4
   825da:	9508      	str	r5, [sp, #32]
   825dc:	2500      	movs	r5, #0
   825de:	f7ff bbf4 	b.w	81dca <_vfiprintf_r+0x222>
   825e2:	9d08      	ldr	r5, [sp, #32]
   825e4:	682c      	ldr	r4, [r5, #0]
   825e6:	3504      	adds	r5, #4
   825e8:	9508      	str	r5, [sp, #32]
   825ea:	2500      	movs	r5, #0
   825ec:	e525      	b.n	8203a <_vfiprintf_r+0x492>
   825ee:	9d08      	ldr	r5, [sp, #32]
   825f0:	682c      	ldr	r4, [r5, #0]
   825f2:	3504      	adds	r5, #4
   825f4:	9508      	str	r5, [sp, #32]
   825f6:	17e5      	asrs	r5, r4, #31
   825f8:	4622      	mov	r2, r4
   825fa:	462b      	mov	r3, r5
   825fc:	e48e      	b.n	81f1c <_vfiprintf_r+0x374>
   825fe:	9806      	ldr	r0, [sp, #24]
   82600:	9902      	ldr	r1, [sp, #8]
   82602:	aa13      	add	r2, sp, #76	; 0x4c
   82604:	f7ff fa94 	bl	81b30 <__sprint_r.part.0>
   82608:	2800      	cmp	r0, #0
   8260a:	f47f af20 	bne.w	8244e <_vfiprintf_r+0x8a6>
   8260e:	464e      	mov	r6, r9
   82610:	f7ff bb9a 	b.w	81d48 <_vfiprintf_r+0x1a0>
   82614:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   82618:	9603      	str	r6, [sp, #12]
   8261a:	465e      	mov	r6, fp
   8261c:	46e3      	mov	fp, ip
   8261e:	4620      	mov	r0, r4
   82620:	4629      	mov	r1, r5
   82622:	220a      	movs	r2, #10
   82624:	2300      	movs	r3, #0
   82626:	f001 fe5f 	bl	842e8 <__aeabi_uldivmod>
   8262a:	3230      	adds	r2, #48	; 0x30
   8262c:	7032      	strb	r2, [r6, #0]
   8262e:	4620      	mov	r0, r4
   82630:	4629      	mov	r1, r5
   82632:	220a      	movs	r2, #10
   82634:	2300      	movs	r3, #0
   82636:	f001 fe57 	bl	842e8 <__aeabi_uldivmod>
   8263a:	4604      	mov	r4, r0
   8263c:	460d      	mov	r5, r1
   8263e:	ea54 0005 	orrs.w	r0, r4, r5
   82642:	4637      	mov	r7, r6
   82644:	f106 36ff 	add.w	r6, r6, #4294967295
   82648:	d1e9      	bne.n	8261e <_vfiprintf_r+0xa76>
   8264a:	ebc7 0309 	rsb	r3, r7, r9
   8264e:	46dc      	mov	ip, fp
   82650:	9e03      	ldr	r6, [sp, #12]
   82652:	9305      	str	r3, [sp, #20]
   82654:	f7ff bbdc 	b.w	81e10 <_vfiprintf_r+0x268>
   82658:	9806      	ldr	r0, [sp, #24]
   8265a:	9902      	ldr	r1, [sp, #8]
   8265c:	aa13      	add	r2, sp, #76	; 0x4c
   8265e:	f8cd c004 	str.w	ip, [sp, #4]
   82662:	f7ff fa65 	bl	81b30 <__sprint_r.part.0>
   82666:	f8dd c004 	ldr.w	ip, [sp, #4]
   8266a:	2800      	cmp	r0, #0
   8266c:	f47f aeef 	bne.w	8244e <_vfiprintf_r+0x8a6>
   82670:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82672:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82674:	1c59      	adds	r1, r3, #1
   82676:	464e      	mov	r6, r9
   82678:	e615      	b.n	822a6 <_vfiprintf_r+0x6fe>
   8267a:	9806      	ldr	r0, [sp, #24]
   8267c:	9902      	ldr	r1, [sp, #8]
   8267e:	aa13      	add	r2, sp, #76	; 0x4c
   82680:	f8cd c004 	str.w	ip, [sp, #4]
   82684:	f7ff fa54 	bl	81b30 <__sprint_r.part.0>
   82688:	f8dd c004 	ldr.w	ip, [sp, #4]
   8268c:	2800      	cmp	r0, #0
   8268e:	f47f aede 	bne.w	8244e <_vfiprintf_r+0x8a6>
   82692:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82694:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82696:	1c59      	adds	r1, r3, #1
   82698:	464e      	mov	r6, r9
   8269a:	e613      	b.n	822c4 <_vfiprintf_r+0x71c>
   8269c:	2a00      	cmp	r2, #0
   8269e:	d156      	bne.n	8274e <_vfiprintf_r+0xba6>
   826a0:	2101      	movs	r1, #1
   826a2:	4613      	mov	r3, r2
   826a4:	464e      	mov	r6, r9
   826a6:	e611      	b.n	822cc <_vfiprintf_r+0x724>
   826a8:	9806      	ldr	r0, [sp, #24]
   826aa:	9902      	ldr	r1, [sp, #8]
   826ac:	aa13      	add	r2, sp, #76	; 0x4c
   826ae:	f7ff fa3f 	bl	81b30 <__sprint_r.part.0>
   826b2:	2800      	cmp	r0, #0
   826b4:	f47f aecb 	bne.w	8244e <_vfiprintf_r+0x8a6>
   826b8:	9914      	ldr	r1, [sp, #80]	; 0x50
   826ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
   826bc:	3101      	adds	r1, #1
   826be:	464e      	mov	r6, r9
   826c0:	e639      	b.n	82336 <_vfiprintf_r+0x78e>
   826c2:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   826c6:	4264      	negs	r4, r4
   826c8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   826cc:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   826d0:	f8cd b01c 	str.w	fp, [sp, #28]
   826d4:	f8cd c014 	str.w	ip, [sp, #20]
   826d8:	2301      	movs	r3, #1
   826da:	f7ff bb7e 	b.w	81dda <_vfiprintf_r+0x232>
   826de:	f01a 0f10 	tst.w	sl, #16
   826e2:	d11d      	bne.n	82720 <_vfiprintf_r+0xb78>
   826e4:	f01a 0f40 	tst.w	sl, #64	; 0x40
   826e8:	d058      	beq.n	8279c <_vfiprintf_r+0xbf4>
   826ea:	9d08      	ldr	r5, [sp, #32]
   826ec:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   826f0:	682b      	ldr	r3, [r5, #0]
   826f2:	3504      	adds	r5, #4
   826f4:	9508      	str	r5, [sp, #32]
   826f6:	f8a3 b000 	strh.w	fp, [r3]
   826fa:	f7ff ba88 	b.w	81c0e <_vfiprintf_r+0x66>
   826fe:	9806      	ldr	r0, [sp, #24]
   82700:	9902      	ldr	r1, [sp, #8]
   82702:	aa13      	add	r2, sp, #76	; 0x4c
   82704:	f8cd c004 	str.w	ip, [sp, #4]
   82708:	f7ff fa12 	bl	81b30 <__sprint_r.part.0>
   8270c:	f8dd c004 	ldr.w	ip, [sp, #4]
   82710:	2800      	cmp	r0, #0
   82712:	f47f ae9c 	bne.w	8244e <_vfiprintf_r+0x8a6>
   82716:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82718:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8271a:	1c59      	adds	r1, r3, #1
   8271c:	464e      	mov	r6, r9
   8271e:	e5b1      	b.n	82284 <_vfiprintf_r+0x6dc>
   82720:	f8dd b020 	ldr.w	fp, [sp, #32]
   82724:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82726:	f8db 3000 	ldr.w	r3, [fp]
   8272a:	f10b 0b04 	add.w	fp, fp, #4
   8272e:	f8cd b020 	str.w	fp, [sp, #32]
   82732:	601c      	str	r4, [r3, #0]
   82734:	f7ff ba6b 	b.w	81c0e <_vfiprintf_r+0x66>
   82738:	9408      	str	r4, [sp, #32]
   8273a:	f001 fc5f 	bl	83ffc <strlen>
   8273e:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   82742:	9005      	str	r0, [sp, #20]
   82744:	9407      	str	r4, [sp, #28]
   82746:	f04f 0c00 	mov.w	ip, #0
   8274a:	f7ff bb61 	b.w	81e10 <_vfiprintf_r+0x268>
   8274e:	9806      	ldr	r0, [sp, #24]
   82750:	9902      	ldr	r1, [sp, #8]
   82752:	aa13      	add	r2, sp, #76	; 0x4c
   82754:	f8cd c004 	str.w	ip, [sp, #4]
   82758:	f7ff f9ea 	bl	81b30 <__sprint_r.part.0>
   8275c:	f8dd c004 	ldr.w	ip, [sp, #4]
   82760:	2800      	cmp	r0, #0
   82762:	f47f ae74 	bne.w	8244e <_vfiprintf_r+0x8a6>
   82766:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82768:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8276a:	1c59      	adds	r1, r3, #1
   8276c:	464e      	mov	r6, r9
   8276e:	e5ad      	b.n	822cc <_vfiprintf_r+0x724>
   82770:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82772:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82774:	3301      	adds	r3, #1
   82776:	4d02      	ldr	r5, [pc, #8]	; (82780 <_vfiprintf_r+0xbd8>)
   82778:	f7ff bb9a 	b.w	81eb0 <_vfiprintf_r+0x308>
   8277c:	00084a24 	.word	0x00084a24
   82780:	00084a34 	.word	0x00084a34
   82784:	f1bc 0f06 	cmp.w	ip, #6
   82788:	bf34      	ite	cc
   8278a:	4663      	movcc	r3, ip
   8278c:	2306      	movcs	r3, #6
   8278e:	9408      	str	r4, [sp, #32]
   82790:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   82794:	9305      	str	r3, [sp, #20]
   82796:	9403      	str	r4, [sp, #12]
   82798:	4f16      	ldr	r7, [pc, #88]	; (827f4 <_vfiprintf_r+0xc4c>)
   8279a:	e472      	b.n	82082 <_vfiprintf_r+0x4da>
   8279c:	9c08      	ldr	r4, [sp, #32]
   8279e:	9d09      	ldr	r5, [sp, #36]	; 0x24
   827a0:	6823      	ldr	r3, [r4, #0]
   827a2:	3404      	adds	r4, #4
   827a4:	9408      	str	r4, [sp, #32]
   827a6:	601d      	str	r5, [r3, #0]
   827a8:	f7ff ba31 	b.w	81c0e <_vfiprintf_r+0x66>
   827ac:	9814      	ldr	r0, [sp, #80]	; 0x50
   827ae:	4d12      	ldr	r5, [pc, #72]	; (827f8 <_vfiprintf_r+0xc50>)
   827b0:	3001      	adds	r0, #1
   827b2:	e5fc      	b.n	823ae <_vfiprintf_r+0x806>
   827b4:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   827b8:	f8cd c014 	str.w	ip, [sp, #20]
   827bc:	9507      	str	r5, [sp, #28]
   827be:	9408      	str	r4, [sp, #32]
   827c0:	4684      	mov	ip, r0
   827c2:	f7ff bb25 	b.w	81e10 <_vfiprintf_r+0x268>
   827c6:	4608      	mov	r0, r1
   827c8:	e6b1      	b.n	8252e <_vfiprintf_r+0x986>
   827ca:	46a0      	mov	r8, r4
   827cc:	2500      	movs	r5, #0
   827ce:	f7ff ba5a 	b.w	81c86 <_vfiprintf_r+0xde>
   827d2:	f8dd b020 	ldr.w	fp, [sp, #32]
   827d6:	f898 3001 	ldrb.w	r3, [r8, #1]
   827da:	f8db 5000 	ldr.w	r5, [fp]
   827de:	f10b 0204 	add.w	r2, fp, #4
   827e2:	2d00      	cmp	r5, #0
   827e4:	9208      	str	r2, [sp, #32]
   827e6:	46a0      	mov	r8, r4
   827e8:	f6bf aa4b 	bge.w	81c82 <_vfiprintf_r+0xda>
   827ec:	f04f 35ff 	mov.w	r5, #4294967295
   827f0:	f7ff ba47 	b.w	81c82 <_vfiprintf_r+0xda>
   827f4:	00084a1c 	.word	0x00084a1c
   827f8:	00084a34 	.word	0x00084a34

000827fc <__sbprintf>:
   827fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82800:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   82802:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   82806:	4688      	mov	r8, r1
   82808:	9719      	str	r7, [sp, #100]	; 0x64
   8280a:	f8d8 701c 	ldr.w	r7, [r8, #28]
   8280e:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   82812:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   82816:	9707      	str	r7, [sp, #28]
   82818:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   8281c:	ac1a      	add	r4, sp, #104	; 0x68
   8281e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82822:	f02a 0a02 	bic.w	sl, sl, #2
   82826:	2600      	movs	r6, #0
   82828:	4669      	mov	r1, sp
   8282a:	9400      	str	r4, [sp, #0]
   8282c:	9404      	str	r4, [sp, #16]
   8282e:	9502      	str	r5, [sp, #8]
   82830:	9505      	str	r5, [sp, #20]
   82832:	f8ad a00c 	strh.w	sl, [sp, #12]
   82836:	f8ad 900e 	strh.w	r9, [sp, #14]
   8283a:	9709      	str	r7, [sp, #36]	; 0x24
   8283c:	9606      	str	r6, [sp, #24]
   8283e:	4605      	mov	r5, r0
   82840:	f7ff f9b2 	bl	81ba8 <_vfiprintf_r>
   82844:	1e04      	subs	r4, r0, #0
   82846:	db07      	blt.n	82858 <__sbprintf+0x5c>
   82848:	4628      	mov	r0, r5
   8284a:	4669      	mov	r1, sp
   8284c:	f000 f97e 	bl	82b4c <_fflush_r>
   82850:	42b0      	cmp	r0, r6
   82852:	bf18      	it	ne
   82854:	f04f 34ff 	movne.w	r4, #4294967295
   82858:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8285c:	065b      	lsls	r3, r3, #25
   8285e:	d505      	bpl.n	8286c <__sbprintf+0x70>
   82860:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   82864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82868:	f8a8 300c 	strh.w	r3, [r8, #12]
   8286c:	4620      	mov	r0, r4
   8286e:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82876:	bf00      	nop

00082878 <__swbuf_r>:
   82878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8287a:	460d      	mov	r5, r1
   8287c:	4614      	mov	r4, r2
   8287e:	4607      	mov	r7, r0
   82880:	b110      	cbz	r0, 82888 <__swbuf_r+0x10>
   82882:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82884:	2b00      	cmp	r3, #0
   82886:	d048      	beq.n	8291a <__swbuf_r+0xa2>
   82888:	89a2      	ldrh	r2, [r4, #12]
   8288a:	69a0      	ldr	r0, [r4, #24]
   8288c:	b293      	uxth	r3, r2
   8288e:	60a0      	str	r0, [r4, #8]
   82890:	0718      	lsls	r0, r3, #28
   82892:	d538      	bpl.n	82906 <__swbuf_r+0x8e>
   82894:	6926      	ldr	r6, [r4, #16]
   82896:	2e00      	cmp	r6, #0
   82898:	d035      	beq.n	82906 <__swbuf_r+0x8e>
   8289a:	0499      	lsls	r1, r3, #18
   8289c:	b2ed      	uxtb	r5, r5
   8289e:	d515      	bpl.n	828cc <__swbuf_r+0x54>
   828a0:	6823      	ldr	r3, [r4, #0]
   828a2:	6962      	ldr	r2, [r4, #20]
   828a4:	1b9e      	subs	r6, r3, r6
   828a6:	4296      	cmp	r6, r2
   828a8:	da1c      	bge.n	828e4 <__swbuf_r+0x6c>
   828aa:	3601      	adds	r6, #1
   828ac:	68a2      	ldr	r2, [r4, #8]
   828ae:	1c59      	adds	r1, r3, #1
   828b0:	3a01      	subs	r2, #1
   828b2:	60a2      	str	r2, [r4, #8]
   828b4:	6021      	str	r1, [r4, #0]
   828b6:	701d      	strb	r5, [r3, #0]
   828b8:	6963      	ldr	r3, [r4, #20]
   828ba:	42b3      	cmp	r3, r6
   828bc:	d01a      	beq.n	828f4 <__swbuf_r+0x7c>
   828be:	89a3      	ldrh	r3, [r4, #12]
   828c0:	07db      	lsls	r3, r3, #31
   828c2:	d501      	bpl.n	828c8 <__swbuf_r+0x50>
   828c4:	2d0a      	cmp	r5, #10
   828c6:	d015      	beq.n	828f4 <__swbuf_r+0x7c>
   828c8:	4628      	mov	r0, r5
   828ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   828cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   828ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   828d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   828d6:	6663      	str	r3, [r4, #100]	; 0x64
   828d8:	6823      	ldr	r3, [r4, #0]
   828da:	81a2      	strh	r2, [r4, #12]
   828dc:	6962      	ldr	r2, [r4, #20]
   828de:	1b9e      	subs	r6, r3, r6
   828e0:	4296      	cmp	r6, r2
   828e2:	dbe2      	blt.n	828aa <__swbuf_r+0x32>
   828e4:	4638      	mov	r0, r7
   828e6:	4621      	mov	r1, r4
   828e8:	f000 f930 	bl	82b4c <_fflush_r>
   828ec:	b940      	cbnz	r0, 82900 <__swbuf_r+0x88>
   828ee:	6823      	ldr	r3, [r4, #0]
   828f0:	2601      	movs	r6, #1
   828f2:	e7db      	b.n	828ac <__swbuf_r+0x34>
   828f4:	4638      	mov	r0, r7
   828f6:	4621      	mov	r1, r4
   828f8:	f000 f928 	bl	82b4c <_fflush_r>
   828fc:	2800      	cmp	r0, #0
   828fe:	d0e3      	beq.n	828c8 <__swbuf_r+0x50>
   82900:	f04f 30ff 	mov.w	r0, #4294967295
   82904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82906:	4638      	mov	r0, r7
   82908:	4621      	mov	r1, r4
   8290a:	f000 f809 	bl	82920 <__swsetup_r>
   8290e:	2800      	cmp	r0, #0
   82910:	d1f6      	bne.n	82900 <__swbuf_r+0x88>
   82912:	89a2      	ldrh	r2, [r4, #12]
   82914:	6926      	ldr	r6, [r4, #16]
   82916:	b293      	uxth	r3, r2
   82918:	e7bf      	b.n	8289a <__swbuf_r+0x22>
   8291a:	f000 f933 	bl	82b84 <__sinit>
   8291e:	e7b3      	b.n	82888 <__swbuf_r+0x10>

00082920 <__swsetup_r>:
   82920:	4b2f      	ldr	r3, [pc, #188]	; (829e0 <__swsetup_r+0xc0>)
   82922:	b570      	push	{r4, r5, r6, lr}
   82924:	4606      	mov	r6, r0
   82926:	6818      	ldr	r0, [r3, #0]
   82928:	460c      	mov	r4, r1
   8292a:	b110      	cbz	r0, 82932 <__swsetup_r+0x12>
   8292c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   8292e:	2a00      	cmp	r2, #0
   82930:	d036      	beq.n	829a0 <__swsetup_r+0x80>
   82932:	89a5      	ldrh	r5, [r4, #12]
   82934:	b2ab      	uxth	r3, r5
   82936:	0719      	lsls	r1, r3, #28
   82938:	d50c      	bpl.n	82954 <__swsetup_r+0x34>
   8293a:	6922      	ldr	r2, [r4, #16]
   8293c:	b1aa      	cbz	r2, 8296a <__swsetup_r+0x4a>
   8293e:	f013 0101 	ands.w	r1, r3, #1
   82942:	d01e      	beq.n	82982 <__swsetup_r+0x62>
   82944:	6963      	ldr	r3, [r4, #20]
   82946:	2100      	movs	r1, #0
   82948:	425b      	negs	r3, r3
   8294a:	61a3      	str	r3, [r4, #24]
   8294c:	60a1      	str	r1, [r4, #8]
   8294e:	b1f2      	cbz	r2, 8298e <__swsetup_r+0x6e>
   82950:	2000      	movs	r0, #0
   82952:	bd70      	pop	{r4, r5, r6, pc}
   82954:	06da      	lsls	r2, r3, #27
   82956:	d53a      	bpl.n	829ce <__swsetup_r+0xae>
   82958:	075b      	lsls	r3, r3, #29
   8295a:	d424      	bmi.n	829a6 <__swsetup_r+0x86>
   8295c:	6922      	ldr	r2, [r4, #16]
   8295e:	f045 0308 	orr.w	r3, r5, #8
   82962:	81a3      	strh	r3, [r4, #12]
   82964:	b29b      	uxth	r3, r3
   82966:	2a00      	cmp	r2, #0
   82968:	d1e9      	bne.n	8293e <__swsetup_r+0x1e>
   8296a:	f403 7120 	and.w	r1, r3, #640	; 0x280
   8296e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82972:	d0e4      	beq.n	8293e <__swsetup_r+0x1e>
   82974:	4630      	mov	r0, r6
   82976:	4621      	mov	r1, r4
   82978:	f000 fcce 	bl	83318 <__smakebuf_r>
   8297c:	89a3      	ldrh	r3, [r4, #12]
   8297e:	6922      	ldr	r2, [r4, #16]
   82980:	e7dd      	b.n	8293e <__swsetup_r+0x1e>
   82982:	0798      	lsls	r0, r3, #30
   82984:	bf58      	it	pl
   82986:	6961      	ldrpl	r1, [r4, #20]
   82988:	60a1      	str	r1, [r4, #8]
   8298a:	2a00      	cmp	r2, #0
   8298c:	d1e0      	bne.n	82950 <__swsetup_r+0x30>
   8298e:	89a3      	ldrh	r3, [r4, #12]
   82990:	061a      	lsls	r2, r3, #24
   82992:	d5dd      	bpl.n	82950 <__swsetup_r+0x30>
   82994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82998:	81a3      	strh	r3, [r4, #12]
   8299a:	f04f 30ff 	mov.w	r0, #4294967295
   8299e:	bd70      	pop	{r4, r5, r6, pc}
   829a0:	f000 f8f0 	bl	82b84 <__sinit>
   829a4:	e7c5      	b.n	82932 <__swsetup_r+0x12>
   829a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   829a8:	b149      	cbz	r1, 829be <__swsetup_r+0x9e>
   829aa:	f104 0340 	add.w	r3, r4, #64	; 0x40
   829ae:	4299      	cmp	r1, r3
   829b0:	d003      	beq.n	829ba <__swsetup_r+0x9a>
   829b2:	4630      	mov	r0, r6
   829b4:	f000 fa2a 	bl	82e0c <_free_r>
   829b8:	89a5      	ldrh	r5, [r4, #12]
   829ba:	2300      	movs	r3, #0
   829bc:	6323      	str	r3, [r4, #48]	; 0x30
   829be:	6922      	ldr	r2, [r4, #16]
   829c0:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   829c4:	2100      	movs	r1, #0
   829c6:	b2ad      	uxth	r5, r5
   829c8:	6022      	str	r2, [r4, #0]
   829ca:	6061      	str	r1, [r4, #4]
   829cc:	e7c7      	b.n	8295e <__swsetup_r+0x3e>
   829ce:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   829d2:	2309      	movs	r3, #9
   829d4:	6033      	str	r3, [r6, #0]
   829d6:	f04f 30ff 	mov.w	r0, #4294967295
   829da:	81a5      	strh	r5, [r4, #12]
   829dc:	bd70      	pop	{r4, r5, r6, pc}
   829de:	bf00      	nop
   829e0:	20070560 	.word	0x20070560

000829e4 <register_fini>:
   829e4:	4b02      	ldr	r3, [pc, #8]	; (829f0 <register_fini+0xc>)
   829e6:	b113      	cbz	r3, 829ee <register_fini+0xa>
   829e8:	4802      	ldr	r0, [pc, #8]	; (829f4 <register_fini+0x10>)
   829ea:	f000 b805 	b.w	829f8 <atexit>
   829ee:	4770      	bx	lr
   829f0:	00000000 	.word	0x00000000
   829f4:	00082c81 	.word	0x00082c81

000829f8 <atexit>:
   829f8:	4601      	mov	r1, r0
   829fa:	2000      	movs	r0, #0
   829fc:	4602      	mov	r2, r0
   829fe:	4603      	mov	r3, r0
   82a00:	f001 bb76 	b.w	840f0 <__register_exitproc>

00082a04 <__sflush_r>:
   82a04:	898b      	ldrh	r3, [r1, #12]
   82a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82a0a:	b29a      	uxth	r2, r3
   82a0c:	460d      	mov	r5, r1
   82a0e:	0711      	lsls	r1, r2, #28
   82a10:	4680      	mov	r8, r0
   82a12:	d43c      	bmi.n	82a8e <__sflush_r+0x8a>
   82a14:	686a      	ldr	r2, [r5, #4]
   82a16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82a1a:	2a00      	cmp	r2, #0
   82a1c:	81ab      	strh	r3, [r5, #12]
   82a1e:	dd59      	ble.n	82ad4 <__sflush_r+0xd0>
   82a20:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82a22:	2c00      	cmp	r4, #0
   82a24:	d04b      	beq.n	82abe <__sflush_r+0xba>
   82a26:	b29b      	uxth	r3, r3
   82a28:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82a2c:	2100      	movs	r1, #0
   82a2e:	b292      	uxth	r2, r2
   82a30:	f8d8 6000 	ldr.w	r6, [r8]
   82a34:	f8c8 1000 	str.w	r1, [r8]
   82a38:	2a00      	cmp	r2, #0
   82a3a:	d04f      	beq.n	82adc <__sflush_r+0xd8>
   82a3c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82a3e:	075f      	lsls	r7, r3, #29
   82a40:	d505      	bpl.n	82a4e <__sflush_r+0x4a>
   82a42:	6869      	ldr	r1, [r5, #4]
   82a44:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82a46:	1a52      	subs	r2, r2, r1
   82a48:	b10b      	cbz	r3, 82a4e <__sflush_r+0x4a>
   82a4a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82a4c:	1ad2      	subs	r2, r2, r3
   82a4e:	4640      	mov	r0, r8
   82a50:	69e9      	ldr	r1, [r5, #28]
   82a52:	2300      	movs	r3, #0
   82a54:	47a0      	blx	r4
   82a56:	1c44      	adds	r4, r0, #1
   82a58:	d04a      	beq.n	82af0 <__sflush_r+0xec>
   82a5a:	89ab      	ldrh	r3, [r5, #12]
   82a5c:	692a      	ldr	r2, [r5, #16]
   82a5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82a62:	b29b      	uxth	r3, r3
   82a64:	2100      	movs	r1, #0
   82a66:	602a      	str	r2, [r5, #0]
   82a68:	04da      	lsls	r2, r3, #19
   82a6a:	81ab      	strh	r3, [r5, #12]
   82a6c:	6069      	str	r1, [r5, #4]
   82a6e:	d44c      	bmi.n	82b0a <__sflush_r+0x106>
   82a70:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82a72:	f8c8 6000 	str.w	r6, [r8]
   82a76:	b311      	cbz	r1, 82abe <__sflush_r+0xba>
   82a78:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82a7c:	4299      	cmp	r1, r3
   82a7e:	d002      	beq.n	82a86 <__sflush_r+0x82>
   82a80:	4640      	mov	r0, r8
   82a82:	f000 f9c3 	bl	82e0c <_free_r>
   82a86:	2000      	movs	r0, #0
   82a88:	6328      	str	r0, [r5, #48]	; 0x30
   82a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82a8e:	692e      	ldr	r6, [r5, #16]
   82a90:	b1ae      	cbz	r6, 82abe <__sflush_r+0xba>
   82a92:	0791      	lsls	r1, r2, #30
   82a94:	682c      	ldr	r4, [r5, #0]
   82a96:	bf0c      	ite	eq
   82a98:	696b      	ldreq	r3, [r5, #20]
   82a9a:	2300      	movne	r3, #0
   82a9c:	602e      	str	r6, [r5, #0]
   82a9e:	1ba4      	subs	r4, r4, r6
   82aa0:	60ab      	str	r3, [r5, #8]
   82aa2:	e00a      	b.n	82aba <__sflush_r+0xb6>
   82aa4:	4632      	mov	r2, r6
   82aa6:	4623      	mov	r3, r4
   82aa8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82aaa:	4640      	mov	r0, r8
   82aac:	69e9      	ldr	r1, [r5, #28]
   82aae:	47b8      	blx	r7
   82ab0:	2800      	cmp	r0, #0
   82ab2:	ebc0 0404 	rsb	r4, r0, r4
   82ab6:	4406      	add	r6, r0
   82ab8:	dd04      	ble.n	82ac4 <__sflush_r+0xc0>
   82aba:	2c00      	cmp	r4, #0
   82abc:	dcf2      	bgt.n	82aa4 <__sflush_r+0xa0>
   82abe:	2000      	movs	r0, #0
   82ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ac4:	89ab      	ldrh	r3, [r5, #12]
   82ac6:	f04f 30ff 	mov.w	r0, #4294967295
   82aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82ace:	81ab      	strh	r3, [r5, #12]
   82ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ad4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82ad6:	2a00      	cmp	r2, #0
   82ad8:	dca2      	bgt.n	82a20 <__sflush_r+0x1c>
   82ada:	e7f0      	b.n	82abe <__sflush_r+0xba>
   82adc:	2301      	movs	r3, #1
   82ade:	4640      	mov	r0, r8
   82ae0:	69e9      	ldr	r1, [r5, #28]
   82ae2:	47a0      	blx	r4
   82ae4:	1c43      	adds	r3, r0, #1
   82ae6:	4602      	mov	r2, r0
   82ae8:	d01e      	beq.n	82b28 <__sflush_r+0x124>
   82aea:	89ab      	ldrh	r3, [r5, #12]
   82aec:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82aee:	e7a6      	b.n	82a3e <__sflush_r+0x3a>
   82af0:	f8d8 3000 	ldr.w	r3, [r8]
   82af4:	b95b      	cbnz	r3, 82b0e <__sflush_r+0x10a>
   82af6:	89aa      	ldrh	r2, [r5, #12]
   82af8:	6929      	ldr	r1, [r5, #16]
   82afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82afe:	b292      	uxth	r2, r2
   82b00:	606b      	str	r3, [r5, #4]
   82b02:	04d3      	lsls	r3, r2, #19
   82b04:	81aa      	strh	r2, [r5, #12]
   82b06:	6029      	str	r1, [r5, #0]
   82b08:	d5b2      	bpl.n	82a70 <__sflush_r+0x6c>
   82b0a:	6528      	str	r0, [r5, #80]	; 0x50
   82b0c:	e7b0      	b.n	82a70 <__sflush_r+0x6c>
   82b0e:	2b1d      	cmp	r3, #29
   82b10:	d001      	beq.n	82b16 <__sflush_r+0x112>
   82b12:	2b16      	cmp	r3, #22
   82b14:	d113      	bne.n	82b3e <__sflush_r+0x13a>
   82b16:	89a9      	ldrh	r1, [r5, #12]
   82b18:	692b      	ldr	r3, [r5, #16]
   82b1a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   82b1e:	2200      	movs	r2, #0
   82b20:	81a9      	strh	r1, [r5, #12]
   82b22:	602b      	str	r3, [r5, #0]
   82b24:	606a      	str	r2, [r5, #4]
   82b26:	e7a3      	b.n	82a70 <__sflush_r+0x6c>
   82b28:	f8d8 3000 	ldr.w	r3, [r8]
   82b2c:	2b00      	cmp	r3, #0
   82b2e:	d0dc      	beq.n	82aea <__sflush_r+0xe6>
   82b30:	2b1d      	cmp	r3, #29
   82b32:	d001      	beq.n	82b38 <__sflush_r+0x134>
   82b34:	2b16      	cmp	r3, #22
   82b36:	d1c5      	bne.n	82ac4 <__sflush_r+0xc0>
   82b38:	f8c8 6000 	str.w	r6, [r8]
   82b3c:	e7bf      	b.n	82abe <__sflush_r+0xba>
   82b3e:	89ab      	ldrh	r3, [r5, #12]
   82b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82b44:	81ab      	strh	r3, [r5, #12]
   82b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b4a:	bf00      	nop

00082b4c <_fflush_r>:
   82b4c:	b510      	push	{r4, lr}
   82b4e:	4604      	mov	r4, r0
   82b50:	b082      	sub	sp, #8
   82b52:	b108      	cbz	r0, 82b58 <_fflush_r+0xc>
   82b54:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82b56:	b153      	cbz	r3, 82b6e <_fflush_r+0x22>
   82b58:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82b5c:	b908      	cbnz	r0, 82b62 <_fflush_r+0x16>
   82b5e:	b002      	add	sp, #8
   82b60:	bd10      	pop	{r4, pc}
   82b62:	4620      	mov	r0, r4
   82b64:	b002      	add	sp, #8
   82b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82b6a:	f7ff bf4b 	b.w	82a04 <__sflush_r>
   82b6e:	9101      	str	r1, [sp, #4]
   82b70:	f000 f808 	bl	82b84 <__sinit>
   82b74:	9901      	ldr	r1, [sp, #4]
   82b76:	e7ef      	b.n	82b58 <_fflush_r+0xc>

00082b78 <_cleanup_r>:
   82b78:	4901      	ldr	r1, [pc, #4]	; (82b80 <_cleanup_r+0x8>)
   82b7a:	f000 bb9f 	b.w	832bc <_fwalk>
   82b7e:	bf00      	nop
   82b80:	0008423d 	.word	0x0008423d

00082b84 <__sinit>:
   82b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82b88:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82b8a:	b083      	sub	sp, #12
   82b8c:	4607      	mov	r7, r0
   82b8e:	2c00      	cmp	r4, #0
   82b90:	d165      	bne.n	82c5e <__sinit+0xda>
   82b92:	687d      	ldr	r5, [r7, #4]
   82b94:	4833      	ldr	r0, [pc, #204]	; (82c64 <__sinit+0xe0>)
   82b96:	2304      	movs	r3, #4
   82b98:	2103      	movs	r1, #3
   82b9a:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82b9e:	63f8      	str	r0, [r7, #60]	; 0x3c
   82ba0:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82ba4:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82ba8:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82bac:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82bb0:	81ab      	strh	r3, [r5, #12]
   82bb2:	602c      	str	r4, [r5, #0]
   82bb4:	606c      	str	r4, [r5, #4]
   82bb6:	60ac      	str	r4, [r5, #8]
   82bb8:	666c      	str	r4, [r5, #100]	; 0x64
   82bba:	81ec      	strh	r4, [r5, #14]
   82bbc:	612c      	str	r4, [r5, #16]
   82bbe:	616c      	str	r4, [r5, #20]
   82bc0:	61ac      	str	r4, [r5, #24]
   82bc2:	4621      	mov	r1, r4
   82bc4:	2208      	movs	r2, #8
   82bc6:	f7fe fed3 	bl	81970 <memset>
   82bca:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82c68 <__sinit+0xe4>
   82bce:	68be      	ldr	r6, [r7, #8]
   82bd0:	f8df a098 	ldr.w	sl, [pc, #152]	; 82c6c <__sinit+0xe8>
   82bd4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82c70 <__sinit+0xec>
   82bd8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82c74 <__sinit+0xf0>
   82bdc:	2301      	movs	r3, #1
   82bde:	2209      	movs	r2, #9
   82be0:	61ed      	str	r5, [r5, #28]
   82be2:	f8c5 b020 	str.w	fp, [r5, #32]
   82be6:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82bea:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82bee:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82bf2:	4621      	mov	r1, r4
   82bf4:	81f3      	strh	r3, [r6, #14]
   82bf6:	81b2      	strh	r2, [r6, #12]
   82bf8:	6034      	str	r4, [r6, #0]
   82bfa:	6074      	str	r4, [r6, #4]
   82bfc:	60b4      	str	r4, [r6, #8]
   82bfe:	6674      	str	r4, [r6, #100]	; 0x64
   82c00:	6134      	str	r4, [r6, #16]
   82c02:	6174      	str	r4, [r6, #20]
   82c04:	61b4      	str	r4, [r6, #24]
   82c06:	2208      	movs	r2, #8
   82c08:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82c0c:	9301      	str	r3, [sp, #4]
   82c0e:	f7fe feaf 	bl	81970 <memset>
   82c12:	68fd      	ldr	r5, [r7, #12]
   82c14:	2012      	movs	r0, #18
   82c16:	2202      	movs	r2, #2
   82c18:	61f6      	str	r6, [r6, #28]
   82c1a:	f8c6 b020 	str.w	fp, [r6, #32]
   82c1e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82c22:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82c26:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82c2a:	4621      	mov	r1, r4
   82c2c:	81a8      	strh	r0, [r5, #12]
   82c2e:	81ea      	strh	r2, [r5, #14]
   82c30:	602c      	str	r4, [r5, #0]
   82c32:	606c      	str	r4, [r5, #4]
   82c34:	60ac      	str	r4, [r5, #8]
   82c36:	666c      	str	r4, [r5, #100]	; 0x64
   82c38:	612c      	str	r4, [r5, #16]
   82c3a:	616c      	str	r4, [r5, #20]
   82c3c:	61ac      	str	r4, [r5, #24]
   82c3e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82c42:	2208      	movs	r2, #8
   82c44:	f7fe fe94 	bl	81970 <memset>
   82c48:	9b01      	ldr	r3, [sp, #4]
   82c4a:	61ed      	str	r5, [r5, #28]
   82c4c:	f8c5 b020 	str.w	fp, [r5, #32]
   82c50:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82c54:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82c58:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82c5c:	63bb      	str	r3, [r7, #56]	; 0x38
   82c5e:	b003      	add	sp, #12
   82c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c64:	00082b79 	.word	0x00082b79
   82c68:	00083f79 	.word	0x00083f79
   82c6c:	00083f9d 	.word	0x00083f9d
   82c70:	00083fd5 	.word	0x00083fd5
   82c74:	00083ff5 	.word	0x00083ff5

00082c78 <__sfp_lock_acquire>:
   82c78:	4770      	bx	lr
   82c7a:	bf00      	nop

00082c7c <__sfp_lock_release>:
   82c7c:	4770      	bx	lr
   82c7e:	bf00      	nop

00082c80 <__libc_fini_array>:
   82c80:	b538      	push	{r3, r4, r5, lr}
   82c82:	4d09      	ldr	r5, [pc, #36]	; (82ca8 <__libc_fini_array+0x28>)
   82c84:	4c09      	ldr	r4, [pc, #36]	; (82cac <__libc_fini_array+0x2c>)
   82c86:	1b64      	subs	r4, r4, r5
   82c88:	10a4      	asrs	r4, r4, #2
   82c8a:	bf18      	it	ne
   82c8c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82c90:	d005      	beq.n	82c9e <__libc_fini_array+0x1e>
   82c92:	3c01      	subs	r4, #1
   82c94:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82c98:	4798      	blx	r3
   82c9a:	2c00      	cmp	r4, #0
   82c9c:	d1f9      	bne.n	82c92 <__libc_fini_array+0x12>
   82c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82ca2:	f001 bed9 	b.w	84a58 <_fini>
   82ca6:	bf00      	nop
   82ca8:	00084a64 	.word	0x00084a64
   82cac:	00084a68 	.word	0x00084a68

00082cb0 <_fputwc_r>:
   82cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82cb4:	8993      	ldrh	r3, [r2, #12]
   82cb6:	460f      	mov	r7, r1
   82cb8:	0499      	lsls	r1, r3, #18
   82cba:	b082      	sub	sp, #8
   82cbc:	4614      	mov	r4, r2
   82cbe:	4680      	mov	r8, r0
   82cc0:	d406      	bmi.n	82cd0 <_fputwc_r+0x20>
   82cc2:	6e52      	ldr	r2, [r2, #100]	; 0x64
   82cc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82cc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82ccc:	81a3      	strh	r3, [r4, #12]
   82cce:	6662      	str	r2, [r4, #100]	; 0x64
   82cd0:	f000 fb1c 	bl	8330c <__locale_mb_cur_max>
   82cd4:	2801      	cmp	r0, #1
   82cd6:	d03e      	beq.n	82d56 <_fputwc_r+0xa6>
   82cd8:	463a      	mov	r2, r7
   82cda:	4640      	mov	r0, r8
   82cdc:	a901      	add	r1, sp, #4
   82cde:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82ce2:	f001 f9bb 	bl	8405c <_wcrtomb_r>
   82ce6:	1c42      	adds	r2, r0, #1
   82ce8:	4606      	mov	r6, r0
   82cea:	d02d      	beq.n	82d48 <_fputwc_r+0x98>
   82cec:	2800      	cmp	r0, #0
   82cee:	d03a      	beq.n	82d66 <_fputwc_r+0xb6>
   82cf0:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82cf4:	2500      	movs	r5, #0
   82cf6:	e009      	b.n	82d0c <_fputwc_r+0x5c>
   82cf8:	6823      	ldr	r3, [r4, #0]
   82cfa:	7019      	strb	r1, [r3, #0]
   82cfc:	6823      	ldr	r3, [r4, #0]
   82cfe:	3301      	adds	r3, #1
   82d00:	6023      	str	r3, [r4, #0]
   82d02:	3501      	adds	r5, #1
   82d04:	42b5      	cmp	r5, r6
   82d06:	d22e      	bcs.n	82d66 <_fputwc_r+0xb6>
   82d08:	ab01      	add	r3, sp, #4
   82d0a:	5ce9      	ldrb	r1, [r5, r3]
   82d0c:	68a3      	ldr	r3, [r4, #8]
   82d0e:	3b01      	subs	r3, #1
   82d10:	2b00      	cmp	r3, #0
   82d12:	60a3      	str	r3, [r4, #8]
   82d14:	daf0      	bge.n	82cf8 <_fputwc_r+0x48>
   82d16:	69a2      	ldr	r2, [r4, #24]
   82d18:	4293      	cmp	r3, r2
   82d1a:	db06      	blt.n	82d2a <_fputwc_r+0x7a>
   82d1c:	6823      	ldr	r3, [r4, #0]
   82d1e:	7019      	strb	r1, [r3, #0]
   82d20:	6823      	ldr	r3, [r4, #0]
   82d22:	7819      	ldrb	r1, [r3, #0]
   82d24:	3301      	adds	r3, #1
   82d26:	290a      	cmp	r1, #10
   82d28:	d1ea      	bne.n	82d00 <_fputwc_r+0x50>
   82d2a:	4640      	mov	r0, r8
   82d2c:	4622      	mov	r2, r4
   82d2e:	f7ff fda3 	bl	82878 <__swbuf_r>
   82d32:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   82d36:	4258      	negs	r0, r3
   82d38:	4158      	adcs	r0, r3
   82d3a:	2800      	cmp	r0, #0
   82d3c:	d0e1      	beq.n	82d02 <_fputwc_r+0x52>
   82d3e:	f04f 30ff 	mov.w	r0, #4294967295
   82d42:	b002      	add	sp, #8
   82d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d48:	89a3      	ldrh	r3, [r4, #12]
   82d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82d4e:	81a3      	strh	r3, [r4, #12]
   82d50:	b002      	add	sp, #8
   82d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d56:	1e7b      	subs	r3, r7, #1
   82d58:	2bfe      	cmp	r3, #254	; 0xfe
   82d5a:	d8bd      	bhi.n	82cd8 <_fputwc_r+0x28>
   82d5c:	b2f9      	uxtb	r1, r7
   82d5e:	4606      	mov	r6, r0
   82d60:	f88d 1004 	strb.w	r1, [sp, #4]
   82d64:	e7c6      	b.n	82cf4 <_fputwc_r+0x44>
   82d66:	4638      	mov	r0, r7
   82d68:	b002      	add	sp, #8
   82d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d6e:	bf00      	nop

00082d70 <_malloc_trim_r>:
   82d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82d72:	4d23      	ldr	r5, [pc, #140]	; (82e00 <_malloc_trim_r+0x90>)
   82d74:	460f      	mov	r7, r1
   82d76:	4604      	mov	r4, r0
   82d78:	f000 ff08 	bl	83b8c <__malloc_lock>
   82d7c:	68ab      	ldr	r3, [r5, #8]
   82d7e:	685e      	ldr	r6, [r3, #4]
   82d80:	f026 0603 	bic.w	r6, r6, #3
   82d84:	1bf1      	subs	r1, r6, r7
   82d86:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82d8a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82d8e:	f021 010f 	bic.w	r1, r1, #15
   82d92:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82d96:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82d9a:	db07      	blt.n	82dac <_malloc_trim_r+0x3c>
   82d9c:	4620      	mov	r0, r4
   82d9e:	2100      	movs	r1, #0
   82da0:	f001 f8d8 	bl	83f54 <_sbrk_r>
   82da4:	68ab      	ldr	r3, [r5, #8]
   82da6:	4433      	add	r3, r6
   82da8:	4298      	cmp	r0, r3
   82daa:	d004      	beq.n	82db6 <_malloc_trim_r+0x46>
   82dac:	4620      	mov	r0, r4
   82dae:	f000 feef 	bl	83b90 <__malloc_unlock>
   82db2:	2000      	movs	r0, #0
   82db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82db6:	4620      	mov	r0, r4
   82db8:	4279      	negs	r1, r7
   82dba:	f001 f8cb 	bl	83f54 <_sbrk_r>
   82dbe:	3001      	adds	r0, #1
   82dc0:	d00d      	beq.n	82dde <_malloc_trim_r+0x6e>
   82dc2:	4b10      	ldr	r3, [pc, #64]	; (82e04 <_malloc_trim_r+0x94>)
   82dc4:	68aa      	ldr	r2, [r5, #8]
   82dc6:	6819      	ldr	r1, [r3, #0]
   82dc8:	1bf6      	subs	r6, r6, r7
   82dca:	f046 0601 	orr.w	r6, r6, #1
   82dce:	4620      	mov	r0, r4
   82dd0:	1bc9      	subs	r1, r1, r7
   82dd2:	6056      	str	r6, [r2, #4]
   82dd4:	6019      	str	r1, [r3, #0]
   82dd6:	f000 fedb 	bl	83b90 <__malloc_unlock>
   82dda:	2001      	movs	r0, #1
   82ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82dde:	4620      	mov	r0, r4
   82de0:	2100      	movs	r1, #0
   82de2:	f001 f8b7 	bl	83f54 <_sbrk_r>
   82de6:	68ab      	ldr	r3, [r5, #8]
   82de8:	1ac2      	subs	r2, r0, r3
   82dea:	2a0f      	cmp	r2, #15
   82dec:	ddde      	ble.n	82dac <_malloc_trim_r+0x3c>
   82dee:	4d06      	ldr	r5, [pc, #24]	; (82e08 <_malloc_trim_r+0x98>)
   82df0:	4904      	ldr	r1, [pc, #16]	; (82e04 <_malloc_trim_r+0x94>)
   82df2:	682d      	ldr	r5, [r5, #0]
   82df4:	f042 0201 	orr.w	r2, r2, #1
   82df8:	1b40      	subs	r0, r0, r5
   82dfa:	605a      	str	r2, [r3, #4]
   82dfc:	6008      	str	r0, [r1, #0]
   82dfe:	e7d5      	b.n	82dac <_malloc_trim_r+0x3c>
   82e00:	20070588 	.word	0x20070588
   82e04:	20070ad8 	.word	0x20070ad8
   82e08:	20070994 	.word	0x20070994

00082e0c <_free_r>:
   82e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82e10:	460d      	mov	r5, r1
   82e12:	4606      	mov	r6, r0
   82e14:	2900      	cmp	r1, #0
   82e16:	d055      	beq.n	82ec4 <_free_r+0xb8>
   82e18:	f000 feb8 	bl	83b8c <__malloc_lock>
   82e1c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82e20:	f8df c170 	ldr.w	ip, [pc, #368]	; 82f94 <_free_r+0x188>
   82e24:	f1a5 0408 	sub.w	r4, r5, #8
   82e28:	f021 0301 	bic.w	r3, r1, #1
   82e2c:	18e2      	adds	r2, r4, r3
   82e2e:	f8dc 0008 	ldr.w	r0, [ip, #8]
   82e32:	6857      	ldr	r7, [r2, #4]
   82e34:	4290      	cmp	r0, r2
   82e36:	f027 0703 	bic.w	r7, r7, #3
   82e3a:	d068      	beq.n	82f0e <_free_r+0x102>
   82e3c:	f011 0101 	ands.w	r1, r1, #1
   82e40:	6057      	str	r7, [r2, #4]
   82e42:	d032      	beq.n	82eaa <_free_r+0x9e>
   82e44:	2100      	movs	r1, #0
   82e46:	19d0      	adds	r0, r2, r7
   82e48:	6840      	ldr	r0, [r0, #4]
   82e4a:	07c0      	lsls	r0, r0, #31
   82e4c:	d406      	bmi.n	82e5c <_free_r+0x50>
   82e4e:	443b      	add	r3, r7
   82e50:	6890      	ldr	r0, [r2, #8]
   82e52:	2900      	cmp	r1, #0
   82e54:	d04d      	beq.n	82ef2 <_free_r+0xe6>
   82e56:	68d2      	ldr	r2, [r2, #12]
   82e58:	60c2      	str	r2, [r0, #12]
   82e5a:	6090      	str	r0, [r2, #8]
   82e5c:	f043 0201 	orr.w	r2, r3, #1
   82e60:	6062      	str	r2, [r4, #4]
   82e62:	50e3      	str	r3, [r4, r3]
   82e64:	b9e1      	cbnz	r1, 82ea0 <_free_r+0x94>
   82e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82e6a:	d32d      	bcc.n	82ec8 <_free_r+0xbc>
   82e6c:	0a5a      	lsrs	r2, r3, #9
   82e6e:	2a04      	cmp	r2, #4
   82e70:	d869      	bhi.n	82f46 <_free_r+0x13a>
   82e72:	0998      	lsrs	r0, r3, #6
   82e74:	3038      	adds	r0, #56	; 0x38
   82e76:	0041      	lsls	r1, r0, #1
   82e78:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82e7c:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82e80:	4944      	ldr	r1, [pc, #272]	; (82f94 <_free_r+0x188>)
   82e82:	4562      	cmp	r2, ip
   82e84:	d065      	beq.n	82f52 <_free_r+0x146>
   82e86:	6851      	ldr	r1, [r2, #4]
   82e88:	f021 0103 	bic.w	r1, r1, #3
   82e8c:	428b      	cmp	r3, r1
   82e8e:	d202      	bcs.n	82e96 <_free_r+0x8a>
   82e90:	6892      	ldr	r2, [r2, #8]
   82e92:	4594      	cmp	ip, r2
   82e94:	d1f7      	bne.n	82e86 <_free_r+0x7a>
   82e96:	68d3      	ldr	r3, [r2, #12]
   82e98:	60e3      	str	r3, [r4, #12]
   82e9a:	60a2      	str	r2, [r4, #8]
   82e9c:	609c      	str	r4, [r3, #8]
   82e9e:	60d4      	str	r4, [r2, #12]
   82ea0:	4630      	mov	r0, r6
   82ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82ea6:	f000 be73 	b.w	83b90 <__malloc_unlock>
   82eaa:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82eae:	f10c 0808 	add.w	r8, ip, #8
   82eb2:	1b64      	subs	r4, r4, r5
   82eb4:	68a0      	ldr	r0, [r4, #8]
   82eb6:	442b      	add	r3, r5
   82eb8:	4540      	cmp	r0, r8
   82eba:	d042      	beq.n	82f42 <_free_r+0x136>
   82ebc:	68e5      	ldr	r5, [r4, #12]
   82ebe:	60c5      	str	r5, [r0, #12]
   82ec0:	60a8      	str	r0, [r5, #8]
   82ec2:	e7c0      	b.n	82e46 <_free_r+0x3a>
   82ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ec8:	08db      	lsrs	r3, r3, #3
   82eca:	109a      	asrs	r2, r3, #2
   82ecc:	2001      	movs	r0, #1
   82ece:	4090      	lsls	r0, r2
   82ed0:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82ed4:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82ed8:	689a      	ldr	r2, [r3, #8]
   82eda:	4301      	orrs	r1, r0
   82edc:	60a2      	str	r2, [r4, #8]
   82ede:	60e3      	str	r3, [r4, #12]
   82ee0:	f8cc 1004 	str.w	r1, [ip, #4]
   82ee4:	4630      	mov	r0, r6
   82ee6:	609c      	str	r4, [r3, #8]
   82ee8:	60d4      	str	r4, [r2, #12]
   82eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82eee:	f000 be4f 	b.w	83b90 <__malloc_unlock>
   82ef2:	4d29      	ldr	r5, [pc, #164]	; (82f98 <_free_r+0x18c>)
   82ef4:	42a8      	cmp	r0, r5
   82ef6:	d1ae      	bne.n	82e56 <_free_r+0x4a>
   82ef8:	f043 0201 	orr.w	r2, r3, #1
   82efc:	f8cc 4014 	str.w	r4, [ip, #20]
   82f00:	f8cc 4010 	str.w	r4, [ip, #16]
   82f04:	60e0      	str	r0, [r4, #12]
   82f06:	60a0      	str	r0, [r4, #8]
   82f08:	6062      	str	r2, [r4, #4]
   82f0a:	50e3      	str	r3, [r4, r3]
   82f0c:	e7c8      	b.n	82ea0 <_free_r+0x94>
   82f0e:	441f      	add	r7, r3
   82f10:	07cb      	lsls	r3, r1, #31
   82f12:	d407      	bmi.n	82f24 <_free_r+0x118>
   82f14:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82f18:	1a64      	subs	r4, r4, r1
   82f1a:	68e3      	ldr	r3, [r4, #12]
   82f1c:	68a2      	ldr	r2, [r4, #8]
   82f1e:	440f      	add	r7, r1
   82f20:	60d3      	str	r3, [r2, #12]
   82f22:	609a      	str	r2, [r3, #8]
   82f24:	4b1d      	ldr	r3, [pc, #116]	; (82f9c <_free_r+0x190>)
   82f26:	f047 0201 	orr.w	r2, r7, #1
   82f2a:	681b      	ldr	r3, [r3, #0]
   82f2c:	6062      	str	r2, [r4, #4]
   82f2e:	429f      	cmp	r7, r3
   82f30:	f8cc 4008 	str.w	r4, [ip, #8]
   82f34:	d3b4      	bcc.n	82ea0 <_free_r+0x94>
   82f36:	4b1a      	ldr	r3, [pc, #104]	; (82fa0 <_free_r+0x194>)
   82f38:	4630      	mov	r0, r6
   82f3a:	6819      	ldr	r1, [r3, #0]
   82f3c:	f7ff ff18 	bl	82d70 <_malloc_trim_r>
   82f40:	e7ae      	b.n	82ea0 <_free_r+0x94>
   82f42:	2101      	movs	r1, #1
   82f44:	e77f      	b.n	82e46 <_free_r+0x3a>
   82f46:	2a14      	cmp	r2, #20
   82f48:	d80b      	bhi.n	82f62 <_free_r+0x156>
   82f4a:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   82f4e:	0041      	lsls	r1, r0, #1
   82f50:	e792      	b.n	82e78 <_free_r+0x6c>
   82f52:	1080      	asrs	r0, r0, #2
   82f54:	2501      	movs	r5, #1
   82f56:	4085      	lsls	r5, r0
   82f58:	6848      	ldr	r0, [r1, #4]
   82f5a:	4613      	mov	r3, r2
   82f5c:	4328      	orrs	r0, r5
   82f5e:	6048      	str	r0, [r1, #4]
   82f60:	e79a      	b.n	82e98 <_free_r+0x8c>
   82f62:	2a54      	cmp	r2, #84	; 0x54
   82f64:	d803      	bhi.n	82f6e <_free_r+0x162>
   82f66:	0b18      	lsrs	r0, r3, #12
   82f68:	306e      	adds	r0, #110	; 0x6e
   82f6a:	0041      	lsls	r1, r0, #1
   82f6c:	e784      	b.n	82e78 <_free_r+0x6c>
   82f6e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82f72:	d803      	bhi.n	82f7c <_free_r+0x170>
   82f74:	0bd8      	lsrs	r0, r3, #15
   82f76:	3077      	adds	r0, #119	; 0x77
   82f78:	0041      	lsls	r1, r0, #1
   82f7a:	e77d      	b.n	82e78 <_free_r+0x6c>
   82f7c:	f240 5154 	movw	r1, #1364	; 0x554
   82f80:	428a      	cmp	r2, r1
   82f82:	d803      	bhi.n	82f8c <_free_r+0x180>
   82f84:	0c98      	lsrs	r0, r3, #18
   82f86:	307c      	adds	r0, #124	; 0x7c
   82f88:	0041      	lsls	r1, r0, #1
   82f8a:	e775      	b.n	82e78 <_free_r+0x6c>
   82f8c:	21fc      	movs	r1, #252	; 0xfc
   82f8e:	207e      	movs	r0, #126	; 0x7e
   82f90:	e772      	b.n	82e78 <_free_r+0x6c>
   82f92:	bf00      	nop
   82f94:	20070588 	.word	0x20070588
   82f98:	20070590 	.word	0x20070590
   82f9c:	20070990 	.word	0x20070990
   82fa0:	20070ad4 	.word	0x20070ad4

00082fa4 <__sfvwrite_r>:
   82fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82fa8:	6893      	ldr	r3, [r2, #8]
   82faa:	b083      	sub	sp, #12
   82fac:	4616      	mov	r6, r2
   82fae:	4681      	mov	r9, r0
   82fb0:	460c      	mov	r4, r1
   82fb2:	b32b      	cbz	r3, 83000 <__sfvwrite_r+0x5c>
   82fb4:	898b      	ldrh	r3, [r1, #12]
   82fb6:	0719      	lsls	r1, r3, #28
   82fb8:	d526      	bpl.n	83008 <__sfvwrite_r+0x64>
   82fba:	6922      	ldr	r2, [r4, #16]
   82fbc:	b322      	cbz	r2, 83008 <__sfvwrite_r+0x64>
   82fbe:	f003 0202 	and.w	r2, r3, #2
   82fc2:	b292      	uxth	r2, r2
   82fc4:	6835      	ldr	r5, [r6, #0]
   82fc6:	2a00      	cmp	r2, #0
   82fc8:	d02c      	beq.n	83024 <__sfvwrite_r+0x80>
   82fca:	f04f 0a00 	mov.w	sl, #0
   82fce:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 832b8 <__sfvwrite_r+0x314>
   82fd2:	46d0      	mov	r8, sl
   82fd4:	45d8      	cmp	r8, fp
   82fd6:	bf34      	ite	cc
   82fd8:	4643      	movcc	r3, r8
   82fda:	465b      	movcs	r3, fp
   82fdc:	4652      	mov	r2, sl
   82fde:	4648      	mov	r0, r9
   82fe0:	f1b8 0f00 	cmp.w	r8, #0
   82fe4:	d04f      	beq.n	83086 <__sfvwrite_r+0xe2>
   82fe6:	69e1      	ldr	r1, [r4, #28]
   82fe8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82fea:	47b8      	blx	r7
   82fec:	2800      	cmp	r0, #0
   82fee:	dd56      	ble.n	8309e <__sfvwrite_r+0xfa>
   82ff0:	68b3      	ldr	r3, [r6, #8]
   82ff2:	4482      	add	sl, r0
   82ff4:	1a1b      	subs	r3, r3, r0
   82ff6:	ebc0 0808 	rsb	r8, r0, r8
   82ffa:	60b3      	str	r3, [r6, #8]
   82ffc:	2b00      	cmp	r3, #0
   82ffe:	d1e9      	bne.n	82fd4 <__sfvwrite_r+0x30>
   83000:	2000      	movs	r0, #0
   83002:	b003      	add	sp, #12
   83004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83008:	4648      	mov	r0, r9
   8300a:	4621      	mov	r1, r4
   8300c:	f7ff fc88 	bl	82920 <__swsetup_r>
   83010:	2800      	cmp	r0, #0
   83012:	f040 8148 	bne.w	832a6 <__sfvwrite_r+0x302>
   83016:	89a3      	ldrh	r3, [r4, #12]
   83018:	6835      	ldr	r5, [r6, #0]
   8301a:	f003 0202 	and.w	r2, r3, #2
   8301e:	b292      	uxth	r2, r2
   83020:	2a00      	cmp	r2, #0
   83022:	d1d2      	bne.n	82fca <__sfvwrite_r+0x26>
   83024:	f013 0a01 	ands.w	sl, r3, #1
   83028:	d142      	bne.n	830b0 <__sfvwrite_r+0x10c>
   8302a:	46d0      	mov	r8, sl
   8302c:	f1b8 0f00 	cmp.w	r8, #0
   83030:	d023      	beq.n	8307a <__sfvwrite_r+0xd6>
   83032:	059a      	lsls	r2, r3, #22
   83034:	68a7      	ldr	r7, [r4, #8]
   83036:	d576      	bpl.n	83126 <__sfvwrite_r+0x182>
   83038:	45b8      	cmp	r8, r7
   8303a:	f0c0 80a4 	bcc.w	83186 <__sfvwrite_r+0x1e2>
   8303e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83042:	f040 80b2 	bne.w	831aa <__sfvwrite_r+0x206>
   83046:	6820      	ldr	r0, [r4, #0]
   83048:	46bb      	mov	fp, r7
   8304a:	4651      	mov	r1, sl
   8304c:	465a      	mov	r2, fp
   8304e:	f000 fd37 	bl	83ac0 <memmove>
   83052:	68a2      	ldr	r2, [r4, #8]
   83054:	6821      	ldr	r1, [r4, #0]
   83056:	1bd2      	subs	r2, r2, r7
   83058:	eb01 030b 	add.w	r3, r1, fp
   8305c:	60a2      	str	r2, [r4, #8]
   8305e:	6023      	str	r3, [r4, #0]
   83060:	4642      	mov	r2, r8
   83062:	68b3      	ldr	r3, [r6, #8]
   83064:	4492      	add	sl, r2
   83066:	1a9b      	subs	r3, r3, r2
   83068:	ebc2 0808 	rsb	r8, r2, r8
   8306c:	60b3      	str	r3, [r6, #8]
   8306e:	2b00      	cmp	r3, #0
   83070:	d0c6      	beq.n	83000 <__sfvwrite_r+0x5c>
   83072:	89a3      	ldrh	r3, [r4, #12]
   83074:	f1b8 0f00 	cmp.w	r8, #0
   83078:	d1db      	bne.n	83032 <__sfvwrite_r+0x8e>
   8307a:	f8d5 a000 	ldr.w	sl, [r5]
   8307e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83082:	3508      	adds	r5, #8
   83084:	e7d2      	b.n	8302c <__sfvwrite_r+0x88>
   83086:	f8d5 a000 	ldr.w	sl, [r5]
   8308a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8308e:	3508      	adds	r5, #8
   83090:	e7a0      	b.n	82fd4 <__sfvwrite_r+0x30>
   83092:	4648      	mov	r0, r9
   83094:	4621      	mov	r1, r4
   83096:	f7ff fd59 	bl	82b4c <_fflush_r>
   8309a:	2800      	cmp	r0, #0
   8309c:	d059      	beq.n	83152 <__sfvwrite_r+0x1ae>
   8309e:	89a3      	ldrh	r3, [r4, #12]
   830a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   830a4:	f04f 30ff 	mov.w	r0, #4294967295
   830a8:	81a3      	strh	r3, [r4, #12]
   830aa:	b003      	add	sp, #12
   830ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830b0:	4692      	mov	sl, r2
   830b2:	9201      	str	r2, [sp, #4]
   830b4:	4693      	mov	fp, r2
   830b6:	4690      	mov	r8, r2
   830b8:	f1b8 0f00 	cmp.w	r8, #0
   830bc:	d02b      	beq.n	83116 <__sfvwrite_r+0x172>
   830be:	9f01      	ldr	r7, [sp, #4]
   830c0:	2f00      	cmp	r7, #0
   830c2:	d064      	beq.n	8318e <__sfvwrite_r+0x1ea>
   830c4:	6820      	ldr	r0, [r4, #0]
   830c6:	6921      	ldr	r1, [r4, #16]
   830c8:	45c2      	cmp	sl, r8
   830ca:	bf34      	ite	cc
   830cc:	4653      	movcc	r3, sl
   830ce:	4643      	movcs	r3, r8
   830d0:	4288      	cmp	r0, r1
   830d2:	461f      	mov	r7, r3
   830d4:	f8d4 c008 	ldr.w	ip, [r4, #8]
   830d8:	6962      	ldr	r2, [r4, #20]
   830da:	d903      	bls.n	830e4 <__sfvwrite_r+0x140>
   830dc:	4494      	add	ip, r2
   830de:	4563      	cmp	r3, ip
   830e0:	f300 80ae 	bgt.w	83240 <__sfvwrite_r+0x29c>
   830e4:	4293      	cmp	r3, r2
   830e6:	db36      	blt.n	83156 <__sfvwrite_r+0x1b2>
   830e8:	4613      	mov	r3, r2
   830ea:	6a67      	ldr	r7, [r4, #36]	; 0x24
   830ec:	4648      	mov	r0, r9
   830ee:	69e1      	ldr	r1, [r4, #28]
   830f0:	465a      	mov	r2, fp
   830f2:	47b8      	blx	r7
   830f4:	1e07      	subs	r7, r0, #0
   830f6:	ddd2      	ble.n	8309e <__sfvwrite_r+0xfa>
   830f8:	ebba 0a07 	subs.w	sl, sl, r7
   830fc:	d03a      	beq.n	83174 <__sfvwrite_r+0x1d0>
   830fe:	68b3      	ldr	r3, [r6, #8]
   83100:	44bb      	add	fp, r7
   83102:	1bdb      	subs	r3, r3, r7
   83104:	ebc7 0808 	rsb	r8, r7, r8
   83108:	60b3      	str	r3, [r6, #8]
   8310a:	2b00      	cmp	r3, #0
   8310c:	f43f af78 	beq.w	83000 <__sfvwrite_r+0x5c>
   83110:	f1b8 0f00 	cmp.w	r8, #0
   83114:	d1d3      	bne.n	830be <__sfvwrite_r+0x11a>
   83116:	2700      	movs	r7, #0
   83118:	f8d5 b000 	ldr.w	fp, [r5]
   8311c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83120:	9701      	str	r7, [sp, #4]
   83122:	3508      	adds	r5, #8
   83124:	e7c8      	b.n	830b8 <__sfvwrite_r+0x114>
   83126:	6820      	ldr	r0, [r4, #0]
   83128:	6923      	ldr	r3, [r4, #16]
   8312a:	4298      	cmp	r0, r3
   8312c:	d802      	bhi.n	83134 <__sfvwrite_r+0x190>
   8312e:	6963      	ldr	r3, [r4, #20]
   83130:	4598      	cmp	r8, r3
   83132:	d272      	bcs.n	8321a <__sfvwrite_r+0x276>
   83134:	45b8      	cmp	r8, r7
   83136:	bf38      	it	cc
   83138:	4647      	movcc	r7, r8
   8313a:	463a      	mov	r2, r7
   8313c:	4651      	mov	r1, sl
   8313e:	f000 fcbf 	bl	83ac0 <memmove>
   83142:	68a3      	ldr	r3, [r4, #8]
   83144:	6822      	ldr	r2, [r4, #0]
   83146:	1bdb      	subs	r3, r3, r7
   83148:	443a      	add	r2, r7
   8314a:	60a3      	str	r3, [r4, #8]
   8314c:	6022      	str	r2, [r4, #0]
   8314e:	2b00      	cmp	r3, #0
   83150:	d09f      	beq.n	83092 <__sfvwrite_r+0xee>
   83152:	463a      	mov	r2, r7
   83154:	e785      	b.n	83062 <__sfvwrite_r+0xbe>
   83156:	461a      	mov	r2, r3
   83158:	4659      	mov	r1, fp
   8315a:	9300      	str	r3, [sp, #0]
   8315c:	f000 fcb0 	bl	83ac0 <memmove>
   83160:	9b00      	ldr	r3, [sp, #0]
   83162:	68a1      	ldr	r1, [r4, #8]
   83164:	6822      	ldr	r2, [r4, #0]
   83166:	1ac9      	subs	r1, r1, r3
   83168:	ebba 0a07 	subs.w	sl, sl, r7
   8316c:	4413      	add	r3, r2
   8316e:	60a1      	str	r1, [r4, #8]
   83170:	6023      	str	r3, [r4, #0]
   83172:	d1c4      	bne.n	830fe <__sfvwrite_r+0x15a>
   83174:	4648      	mov	r0, r9
   83176:	4621      	mov	r1, r4
   83178:	f7ff fce8 	bl	82b4c <_fflush_r>
   8317c:	2800      	cmp	r0, #0
   8317e:	d18e      	bne.n	8309e <__sfvwrite_r+0xfa>
   83180:	f8cd a004 	str.w	sl, [sp, #4]
   83184:	e7bb      	b.n	830fe <__sfvwrite_r+0x15a>
   83186:	6820      	ldr	r0, [r4, #0]
   83188:	4647      	mov	r7, r8
   8318a:	46c3      	mov	fp, r8
   8318c:	e75d      	b.n	8304a <__sfvwrite_r+0xa6>
   8318e:	4658      	mov	r0, fp
   83190:	210a      	movs	r1, #10
   83192:	4642      	mov	r2, r8
   83194:	f000 fbd4 	bl	83940 <memchr>
   83198:	2800      	cmp	r0, #0
   8319a:	d07f      	beq.n	8329c <__sfvwrite_r+0x2f8>
   8319c:	f100 0a01 	add.w	sl, r0, #1
   831a0:	2701      	movs	r7, #1
   831a2:	ebcb 0a0a 	rsb	sl, fp, sl
   831a6:	9701      	str	r7, [sp, #4]
   831a8:	e78c      	b.n	830c4 <__sfvwrite_r+0x120>
   831aa:	6822      	ldr	r2, [r4, #0]
   831ac:	6921      	ldr	r1, [r4, #16]
   831ae:	6967      	ldr	r7, [r4, #20]
   831b0:	ebc1 0c02 	rsb	ip, r1, r2
   831b4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   831b8:	f10c 0201 	add.w	r2, ip, #1
   831bc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   831c0:	4442      	add	r2, r8
   831c2:	107f      	asrs	r7, r7, #1
   831c4:	4297      	cmp	r7, r2
   831c6:	bf34      	ite	cc
   831c8:	4617      	movcc	r7, r2
   831ca:	463a      	movcs	r2, r7
   831cc:	055b      	lsls	r3, r3, #21
   831ce:	d54f      	bpl.n	83270 <__sfvwrite_r+0x2cc>
   831d0:	4611      	mov	r1, r2
   831d2:	4648      	mov	r0, r9
   831d4:	f8cd c000 	str.w	ip, [sp]
   831d8:	f000 f916 	bl	83408 <_malloc_r>
   831dc:	f8dd c000 	ldr.w	ip, [sp]
   831e0:	4683      	mov	fp, r0
   831e2:	2800      	cmp	r0, #0
   831e4:	d062      	beq.n	832ac <__sfvwrite_r+0x308>
   831e6:	4662      	mov	r2, ip
   831e8:	6921      	ldr	r1, [r4, #16]
   831ea:	f8cd c000 	str.w	ip, [sp]
   831ee:	f000 fbf1 	bl	839d4 <memcpy>
   831f2:	89a2      	ldrh	r2, [r4, #12]
   831f4:	f8dd c000 	ldr.w	ip, [sp]
   831f8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   831fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83200:	81a2      	strh	r2, [r4, #12]
   83202:	eb0b 000c 	add.w	r0, fp, ip
   83206:	ebcc 0207 	rsb	r2, ip, r7
   8320a:	f8c4 b010 	str.w	fp, [r4, #16]
   8320e:	6167      	str	r7, [r4, #20]
   83210:	6020      	str	r0, [r4, #0]
   83212:	60a2      	str	r2, [r4, #8]
   83214:	4647      	mov	r7, r8
   83216:	46c3      	mov	fp, r8
   83218:	e717      	b.n	8304a <__sfvwrite_r+0xa6>
   8321a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8321e:	4590      	cmp	r8, r2
   83220:	bf38      	it	cc
   83222:	4642      	movcc	r2, r8
   83224:	fb92 f2f3 	sdiv	r2, r2, r3
   83228:	fb02 f303 	mul.w	r3, r2, r3
   8322c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8322e:	4648      	mov	r0, r9
   83230:	69e1      	ldr	r1, [r4, #28]
   83232:	4652      	mov	r2, sl
   83234:	47b8      	blx	r7
   83236:	2800      	cmp	r0, #0
   83238:	f77f af31 	ble.w	8309e <__sfvwrite_r+0xfa>
   8323c:	4602      	mov	r2, r0
   8323e:	e710      	b.n	83062 <__sfvwrite_r+0xbe>
   83240:	4662      	mov	r2, ip
   83242:	4659      	mov	r1, fp
   83244:	f8cd c000 	str.w	ip, [sp]
   83248:	f000 fc3a 	bl	83ac0 <memmove>
   8324c:	f8dd c000 	ldr.w	ip, [sp]
   83250:	6823      	ldr	r3, [r4, #0]
   83252:	4648      	mov	r0, r9
   83254:	4463      	add	r3, ip
   83256:	6023      	str	r3, [r4, #0]
   83258:	4621      	mov	r1, r4
   8325a:	f8cd c000 	str.w	ip, [sp]
   8325e:	f7ff fc75 	bl	82b4c <_fflush_r>
   83262:	f8dd c000 	ldr.w	ip, [sp]
   83266:	2800      	cmp	r0, #0
   83268:	f47f af19 	bne.w	8309e <__sfvwrite_r+0xfa>
   8326c:	4667      	mov	r7, ip
   8326e:	e743      	b.n	830f8 <__sfvwrite_r+0x154>
   83270:	4648      	mov	r0, r9
   83272:	f8cd c000 	str.w	ip, [sp]
   83276:	f000 fc8d 	bl	83b94 <_realloc_r>
   8327a:	f8dd c000 	ldr.w	ip, [sp]
   8327e:	4683      	mov	fp, r0
   83280:	2800      	cmp	r0, #0
   83282:	d1be      	bne.n	83202 <__sfvwrite_r+0x25e>
   83284:	4648      	mov	r0, r9
   83286:	6921      	ldr	r1, [r4, #16]
   83288:	f7ff fdc0 	bl	82e0c <_free_r>
   8328c:	89a3      	ldrh	r3, [r4, #12]
   8328e:	220c      	movs	r2, #12
   83290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83294:	b29b      	uxth	r3, r3
   83296:	f8c9 2000 	str.w	r2, [r9]
   8329a:	e701      	b.n	830a0 <__sfvwrite_r+0xfc>
   8329c:	2701      	movs	r7, #1
   8329e:	f108 0a01 	add.w	sl, r8, #1
   832a2:	9701      	str	r7, [sp, #4]
   832a4:	e70e      	b.n	830c4 <__sfvwrite_r+0x120>
   832a6:	f04f 30ff 	mov.w	r0, #4294967295
   832aa:	e6aa      	b.n	83002 <__sfvwrite_r+0x5e>
   832ac:	230c      	movs	r3, #12
   832ae:	f8c9 3000 	str.w	r3, [r9]
   832b2:	89a3      	ldrh	r3, [r4, #12]
   832b4:	e6f4      	b.n	830a0 <__sfvwrite_r+0xfc>
   832b6:	bf00      	nop
   832b8:	7ffffc00 	.word	0x7ffffc00

000832bc <_fwalk>:
   832bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   832c0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   832c4:	4688      	mov	r8, r1
   832c6:	d019      	beq.n	832fc <_fwalk+0x40>
   832c8:	2600      	movs	r6, #0
   832ca:	687d      	ldr	r5, [r7, #4]
   832cc:	68bc      	ldr	r4, [r7, #8]
   832ce:	3d01      	subs	r5, #1
   832d0:	d40e      	bmi.n	832f0 <_fwalk+0x34>
   832d2:	89a3      	ldrh	r3, [r4, #12]
   832d4:	3d01      	subs	r5, #1
   832d6:	2b01      	cmp	r3, #1
   832d8:	d906      	bls.n	832e8 <_fwalk+0x2c>
   832da:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   832de:	4620      	mov	r0, r4
   832e0:	3301      	adds	r3, #1
   832e2:	d001      	beq.n	832e8 <_fwalk+0x2c>
   832e4:	47c0      	blx	r8
   832e6:	4306      	orrs	r6, r0
   832e8:	1c6b      	adds	r3, r5, #1
   832ea:	f104 0468 	add.w	r4, r4, #104	; 0x68
   832ee:	d1f0      	bne.n	832d2 <_fwalk+0x16>
   832f0:	683f      	ldr	r7, [r7, #0]
   832f2:	2f00      	cmp	r7, #0
   832f4:	d1e9      	bne.n	832ca <_fwalk+0xe>
   832f6:	4630      	mov	r0, r6
   832f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   832fc:	463e      	mov	r6, r7
   832fe:	4630      	mov	r0, r6
   83300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083304 <__locale_charset>:
   83304:	4800      	ldr	r0, [pc, #0]	; (83308 <__locale_charset+0x4>)
   83306:	4770      	bx	lr
   83308:	20070564 	.word	0x20070564

0008330c <__locale_mb_cur_max>:
   8330c:	4b01      	ldr	r3, [pc, #4]	; (83314 <__locale_mb_cur_max+0x8>)
   8330e:	6818      	ldr	r0, [r3, #0]
   83310:	4770      	bx	lr
   83312:	bf00      	nop
   83314:	20070584 	.word	0x20070584

00083318 <__smakebuf_r>:
   83318:	b5f0      	push	{r4, r5, r6, r7, lr}
   8331a:	898b      	ldrh	r3, [r1, #12]
   8331c:	b091      	sub	sp, #68	; 0x44
   8331e:	b29a      	uxth	r2, r3
   83320:	0796      	lsls	r6, r2, #30
   83322:	460c      	mov	r4, r1
   83324:	4605      	mov	r5, r0
   83326:	d437      	bmi.n	83398 <__smakebuf_r+0x80>
   83328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8332c:	2900      	cmp	r1, #0
   8332e:	db17      	blt.n	83360 <__smakebuf_r+0x48>
   83330:	aa01      	add	r2, sp, #4
   83332:	f000 ff8b 	bl	8424c <_fstat_r>
   83336:	2800      	cmp	r0, #0
   83338:	db10      	blt.n	8335c <__smakebuf_r+0x44>
   8333a:	9b02      	ldr	r3, [sp, #8]
   8333c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   83340:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   83344:	424f      	negs	r7, r1
   83346:	414f      	adcs	r7, r1
   83348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   8334c:	d02c      	beq.n	833a8 <__smakebuf_r+0x90>
   8334e:	89a3      	ldrh	r3, [r4, #12]
   83350:	f44f 6680 	mov.w	r6, #1024	; 0x400
   83354:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83358:	81a3      	strh	r3, [r4, #12]
   8335a:	e00b      	b.n	83374 <__smakebuf_r+0x5c>
   8335c:	89a3      	ldrh	r3, [r4, #12]
   8335e:	b29a      	uxth	r2, r3
   83360:	f012 0f80 	tst.w	r2, #128	; 0x80
   83364:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83368:	81a3      	strh	r3, [r4, #12]
   8336a:	bf14      	ite	ne
   8336c:	2640      	movne	r6, #64	; 0x40
   8336e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   83372:	2700      	movs	r7, #0
   83374:	4628      	mov	r0, r5
   83376:	4631      	mov	r1, r6
   83378:	f000 f846 	bl	83408 <_malloc_r>
   8337c:	89a3      	ldrh	r3, [r4, #12]
   8337e:	2800      	cmp	r0, #0
   83380:	d029      	beq.n	833d6 <__smakebuf_r+0xbe>
   83382:	4a1b      	ldr	r2, [pc, #108]	; (833f0 <__smakebuf_r+0xd8>)
   83384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83388:	63ea      	str	r2, [r5, #60]	; 0x3c
   8338a:	81a3      	strh	r3, [r4, #12]
   8338c:	6020      	str	r0, [r4, #0]
   8338e:	6120      	str	r0, [r4, #16]
   83390:	6166      	str	r6, [r4, #20]
   83392:	b9a7      	cbnz	r7, 833be <__smakebuf_r+0xa6>
   83394:	b011      	add	sp, #68	; 0x44
   83396:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83398:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8339c:	2201      	movs	r2, #1
   8339e:	600b      	str	r3, [r1, #0]
   833a0:	610b      	str	r3, [r1, #16]
   833a2:	614a      	str	r2, [r1, #20]
   833a4:	b011      	add	sp, #68	; 0x44
   833a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   833a8:	4a12      	ldr	r2, [pc, #72]	; (833f4 <__smakebuf_r+0xdc>)
   833aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   833ac:	4293      	cmp	r3, r2
   833ae:	d1ce      	bne.n	8334e <__smakebuf_r+0x36>
   833b0:	89a3      	ldrh	r3, [r4, #12]
   833b2:	f44f 6680 	mov.w	r6, #1024	; 0x400
   833b6:	4333      	orrs	r3, r6
   833b8:	81a3      	strh	r3, [r4, #12]
   833ba:	64e6      	str	r6, [r4, #76]	; 0x4c
   833bc:	e7da      	b.n	83374 <__smakebuf_r+0x5c>
   833be:	4628      	mov	r0, r5
   833c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   833c4:	f000 ff56 	bl	84274 <_isatty_r>
   833c8:	2800      	cmp	r0, #0
   833ca:	d0e3      	beq.n	83394 <__smakebuf_r+0x7c>
   833cc:	89a3      	ldrh	r3, [r4, #12]
   833ce:	f043 0301 	orr.w	r3, r3, #1
   833d2:	81a3      	strh	r3, [r4, #12]
   833d4:	e7de      	b.n	83394 <__smakebuf_r+0x7c>
   833d6:	059a      	lsls	r2, r3, #22
   833d8:	d4dc      	bmi.n	83394 <__smakebuf_r+0x7c>
   833da:	f104 0243 	add.w	r2, r4, #67	; 0x43
   833de:	f043 0302 	orr.w	r3, r3, #2
   833e2:	2101      	movs	r1, #1
   833e4:	81a3      	strh	r3, [r4, #12]
   833e6:	6022      	str	r2, [r4, #0]
   833e8:	6122      	str	r2, [r4, #16]
   833ea:	6161      	str	r1, [r4, #20]
   833ec:	e7d2      	b.n	83394 <__smakebuf_r+0x7c>
   833ee:	bf00      	nop
   833f0:	00082b79 	.word	0x00082b79
   833f4:	00083fd5 	.word	0x00083fd5

000833f8 <malloc>:
   833f8:	4b02      	ldr	r3, [pc, #8]	; (83404 <malloc+0xc>)
   833fa:	4601      	mov	r1, r0
   833fc:	6818      	ldr	r0, [r3, #0]
   833fe:	f000 b803 	b.w	83408 <_malloc_r>
   83402:	bf00      	nop
   83404:	20070560 	.word	0x20070560

00083408 <_malloc_r>:
   83408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8340c:	f101 050b 	add.w	r5, r1, #11
   83410:	2d16      	cmp	r5, #22
   83412:	b083      	sub	sp, #12
   83414:	4606      	mov	r6, r0
   83416:	d927      	bls.n	83468 <_malloc_r+0x60>
   83418:	f035 0507 	bics.w	r5, r5, #7
   8341c:	d427      	bmi.n	8346e <_malloc_r+0x66>
   8341e:	42a9      	cmp	r1, r5
   83420:	d825      	bhi.n	8346e <_malloc_r+0x66>
   83422:	4630      	mov	r0, r6
   83424:	f000 fbb2 	bl	83b8c <__malloc_lock>
   83428:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8342c:	d226      	bcs.n	8347c <_malloc_r+0x74>
   8342e:	4fc1      	ldr	r7, [pc, #772]	; (83734 <_malloc_r+0x32c>)
   83430:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   83434:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   83438:	68dc      	ldr	r4, [r3, #12]
   8343a:	429c      	cmp	r4, r3
   8343c:	f000 81d2 	beq.w	837e4 <_malloc_r+0x3dc>
   83440:	6863      	ldr	r3, [r4, #4]
   83442:	68e2      	ldr	r2, [r4, #12]
   83444:	f023 0303 	bic.w	r3, r3, #3
   83448:	4423      	add	r3, r4
   8344a:	6858      	ldr	r0, [r3, #4]
   8344c:	68a1      	ldr	r1, [r4, #8]
   8344e:	f040 0501 	orr.w	r5, r0, #1
   83452:	60ca      	str	r2, [r1, #12]
   83454:	4630      	mov	r0, r6
   83456:	6091      	str	r1, [r2, #8]
   83458:	605d      	str	r5, [r3, #4]
   8345a:	f000 fb99 	bl	83b90 <__malloc_unlock>
   8345e:	3408      	adds	r4, #8
   83460:	4620      	mov	r0, r4
   83462:	b003      	add	sp, #12
   83464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83468:	2510      	movs	r5, #16
   8346a:	42a9      	cmp	r1, r5
   8346c:	d9d9      	bls.n	83422 <_malloc_r+0x1a>
   8346e:	2400      	movs	r4, #0
   83470:	230c      	movs	r3, #12
   83472:	4620      	mov	r0, r4
   83474:	6033      	str	r3, [r6, #0]
   83476:	b003      	add	sp, #12
   83478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8347c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   83480:	f000 8089 	beq.w	83596 <_malloc_r+0x18e>
   83484:	f1bc 0f04 	cmp.w	ip, #4
   83488:	f200 8160 	bhi.w	8374c <_malloc_r+0x344>
   8348c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   83490:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   83494:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83498:	4fa6      	ldr	r7, [pc, #664]	; (83734 <_malloc_r+0x32c>)
   8349a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8349e:	68cc      	ldr	r4, [r1, #12]
   834a0:	42a1      	cmp	r1, r4
   834a2:	d105      	bne.n	834b0 <_malloc_r+0xa8>
   834a4:	e00c      	b.n	834c0 <_malloc_r+0xb8>
   834a6:	2b00      	cmp	r3, #0
   834a8:	da79      	bge.n	8359e <_malloc_r+0x196>
   834aa:	68e4      	ldr	r4, [r4, #12]
   834ac:	42a1      	cmp	r1, r4
   834ae:	d007      	beq.n	834c0 <_malloc_r+0xb8>
   834b0:	6862      	ldr	r2, [r4, #4]
   834b2:	f022 0203 	bic.w	r2, r2, #3
   834b6:	1b53      	subs	r3, r2, r5
   834b8:	2b0f      	cmp	r3, #15
   834ba:	ddf4      	ble.n	834a6 <_malloc_r+0x9e>
   834bc:	f10c 3cff 	add.w	ip, ip, #4294967295
   834c0:	f10c 0c01 	add.w	ip, ip, #1
   834c4:	4b9b      	ldr	r3, [pc, #620]	; (83734 <_malloc_r+0x32c>)
   834c6:	693c      	ldr	r4, [r7, #16]
   834c8:	f103 0e08 	add.w	lr, r3, #8
   834cc:	4574      	cmp	r4, lr
   834ce:	f000 817e 	beq.w	837ce <_malloc_r+0x3c6>
   834d2:	6861      	ldr	r1, [r4, #4]
   834d4:	f021 0103 	bic.w	r1, r1, #3
   834d8:	1b4a      	subs	r2, r1, r5
   834da:	2a0f      	cmp	r2, #15
   834dc:	f300 8164 	bgt.w	837a8 <_malloc_r+0x3a0>
   834e0:	2a00      	cmp	r2, #0
   834e2:	f8c3 e014 	str.w	lr, [r3, #20]
   834e6:	f8c3 e010 	str.w	lr, [r3, #16]
   834ea:	da69      	bge.n	835c0 <_malloc_r+0x1b8>
   834ec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   834f0:	f080 813a 	bcs.w	83768 <_malloc_r+0x360>
   834f4:	08c9      	lsrs	r1, r1, #3
   834f6:	108a      	asrs	r2, r1, #2
   834f8:	f04f 0801 	mov.w	r8, #1
   834fc:	fa08 f802 	lsl.w	r8, r8, r2
   83500:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   83504:	685a      	ldr	r2, [r3, #4]
   83506:	6888      	ldr	r0, [r1, #8]
   83508:	ea48 0202 	orr.w	r2, r8, r2
   8350c:	60a0      	str	r0, [r4, #8]
   8350e:	60e1      	str	r1, [r4, #12]
   83510:	605a      	str	r2, [r3, #4]
   83512:	608c      	str	r4, [r1, #8]
   83514:	60c4      	str	r4, [r0, #12]
   83516:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8351a:	2001      	movs	r0, #1
   8351c:	4098      	lsls	r0, r3
   8351e:	4290      	cmp	r0, r2
   83520:	d85b      	bhi.n	835da <_malloc_r+0x1d2>
   83522:	4202      	tst	r2, r0
   83524:	d106      	bne.n	83534 <_malloc_r+0x12c>
   83526:	f02c 0c03 	bic.w	ip, ip, #3
   8352a:	0040      	lsls	r0, r0, #1
   8352c:	4202      	tst	r2, r0
   8352e:	f10c 0c04 	add.w	ip, ip, #4
   83532:	d0fa      	beq.n	8352a <_malloc_r+0x122>
   83534:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   83538:	4644      	mov	r4, r8
   8353a:	46e1      	mov	r9, ip
   8353c:	68e3      	ldr	r3, [r4, #12]
   8353e:	429c      	cmp	r4, r3
   83540:	d107      	bne.n	83552 <_malloc_r+0x14a>
   83542:	e146      	b.n	837d2 <_malloc_r+0x3ca>
   83544:	2a00      	cmp	r2, #0
   83546:	f280 8157 	bge.w	837f8 <_malloc_r+0x3f0>
   8354a:	68db      	ldr	r3, [r3, #12]
   8354c:	429c      	cmp	r4, r3
   8354e:	f000 8140 	beq.w	837d2 <_malloc_r+0x3ca>
   83552:	6859      	ldr	r1, [r3, #4]
   83554:	f021 0103 	bic.w	r1, r1, #3
   83558:	1b4a      	subs	r2, r1, r5
   8355a:	2a0f      	cmp	r2, #15
   8355c:	ddf2      	ble.n	83544 <_malloc_r+0x13c>
   8355e:	461c      	mov	r4, r3
   83560:	f854 cf08 	ldr.w	ip, [r4, #8]!
   83564:	68d9      	ldr	r1, [r3, #12]
   83566:	f045 0901 	orr.w	r9, r5, #1
   8356a:	f042 0801 	orr.w	r8, r2, #1
   8356e:	441d      	add	r5, r3
   83570:	f8c3 9004 	str.w	r9, [r3, #4]
   83574:	4630      	mov	r0, r6
   83576:	f8cc 100c 	str.w	r1, [ip, #12]
   8357a:	f8c1 c008 	str.w	ip, [r1, #8]
   8357e:	617d      	str	r5, [r7, #20]
   83580:	613d      	str	r5, [r7, #16]
   83582:	f8c5 e00c 	str.w	lr, [r5, #12]
   83586:	f8c5 e008 	str.w	lr, [r5, #8]
   8358a:	f8c5 8004 	str.w	r8, [r5, #4]
   8358e:	50aa      	str	r2, [r5, r2]
   83590:	f000 fafe 	bl	83b90 <__malloc_unlock>
   83594:	e764      	b.n	83460 <_malloc_r+0x58>
   83596:	217e      	movs	r1, #126	; 0x7e
   83598:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   8359c:	e77c      	b.n	83498 <_malloc_r+0x90>
   8359e:	4422      	add	r2, r4
   835a0:	6850      	ldr	r0, [r2, #4]
   835a2:	68e3      	ldr	r3, [r4, #12]
   835a4:	68a1      	ldr	r1, [r4, #8]
   835a6:	f040 0501 	orr.w	r5, r0, #1
   835aa:	60cb      	str	r3, [r1, #12]
   835ac:	4630      	mov	r0, r6
   835ae:	6099      	str	r1, [r3, #8]
   835b0:	6055      	str	r5, [r2, #4]
   835b2:	f000 faed 	bl	83b90 <__malloc_unlock>
   835b6:	3408      	adds	r4, #8
   835b8:	4620      	mov	r0, r4
   835ba:	b003      	add	sp, #12
   835bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   835c0:	4421      	add	r1, r4
   835c2:	684b      	ldr	r3, [r1, #4]
   835c4:	4630      	mov	r0, r6
   835c6:	f043 0301 	orr.w	r3, r3, #1
   835ca:	604b      	str	r3, [r1, #4]
   835cc:	f000 fae0 	bl	83b90 <__malloc_unlock>
   835d0:	3408      	adds	r4, #8
   835d2:	4620      	mov	r0, r4
   835d4:	b003      	add	sp, #12
   835d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   835da:	68bc      	ldr	r4, [r7, #8]
   835dc:	6863      	ldr	r3, [r4, #4]
   835de:	f023 0903 	bic.w	r9, r3, #3
   835e2:	45a9      	cmp	r9, r5
   835e4:	d304      	bcc.n	835f0 <_malloc_r+0x1e8>
   835e6:	ebc5 0309 	rsb	r3, r5, r9
   835ea:	2b0f      	cmp	r3, #15
   835ec:	f300 8091 	bgt.w	83712 <_malloc_r+0x30a>
   835f0:	4b51      	ldr	r3, [pc, #324]	; (83738 <_malloc_r+0x330>)
   835f2:	4a52      	ldr	r2, [pc, #328]	; (8373c <_malloc_r+0x334>)
   835f4:	6819      	ldr	r1, [r3, #0]
   835f6:	6813      	ldr	r3, [r2, #0]
   835f8:	eb05 0a01 	add.w	sl, r5, r1
   835fc:	3301      	adds	r3, #1
   835fe:	eb04 0b09 	add.w	fp, r4, r9
   83602:	f000 8161 	beq.w	838c8 <_malloc_r+0x4c0>
   83606:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   8360a:	f10a 0a0f 	add.w	sl, sl, #15
   8360e:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   83612:	f02a 0a0f 	bic.w	sl, sl, #15
   83616:	4630      	mov	r0, r6
   83618:	4651      	mov	r1, sl
   8361a:	9201      	str	r2, [sp, #4]
   8361c:	f000 fc9a 	bl	83f54 <_sbrk_r>
   83620:	f1b0 3fff 	cmp.w	r0, #4294967295
   83624:	4680      	mov	r8, r0
   83626:	9a01      	ldr	r2, [sp, #4]
   83628:	f000 8101 	beq.w	8382e <_malloc_r+0x426>
   8362c:	4583      	cmp	fp, r0
   8362e:	f200 80fb 	bhi.w	83828 <_malloc_r+0x420>
   83632:	f8df c114 	ldr.w	ip, [pc, #276]	; 83748 <_malloc_r+0x340>
   83636:	45c3      	cmp	fp, r8
   83638:	f8dc 3000 	ldr.w	r3, [ip]
   8363c:	4453      	add	r3, sl
   8363e:	f8cc 3000 	str.w	r3, [ip]
   83642:	f000 814a 	beq.w	838da <_malloc_r+0x4d2>
   83646:	6812      	ldr	r2, [r2, #0]
   83648:	493c      	ldr	r1, [pc, #240]	; (8373c <_malloc_r+0x334>)
   8364a:	3201      	adds	r2, #1
   8364c:	bf1b      	ittet	ne
   8364e:	ebcb 0b08 	rsbne	fp, fp, r8
   83652:	445b      	addne	r3, fp
   83654:	f8c1 8000 	streq.w	r8, [r1]
   83658:	f8cc 3000 	strne.w	r3, [ip]
   8365c:	f018 0307 	ands.w	r3, r8, #7
   83660:	f000 8114 	beq.w	8388c <_malloc_r+0x484>
   83664:	f1c3 0208 	rsb	r2, r3, #8
   83668:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   8366c:	4490      	add	r8, r2
   8366e:	3308      	adds	r3, #8
   83670:	44c2      	add	sl, r8
   83672:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   83676:	ebca 0a03 	rsb	sl, sl, r3
   8367a:	4651      	mov	r1, sl
   8367c:	4630      	mov	r0, r6
   8367e:	f8cd c004 	str.w	ip, [sp, #4]
   83682:	f000 fc67 	bl	83f54 <_sbrk_r>
   83686:	1c43      	adds	r3, r0, #1
   83688:	f8dd c004 	ldr.w	ip, [sp, #4]
   8368c:	f000 8135 	beq.w	838fa <_malloc_r+0x4f2>
   83690:	ebc8 0200 	rsb	r2, r8, r0
   83694:	4452      	add	r2, sl
   83696:	f042 0201 	orr.w	r2, r2, #1
   8369a:	f8dc 3000 	ldr.w	r3, [ip]
   8369e:	42bc      	cmp	r4, r7
   836a0:	4453      	add	r3, sl
   836a2:	f8c7 8008 	str.w	r8, [r7, #8]
   836a6:	f8cc 3000 	str.w	r3, [ip]
   836aa:	f8c8 2004 	str.w	r2, [r8, #4]
   836ae:	f8df a098 	ldr.w	sl, [pc, #152]	; 83748 <_malloc_r+0x340>
   836b2:	d015      	beq.n	836e0 <_malloc_r+0x2d8>
   836b4:	f1b9 0f0f 	cmp.w	r9, #15
   836b8:	f240 80eb 	bls.w	83892 <_malloc_r+0x48a>
   836bc:	6861      	ldr	r1, [r4, #4]
   836be:	f1a9 020c 	sub.w	r2, r9, #12
   836c2:	f022 0207 	bic.w	r2, r2, #7
   836c6:	f001 0101 	and.w	r1, r1, #1
   836ca:	ea42 0e01 	orr.w	lr, r2, r1
   836ce:	2005      	movs	r0, #5
   836d0:	18a1      	adds	r1, r4, r2
   836d2:	2a0f      	cmp	r2, #15
   836d4:	f8c4 e004 	str.w	lr, [r4, #4]
   836d8:	6048      	str	r0, [r1, #4]
   836da:	6088      	str	r0, [r1, #8]
   836dc:	f200 8111 	bhi.w	83902 <_malloc_r+0x4fa>
   836e0:	4a17      	ldr	r2, [pc, #92]	; (83740 <_malloc_r+0x338>)
   836e2:	68bc      	ldr	r4, [r7, #8]
   836e4:	6811      	ldr	r1, [r2, #0]
   836e6:	428b      	cmp	r3, r1
   836e8:	bf88      	it	hi
   836ea:	6013      	strhi	r3, [r2, #0]
   836ec:	4a15      	ldr	r2, [pc, #84]	; (83744 <_malloc_r+0x33c>)
   836ee:	6811      	ldr	r1, [r2, #0]
   836f0:	428b      	cmp	r3, r1
   836f2:	bf88      	it	hi
   836f4:	6013      	strhi	r3, [r2, #0]
   836f6:	6862      	ldr	r2, [r4, #4]
   836f8:	f022 0203 	bic.w	r2, r2, #3
   836fc:	4295      	cmp	r5, r2
   836fe:	ebc5 0302 	rsb	r3, r5, r2
   83702:	d801      	bhi.n	83708 <_malloc_r+0x300>
   83704:	2b0f      	cmp	r3, #15
   83706:	dc04      	bgt.n	83712 <_malloc_r+0x30a>
   83708:	4630      	mov	r0, r6
   8370a:	f000 fa41 	bl	83b90 <__malloc_unlock>
   8370e:	2400      	movs	r4, #0
   83710:	e6a6      	b.n	83460 <_malloc_r+0x58>
   83712:	f045 0201 	orr.w	r2, r5, #1
   83716:	f043 0301 	orr.w	r3, r3, #1
   8371a:	4425      	add	r5, r4
   8371c:	6062      	str	r2, [r4, #4]
   8371e:	4630      	mov	r0, r6
   83720:	60bd      	str	r5, [r7, #8]
   83722:	606b      	str	r3, [r5, #4]
   83724:	f000 fa34 	bl	83b90 <__malloc_unlock>
   83728:	3408      	adds	r4, #8
   8372a:	4620      	mov	r0, r4
   8372c:	b003      	add	sp, #12
   8372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83732:	bf00      	nop
   83734:	20070588 	.word	0x20070588
   83738:	20070ad4 	.word	0x20070ad4
   8373c:	20070994 	.word	0x20070994
   83740:	20070ad0 	.word	0x20070ad0
   83744:	20070acc 	.word	0x20070acc
   83748:	20070ad8 	.word	0x20070ad8
   8374c:	f1bc 0f14 	cmp.w	ip, #20
   83750:	d961      	bls.n	83816 <_malloc_r+0x40e>
   83752:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   83756:	f200 808f 	bhi.w	83878 <_malloc_r+0x470>
   8375a:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8375e:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   83762:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83766:	e697      	b.n	83498 <_malloc_r+0x90>
   83768:	0a4b      	lsrs	r3, r1, #9
   8376a:	2b04      	cmp	r3, #4
   8376c:	d958      	bls.n	83820 <_malloc_r+0x418>
   8376e:	2b14      	cmp	r3, #20
   83770:	f200 80ad 	bhi.w	838ce <_malloc_r+0x4c6>
   83774:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   83778:	0050      	lsls	r0, r2, #1
   8377a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   8377e:	6883      	ldr	r3, [r0, #8]
   83780:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8393c <_malloc_r+0x534>
   83784:	4283      	cmp	r3, r0
   83786:	f000 808a 	beq.w	8389e <_malloc_r+0x496>
   8378a:	685a      	ldr	r2, [r3, #4]
   8378c:	f022 0203 	bic.w	r2, r2, #3
   83790:	4291      	cmp	r1, r2
   83792:	d202      	bcs.n	8379a <_malloc_r+0x392>
   83794:	689b      	ldr	r3, [r3, #8]
   83796:	4298      	cmp	r0, r3
   83798:	d1f7      	bne.n	8378a <_malloc_r+0x382>
   8379a:	68d9      	ldr	r1, [r3, #12]
   8379c:	687a      	ldr	r2, [r7, #4]
   8379e:	60e1      	str	r1, [r4, #12]
   837a0:	60a3      	str	r3, [r4, #8]
   837a2:	608c      	str	r4, [r1, #8]
   837a4:	60dc      	str	r4, [r3, #12]
   837a6:	e6b6      	b.n	83516 <_malloc_r+0x10e>
   837a8:	f045 0701 	orr.w	r7, r5, #1
   837ac:	f042 0101 	orr.w	r1, r2, #1
   837b0:	4425      	add	r5, r4
   837b2:	6067      	str	r7, [r4, #4]
   837b4:	4630      	mov	r0, r6
   837b6:	615d      	str	r5, [r3, #20]
   837b8:	611d      	str	r5, [r3, #16]
   837ba:	f8c5 e00c 	str.w	lr, [r5, #12]
   837be:	f8c5 e008 	str.w	lr, [r5, #8]
   837c2:	6069      	str	r1, [r5, #4]
   837c4:	50aa      	str	r2, [r5, r2]
   837c6:	3408      	adds	r4, #8
   837c8:	f000 f9e2 	bl	83b90 <__malloc_unlock>
   837cc:	e648      	b.n	83460 <_malloc_r+0x58>
   837ce:	685a      	ldr	r2, [r3, #4]
   837d0:	e6a1      	b.n	83516 <_malloc_r+0x10e>
   837d2:	f109 0901 	add.w	r9, r9, #1
   837d6:	f019 0f03 	tst.w	r9, #3
   837da:	f104 0408 	add.w	r4, r4, #8
   837de:	f47f aead 	bne.w	8353c <_malloc_r+0x134>
   837e2:	e02d      	b.n	83840 <_malloc_r+0x438>
   837e4:	f104 0308 	add.w	r3, r4, #8
   837e8:	6964      	ldr	r4, [r4, #20]
   837ea:	42a3      	cmp	r3, r4
   837ec:	bf08      	it	eq
   837ee:	f10c 0c02 	addeq.w	ip, ip, #2
   837f2:	f43f ae67 	beq.w	834c4 <_malloc_r+0xbc>
   837f6:	e623      	b.n	83440 <_malloc_r+0x38>
   837f8:	4419      	add	r1, r3
   837fa:	6848      	ldr	r0, [r1, #4]
   837fc:	461c      	mov	r4, r3
   837fe:	f854 2f08 	ldr.w	r2, [r4, #8]!
   83802:	68db      	ldr	r3, [r3, #12]
   83804:	f040 0501 	orr.w	r5, r0, #1
   83808:	604d      	str	r5, [r1, #4]
   8380a:	4630      	mov	r0, r6
   8380c:	60d3      	str	r3, [r2, #12]
   8380e:	609a      	str	r2, [r3, #8]
   83810:	f000 f9be 	bl	83b90 <__malloc_unlock>
   83814:	e624      	b.n	83460 <_malloc_r+0x58>
   83816:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   8381a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8381e:	e63b      	b.n	83498 <_malloc_r+0x90>
   83820:	098a      	lsrs	r2, r1, #6
   83822:	3238      	adds	r2, #56	; 0x38
   83824:	0050      	lsls	r0, r2, #1
   83826:	e7a8      	b.n	8377a <_malloc_r+0x372>
   83828:	42bc      	cmp	r4, r7
   8382a:	f43f af02 	beq.w	83632 <_malloc_r+0x22a>
   8382e:	68bc      	ldr	r4, [r7, #8]
   83830:	6862      	ldr	r2, [r4, #4]
   83832:	f022 0203 	bic.w	r2, r2, #3
   83836:	e761      	b.n	836fc <_malloc_r+0x2f4>
   83838:	f8d8 8000 	ldr.w	r8, [r8]
   8383c:	4598      	cmp	r8, r3
   8383e:	d17a      	bne.n	83936 <_malloc_r+0x52e>
   83840:	f01c 0f03 	tst.w	ip, #3
   83844:	f1a8 0308 	sub.w	r3, r8, #8
   83848:	f10c 3cff 	add.w	ip, ip, #4294967295
   8384c:	d1f4      	bne.n	83838 <_malloc_r+0x430>
   8384e:	687b      	ldr	r3, [r7, #4]
   83850:	ea23 0300 	bic.w	r3, r3, r0
   83854:	607b      	str	r3, [r7, #4]
   83856:	0040      	lsls	r0, r0, #1
   83858:	4298      	cmp	r0, r3
   8385a:	f63f aebe 	bhi.w	835da <_malloc_r+0x1d2>
   8385e:	2800      	cmp	r0, #0
   83860:	f43f aebb 	beq.w	835da <_malloc_r+0x1d2>
   83864:	4203      	tst	r3, r0
   83866:	46cc      	mov	ip, r9
   83868:	f47f ae64 	bne.w	83534 <_malloc_r+0x12c>
   8386c:	0040      	lsls	r0, r0, #1
   8386e:	4203      	tst	r3, r0
   83870:	f10c 0c04 	add.w	ip, ip, #4
   83874:	d0fa      	beq.n	8386c <_malloc_r+0x464>
   83876:	e65d      	b.n	83534 <_malloc_r+0x12c>
   83878:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   8387c:	d819      	bhi.n	838b2 <_malloc_r+0x4aa>
   8387e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   83882:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   83886:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8388a:	e605      	b.n	83498 <_malloc_r+0x90>
   8388c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83890:	e6ee      	b.n	83670 <_malloc_r+0x268>
   83892:	2301      	movs	r3, #1
   83894:	f8c8 3004 	str.w	r3, [r8, #4]
   83898:	4644      	mov	r4, r8
   8389a:	2200      	movs	r2, #0
   8389c:	e72e      	b.n	836fc <_malloc_r+0x2f4>
   8389e:	1092      	asrs	r2, r2, #2
   838a0:	2001      	movs	r0, #1
   838a2:	4090      	lsls	r0, r2
   838a4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   838a8:	4619      	mov	r1, r3
   838aa:	4302      	orrs	r2, r0
   838ac:	f8c8 2004 	str.w	r2, [r8, #4]
   838b0:	e775      	b.n	8379e <_malloc_r+0x396>
   838b2:	f240 5354 	movw	r3, #1364	; 0x554
   838b6:	459c      	cmp	ip, r3
   838b8:	d81b      	bhi.n	838f2 <_malloc_r+0x4ea>
   838ba:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   838be:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   838c2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   838c6:	e5e7      	b.n	83498 <_malloc_r+0x90>
   838c8:	f10a 0a10 	add.w	sl, sl, #16
   838cc:	e6a3      	b.n	83616 <_malloc_r+0x20e>
   838ce:	2b54      	cmp	r3, #84	; 0x54
   838d0:	d81f      	bhi.n	83912 <_malloc_r+0x50a>
   838d2:	0b0a      	lsrs	r2, r1, #12
   838d4:	326e      	adds	r2, #110	; 0x6e
   838d6:	0050      	lsls	r0, r2, #1
   838d8:	e74f      	b.n	8377a <_malloc_r+0x372>
   838da:	f3cb 010b 	ubfx	r1, fp, #0, #12
   838de:	2900      	cmp	r1, #0
   838e0:	f47f aeb1 	bne.w	83646 <_malloc_r+0x23e>
   838e4:	eb0a 0109 	add.w	r1, sl, r9
   838e8:	68ba      	ldr	r2, [r7, #8]
   838ea:	f041 0101 	orr.w	r1, r1, #1
   838ee:	6051      	str	r1, [r2, #4]
   838f0:	e6f6      	b.n	836e0 <_malloc_r+0x2d8>
   838f2:	21fc      	movs	r1, #252	; 0xfc
   838f4:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   838f8:	e5ce      	b.n	83498 <_malloc_r+0x90>
   838fa:	2201      	movs	r2, #1
   838fc:	f04f 0a00 	mov.w	sl, #0
   83900:	e6cb      	b.n	8369a <_malloc_r+0x292>
   83902:	f104 0108 	add.w	r1, r4, #8
   83906:	4630      	mov	r0, r6
   83908:	f7ff fa80 	bl	82e0c <_free_r>
   8390c:	f8da 3000 	ldr.w	r3, [sl]
   83910:	e6e6      	b.n	836e0 <_malloc_r+0x2d8>
   83912:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83916:	d803      	bhi.n	83920 <_malloc_r+0x518>
   83918:	0bca      	lsrs	r2, r1, #15
   8391a:	3277      	adds	r2, #119	; 0x77
   8391c:	0050      	lsls	r0, r2, #1
   8391e:	e72c      	b.n	8377a <_malloc_r+0x372>
   83920:	f240 5254 	movw	r2, #1364	; 0x554
   83924:	4293      	cmp	r3, r2
   83926:	d803      	bhi.n	83930 <_malloc_r+0x528>
   83928:	0c8a      	lsrs	r2, r1, #18
   8392a:	327c      	adds	r2, #124	; 0x7c
   8392c:	0050      	lsls	r0, r2, #1
   8392e:	e724      	b.n	8377a <_malloc_r+0x372>
   83930:	20fc      	movs	r0, #252	; 0xfc
   83932:	227e      	movs	r2, #126	; 0x7e
   83934:	e721      	b.n	8377a <_malloc_r+0x372>
   83936:	687b      	ldr	r3, [r7, #4]
   83938:	e78d      	b.n	83856 <_malloc_r+0x44e>
   8393a:	bf00      	nop
   8393c:	20070588 	.word	0x20070588

00083940 <memchr>:
   83940:	0783      	lsls	r3, r0, #30
   83942:	b470      	push	{r4, r5, r6}
   83944:	b2c9      	uxtb	r1, r1
   83946:	d040      	beq.n	839ca <memchr+0x8a>
   83948:	1e54      	subs	r4, r2, #1
   8394a:	b32a      	cbz	r2, 83998 <memchr+0x58>
   8394c:	7803      	ldrb	r3, [r0, #0]
   8394e:	428b      	cmp	r3, r1
   83950:	d023      	beq.n	8399a <memchr+0x5a>
   83952:	1c43      	adds	r3, r0, #1
   83954:	e004      	b.n	83960 <memchr+0x20>
   83956:	b1fc      	cbz	r4, 83998 <memchr+0x58>
   83958:	7805      	ldrb	r5, [r0, #0]
   8395a:	4614      	mov	r4, r2
   8395c:	428d      	cmp	r5, r1
   8395e:	d01c      	beq.n	8399a <memchr+0x5a>
   83960:	f013 0f03 	tst.w	r3, #3
   83964:	4618      	mov	r0, r3
   83966:	f104 32ff 	add.w	r2, r4, #4294967295
   8396a:	f103 0301 	add.w	r3, r3, #1
   8396e:	d1f2      	bne.n	83956 <memchr+0x16>
   83970:	2c03      	cmp	r4, #3
   83972:	d814      	bhi.n	8399e <memchr+0x5e>
   83974:	1e65      	subs	r5, r4, #1
   83976:	b354      	cbz	r4, 839ce <memchr+0x8e>
   83978:	7803      	ldrb	r3, [r0, #0]
   8397a:	428b      	cmp	r3, r1
   8397c:	d00d      	beq.n	8399a <memchr+0x5a>
   8397e:	1c42      	adds	r2, r0, #1
   83980:	2300      	movs	r3, #0
   83982:	e002      	b.n	8398a <memchr+0x4a>
   83984:	7804      	ldrb	r4, [r0, #0]
   83986:	428c      	cmp	r4, r1
   83988:	d007      	beq.n	8399a <memchr+0x5a>
   8398a:	42ab      	cmp	r3, r5
   8398c:	4610      	mov	r0, r2
   8398e:	f103 0301 	add.w	r3, r3, #1
   83992:	f102 0201 	add.w	r2, r2, #1
   83996:	d1f5      	bne.n	83984 <memchr+0x44>
   83998:	2000      	movs	r0, #0
   8399a:	bc70      	pop	{r4, r5, r6}
   8399c:	4770      	bx	lr
   8399e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   839a2:	4603      	mov	r3, r0
   839a4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   839a8:	681a      	ldr	r2, [r3, #0]
   839aa:	4618      	mov	r0, r3
   839ac:	4072      	eors	r2, r6
   839ae:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   839b2:	ea25 0202 	bic.w	r2, r5, r2
   839b6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   839ba:	f103 0304 	add.w	r3, r3, #4
   839be:	d1d9      	bne.n	83974 <memchr+0x34>
   839c0:	3c04      	subs	r4, #4
   839c2:	2c03      	cmp	r4, #3
   839c4:	4618      	mov	r0, r3
   839c6:	d8ef      	bhi.n	839a8 <memchr+0x68>
   839c8:	e7d4      	b.n	83974 <memchr+0x34>
   839ca:	4614      	mov	r4, r2
   839cc:	e7d0      	b.n	83970 <memchr+0x30>
   839ce:	4620      	mov	r0, r4
   839d0:	e7e3      	b.n	8399a <memchr+0x5a>
   839d2:	bf00      	nop

000839d4 <memcpy>:
   839d4:	4684      	mov	ip, r0
   839d6:	ea41 0300 	orr.w	r3, r1, r0
   839da:	f013 0303 	ands.w	r3, r3, #3
   839de:	d149      	bne.n	83a74 <memcpy+0xa0>
   839e0:	3a40      	subs	r2, #64	; 0x40
   839e2:	d323      	bcc.n	83a2c <memcpy+0x58>
   839e4:	680b      	ldr	r3, [r1, #0]
   839e6:	6003      	str	r3, [r0, #0]
   839e8:	684b      	ldr	r3, [r1, #4]
   839ea:	6043      	str	r3, [r0, #4]
   839ec:	688b      	ldr	r3, [r1, #8]
   839ee:	6083      	str	r3, [r0, #8]
   839f0:	68cb      	ldr	r3, [r1, #12]
   839f2:	60c3      	str	r3, [r0, #12]
   839f4:	690b      	ldr	r3, [r1, #16]
   839f6:	6103      	str	r3, [r0, #16]
   839f8:	694b      	ldr	r3, [r1, #20]
   839fa:	6143      	str	r3, [r0, #20]
   839fc:	698b      	ldr	r3, [r1, #24]
   839fe:	6183      	str	r3, [r0, #24]
   83a00:	69cb      	ldr	r3, [r1, #28]
   83a02:	61c3      	str	r3, [r0, #28]
   83a04:	6a0b      	ldr	r3, [r1, #32]
   83a06:	6203      	str	r3, [r0, #32]
   83a08:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83a0a:	6243      	str	r3, [r0, #36]	; 0x24
   83a0c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83a0e:	6283      	str	r3, [r0, #40]	; 0x28
   83a10:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83a12:	62c3      	str	r3, [r0, #44]	; 0x2c
   83a14:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83a16:	6303      	str	r3, [r0, #48]	; 0x30
   83a18:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83a1a:	6343      	str	r3, [r0, #52]	; 0x34
   83a1c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83a1e:	6383      	str	r3, [r0, #56]	; 0x38
   83a20:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83a22:	63c3      	str	r3, [r0, #60]	; 0x3c
   83a24:	3040      	adds	r0, #64	; 0x40
   83a26:	3140      	adds	r1, #64	; 0x40
   83a28:	3a40      	subs	r2, #64	; 0x40
   83a2a:	d2db      	bcs.n	839e4 <memcpy+0x10>
   83a2c:	3230      	adds	r2, #48	; 0x30
   83a2e:	d30b      	bcc.n	83a48 <memcpy+0x74>
   83a30:	680b      	ldr	r3, [r1, #0]
   83a32:	6003      	str	r3, [r0, #0]
   83a34:	684b      	ldr	r3, [r1, #4]
   83a36:	6043      	str	r3, [r0, #4]
   83a38:	688b      	ldr	r3, [r1, #8]
   83a3a:	6083      	str	r3, [r0, #8]
   83a3c:	68cb      	ldr	r3, [r1, #12]
   83a3e:	60c3      	str	r3, [r0, #12]
   83a40:	3010      	adds	r0, #16
   83a42:	3110      	adds	r1, #16
   83a44:	3a10      	subs	r2, #16
   83a46:	d2f3      	bcs.n	83a30 <memcpy+0x5c>
   83a48:	320c      	adds	r2, #12
   83a4a:	d305      	bcc.n	83a58 <memcpy+0x84>
   83a4c:	f851 3b04 	ldr.w	r3, [r1], #4
   83a50:	f840 3b04 	str.w	r3, [r0], #4
   83a54:	3a04      	subs	r2, #4
   83a56:	d2f9      	bcs.n	83a4c <memcpy+0x78>
   83a58:	3204      	adds	r2, #4
   83a5a:	d008      	beq.n	83a6e <memcpy+0x9a>
   83a5c:	07d2      	lsls	r2, r2, #31
   83a5e:	bf1c      	itt	ne
   83a60:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83a64:	f800 3b01 	strbne.w	r3, [r0], #1
   83a68:	d301      	bcc.n	83a6e <memcpy+0x9a>
   83a6a:	880b      	ldrh	r3, [r1, #0]
   83a6c:	8003      	strh	r3, [r0, #0]
   83a6e:	4660      	mov	r0, ip
   83a70:	4770      	bx	lr
   83a72:	bf00      	nop
   83a74:	2a08      	cmp	r2, #8
   83a76:	d313      	bcc.n	83aa0 <memcpy+0xcc>
   83a78:	078b      	lsls	r3, r1, #30
   83a7a:	d0b1      	beq.n	839e0 <memcpy+0xc>
   83a7c:	f010 0303 	ands.w	r3, r0, #3
   83a80:	d0ae      	beq.n	839e0 <memcpy+0xc>
   83a82:	f1c3 0304 	rsb	r3, r3, #4
   83a86:	1ad2      	subs	r2, r2, r3
   83a88:	07db      	lsls	r3, r3, #31
   83a8a:	bf1c      	itt	ne
   83a8c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83a90:	f800 3b01 	strbne.w	r3, [r0], #1
   83a94:	d3a4      	bcc.n	839e0 <memcpy+0xc>
   83a96:	f831 3b02 	ldrh.w	r3, [r1], #2
   83a9a:	f820 3b02 	strh.w	r3, [r0], #2
   83a9e:	e79f      	b.n	839e0 <memcpy+0xc>
   83aa0:	3a04      	subs	r2, #4
   83aa2:	d3d9      	bcc.n	83a58 <memcpy+0x84>
   83aa4:	3a01      	subs	r2, #1
   83aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
   83aaa:	f800 3b01 	strb.w	r3, [r0], #1
   83aae:	d2f9      	bcs.n	83aa4 <memcpy+0xd0>
   83ab0:	780b      	ldrb	r3, [r1, #0]
   83ab2:	7003      	strb	r3, [r0, #0]
   83ab4:	784b      	ldrb	r3, [r1, #1]
   83ab6:	7043      	strb	r3, [r0, #1]
   83ab8:	788b      	ldrb	r3, [r1, #2]
   83aba:	7083      	strb	r3, [r0, #2]
   83abc:	4660      	mov	r0, ip
   83abe:	4770      	bx	lr

00083ac0 <memmove>:
   83ac0:	4288      	cmp	r0, r1
   83ac2:	b4f0      	push	{r4, r5, r6, r7}
   83ac4:	d910      	bls.n	83ae8 <memmove+0x28>
   83ac6:	188c      	adds	r4, r1, r2
   83ac8:	42a0      	cmp	r0, r4
   83aca:	d20d      	bcs.n	83ae8 <memmove+0x28>
   83acc:	1885      	adds	r5, r0, r2
   83ace:	1e53      	subs	r3, r2, #1
   83ad0:	b142      	cbz	r2, 83ae4 <memmove+0x24>
   83ad2:	4621      	mov	r1, r4
   83ad4:	462a      	mov	r2, r5
   83ad6:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   83ada:	3b01      	subs	r3, #1
   83adc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83ae0:	1c5c      	adds	r4, r3, #1
   83ae2:	d1f8      	bne.n	83ad6 <memmove+0x16>
   83ae4:	bcf0      	pop	{r4, r5, r6, r7}
   83ae6:	4770      	bx	lr
   83ae8:	2a0f      	cmp	r2, #15
   83aea:	d944      	bls.n	83b76 <memmove+0xb6>
   83aec:	ea40 0301 	orr.w	r3, r0, r1
   83af0:	079b      	lsls	r3, r3, #30
   83af2:	d144      	bne.n	83b7e <memmove+0xbe>
   83af4:	f1a2 0710 	sub.w	r7, r2, #16
   83af8:	093f      	lsrs	r7, r7, #4
   83afa:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   83afe:	3610      	adds	r6, #16
   83b00:	460c      	mov	r4, r1
   83b02:	4603      	mov	r3, r0
   83b04:	6825      	ldr	r5, [r4, #0]
   83b06:	3310      	adds	r3, #16
   83b08:	f843 5c10 	str.w	r5, [r3, #-16]
   83b0c:	6865      	ldr	r5, [r4, #4]
   83b0e:	3410      	adds	r4, #16
   83b10:	f843 5c0c 	str.w	r5, [r3, #-12]
   83b14:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83b18:	f843 5c08 	str.w	r5, [r3, #-8]
   83b1c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   83b20:	f843 5c04 	str.w	r5, [r3, #-4]
   83b24:	42b3      	cmp	r3, r6
   83b26:	d1ed      	bne.n	83b04 <memmove+0x44>
   83b28:	1c7b      	adds	r3, r7, #1
   83b2a:	f002 0c0f 	and.w	ip, r2, #15
   83b2e:	011b      	lsls	r3, r3, #4
   83b30:	f1bc 0f03 	cmp.w	ip, #3
   83b34:	4419      	add	r1, r3
   83b36:	4403      	add	r3, r0
   83b38:	d923      	bls.n	83b82 <memmove+0xc2>
   83b3a:	460e      	mov	r6, r1
   83b3c:	461d      	mov	r5, r3
   83b3e:	4664      	mov	r4, ip
   83b40:	f856 7b04 	ldr.w	r7, [r6], #4
   83b44:	3c04      	subs	r4, #4
   83b46:	2c03      	cmp	r4, #3
   83b48:	f845 7b04 	str.w	r7, [r5], #4
   83b4c:	d8f8      	bhi.n	83b40 <memmove+0x80>
   83b4e:	f1ac 0404 	sub.w	r4, ip, #4
   83b52:	f024 0403 	bic.w	r4, r4, #3
   83b56:	3404      	adds	r4, #4
   83b58:	f002 0203 	and.w	r2, r2, #3
   83b5c:	4423      	add	r3, r4
   83b5e:	4421      	add	r1, r4
   83b60:	2a00      	cmp	r2, #0
   83b62:	d0bf      	beq.n	83ae4 <memmove+0x24>
   83b64:	441a      	add	r2, r3
   83b66:	f811 4b01 	ldrb.w	r4, [r1], #1
   83b6a:	f803 4b01 	strb.w	r4, [r3], #1
   83b6e:	4293      	cmp	r3, r2
   83b70:	d1f9      	bne.n	83b66 <memmove+0xa6>
   83b72:	bcf0      	pop	{r4, r5, r6, r7}
   83b74:	4770      	bx	lr
   83b76:	4603      	mov	r3, r0
   83b78:	2a00      	cmp	r2, #0
   83b7a:	d1f3      	bne.n	83b64 <memmove+0xa4>
   83b7c:	e7b2      	b.n	83ae4 <memmove+0x24>
   83b7e:	4603      	mov	r3, r0
   83b80:	e7f0      	b.n	83b64 <memmove+0xa4>
   83b82:	4662      	mov	r2, ip
   83b84:	2a00      	cmp	r2, #0
   83b86:	d1ed      	bne.n	83b64 <memmove+0xa4>
   83b88:	e7ac      	b.n	83ae4 <memmove+0x24>
   83b8a:	bf00      	nop

00083b8c <__malloc_lock>:
   83b8c:	4770      	bx	lr
   83b8e:	bf00      	nop

00083b90 <__malloc_unlock>:
   83b90:	4770      	bx	lr
   83b92:	bf00      	nop

00083b94 <_realloc_r>:
   83b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83b98:	460c      	mov	r4, r1
   83b9a:	b083      	sub	sp, #12
   83b9c:	4690      	mov	r8, r2
   83b9e:	4681      	mov	r9, r0
   83ba0:	2900      	cmp	r1, #0
   83ba2:	f000 80ba 	beq.w	83d1a <_realloc_r+0x186>
   83ba6:	f7ff fff1 	bl	83b8c <__malloc_lock>
   83baa:	f108 060b 	add.w	r6, r8, #11
   83bae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83bb2:	2e16      	cmp	r6, #22
   83bb4:	f023 0503 	bic.w	r5, r3, #3
   83bb8:	f1a4 0708 	sub.w	r7, r4, #8
   83bbc:	d84b      	bhi.n	83c56 <_realloc_r+0xc2>
   83bbe:	2110      	movs	r1, #16
   83bc0:	460e      	mov	r6, r1
   83bc2:	45b0      	cmp	r8, r6
   83bc4:	d84c      	bhi.n	83c60 <_realloc_r+0xcc>
   83bc6:	428d      	cmp	r5, r1
   83bc8:	da51      	bge.n	83c6e <_realloc_r+0xda>
   83bca:	f8df b384 	ldr.w	fp, [pc, #900]	; 83f50 <_realloc_r+0x3bc>
   83bce:	1978      	adds	r0, r7, r5
   83bd0:	f8db e008 	ldr.w	lr, [fp, #8]
   83bd4:	4586      	cmp	lr, r0
   83bd6:	f000 80a6 	beq.w	83d26 <_realloc_r+0x192>
   83bda:	6842      	ldr	r2, [r0, #4]
   83bdc:	f022 0c01 	bic.w	ip, r2, #1
   83be0:	4484      	add	ip, r0
   83be2:	f8dc c004 	ldr.w	ip, [ip, #4]
   83be6:	f01c 0f01 	tst.w	ip, #1
   83bea:	d054      	beq.n	83c96 <_realloc_r+0x102>
   83bec:	2200      	movs	r2, #0
   83bee:	4610      	mov	r0, r2
   83bf0:	07db      	lsls	r3, r3, #31
   83bf2:	d46f      	bmi.n	83cd4 <_realloc_r+0x140>
   83bf4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83bf8:	ebc3 0a07 	rsb	sl, r3, r7
   83bfc:	f8da 3004 	ldr.w	r3, [sl, #4]
   83c00:	f023 0303 	bic.w	r3, r3, #3
   83c04:	442b      	add	r3, r5
   83c06:	2800      	cmp	r0, #0
   83c08:	d062      	beq.n	83cd0 <_realloc_r+0x13c>
   83c0a:	4570      	cmp	r0, lr
   83c0c:	f000 80e9 	beq.w	83de2 <_realloc_r+0x24e>
   83c10:	eb02 0e03 	add.w	lr, r2, r3
   83c14:	458e      	cmp	lr, r1
   83c16:	db5b      	blt.n	83cd0 <_realloc_r+0x13c>
   83c18:	68c3      	ldr	r3, [r0, #12]
   83c1a:	6882      	ldr	r2, [r0, #8]
   83c1c:	46d0      	mov	r8, sl
   83c1e:	60d3      	str	r3, [r2, #12]
   83c20:	609a      	str	r2, [r3, #8]
   83c22:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83c26:	f8da 300c 	ldr.w	r3, [sl, #12]
   83c2a:	1f2a      	subs	r2, r5, #4
   83c2c:	2a24      	cmp	r2, #36	; 0x24
   83c2e:	60cb      	str	r3, [r1, #12]
   83c30:	6099      	str	r1, [r3, #8]
   83c32:	f200 8123 	bhi.w	83e7c <_realloc_r+0x2e8>
   83c36:	2a13      	cmp	r2, #19
   83c38:	f240 80b0 	bls.w	83d9c <_realloc_r+0x208>
   83c3c:	6823      	ldr	r3, [r4, #0]
   83c3e:	2a1b      	cmp	r2, #27
   83c40:	f8ca 3008 	str.w	r3, [sl, #8]
   83c44:	6863      	ldr	r3, [r4, #4]
   83c46:	f8ca 300c 	str.w	r3, [sl, #12]
   83c4a:	f200 812b 	bhi.w	83ea4 <_realloc_r+0x310>
   83c4e:	3408      	adds	r4, #8
   83c50:	f10a 0310 	add.w	r3, sl, #16
   83c54:	e0a3      	b.n	83d9e <_realloc_r+0x20a>
   83c56:	f026 0607 	bic.w	r6, r6, #7
   83c5a:	2e00      	cmp	r6, #0
   83c5c:	4631      	mov	r1, r6
   83c5e:	dab0      	bge.n	83bc2 <_realloc_r+0x2e>
   83c60:	230c      	movs	r3, #12
   83c62:	2000      	movs	r0, #0
   83c64:	f8c9 3000 	str.w	r3, [r9]
   83c68:	b003      	add	sp, #12
   83c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83c6e:	46a0      	mov	r8, r4
   83c70:	1baa      	subs	r2, r5, r6
   83c72:	2a0f      	cmp	r2, #15
   83c74:	f003 0301 	and.w	r3, r3, #1
   83c78:	d81a      	bhi.n	83cb0 <_realloc_r+0x11c>
   83c7a:	432b      	orrs	r3, r5
   83c7c:	607b      	str	r3, [r7, #4]
   83c7e:	443d      	add	r5, r7
   83c80:	686b      	ldr	r3, [r5, #4]
   83c82:	f043 0301 	orr.w	r3, r3, #1
   83c86:	606b      	str	r3, [r5, #4]
   83c88:	4648      	mov	r0, r9
   83c8a:	f7ff ff81 	bl	83b90 <__malloc_unlock>
   83c8e:	4640      	mov	r0, r8
   83c90:	b003      	add	sp, #12
   83c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83c96:	f022 0203 	bic.w	r2, r2, #3
   83c9a:	eb02 0c05 	add.w	ip, r2, r5
   83c9e:	458c      	cmp	ip, r1
   83ca0:	dba6      	blt.n	83bf0 <_realloc_r+0x5c>
   83ca2:	68c2      	ldr	r2, [r0, #12]
   83ca4:	6881      	ldr	r1, [r0, #8]
   83ca6:	46a0      	mov	r8, r4
   83ca8:	60ca      	str	r2, [r1, #12]
   83caa:	4665      	mov	r5, ip
   83cac:	6091      	str	r1, [r2, #8]
   83cae:	e7df      	b.n	83c70 <_realloc_r+0xdc>
   83cb0:	19b9      	adds	r1, r7, r6
   83cb2:	4333      	orrs	r3, r6
   83cb4:	f042 0001 	orr.w	r0, r2, #1
   83cb8:	607b      	str	r3, [r7, #4]
   83cba:	440a      	add	r2, r1
   83cbc:	6048      	str	r0, [r1, #4]
   83cbe:	6853      	ldr	r3, [r2, #4]
   83cc0:	3108      	adds	r1, #8
   83cc2:	f043 0301 	orr.w	r3, r3, #1
   83cc6:	6053      	str	r3, [r2, #4]
   83cc8:	4648      	mov	r0, r9
   83cca:	f7ff f89f 	bl	82e0c <_free_r>
   83cce:	e7db      	b.n	83c88 <_realloc_r+0xf4>
   83cd0:	428b      	cmp	r3, r1
   83cd2:	da33      	bge.n	83d3c <_realloc_r+0x1a8>
   83cd4:	4641      	mov	r1, r8
   83cd6:	4648      	mov	r0, r9
   83cd8:	f7ff fb96 	bl	83408 <_malloc_r>
   83cdc:	4680      	mov	r8, r0
   83cde:	2800      	cmp	r0, #0
   83ce0:	d0d2      	beq.n	83c88 <_realloc_r+0xf4>
   83ce2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83ce6:	f1a0 0108 	sub.w	r1, r0, #8
   83cea:	f023 0201 	bic.w	r2, r3, #1
   83cee:	443a      	add	r2, r7
   83cf0:	4291      	cmp	r1, r2
   83cf2:	f000 80bc 	beq.w	83e6e <_realloc_r+0x2da>
   83cf6:	1f2a      	subs	r2, r5, #4
   83cf8:	2a24      	cmp	r2, #36	; 0x24
   83cfa:	d86e      	bhi.n	83dda <_realloc_r+0x246>
   83cfc:	2a13      	cmp	r2, #19
   83cfe:	d842      	bhi.n	83d86 <_realloc_r+0x1f2>
   83d00:	4603      	mov	r3, r0
   83d02:	4622      	mov	r2, r4
   83d04:	6811      	ldr	r1, [r2, #0]
   83d06:	6019      	str	r1, [r3, #0]
   83d08:	6851      	ldr	r1, [r2, #4]
   83d0a:	6059      	str	r1, [r3, #4]
   83d0c:	6892      	ldr	r2, [r2, #8]
   83d0e:	609a      	str	r2, [r3, #8]
   83d10:	4621      	mov	r1, r4
   83d12:	4648      	mov	r0, r9
   83d14:	f7ff f87a 	bl	82e0c <_free_r>
   83d18:	e7b6      	b.n	83c88 <_realloc_r+0xf4>
   83d1a:	4611      	mov	r1, r2
   83d1c:	b003      	add	sp, #12
   83d1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83d22:	f7ff bb71 	b.w	83408 <_malloc_r>
   83d26:	f8de 2004 	ldr.w	r2, [lr, #4]
   83d2a:	f106 0c10 	add.w	ip, r6, #16
   83d2e:	f022 0203 	bic.w	r2, r2, #3
   83d32:	1950      	adds	r0, r2, r5
   83d34:	4560      	cmp	r0, ip
   83d36:	da3d      	bge.n	83db4 <_realloc_r+0x220>
   83d38:	4670      	mov	r0, lr
   83d3a:	e759      	b.n	83bf0 <_realloc_r+0x5c>
   83d3c:	46d0      	mov	r8, sl
   83d3e:	f858 0f08 	ldr.w	r0, [r8, #8]!
   83d42:	f8da 100c 	ldr.w	r1, [sl, #12]
   83d46:	1f2a      	subs	r2, r5, #4
   83d48:	2a24      	cmp	r2, #36	; 0x24
   83d4a:	60c1      	str	r1, [r0, #12]
   83d4c:	6088      	str	r0, [r1, #8]
   83d4e:	f200 80a0 	bhi.w	83e92 <_realloc_r+0x2fe>
   83d52:	2a13      	cmp	r2, #19
   83d54:	f240 809b 	bls.w	83e8e <_realloc_r+0x2fa>
   83d58:	6821      	ldr	r1, [r4, #0]
   83d5a:	2a1b      	cmp	r2, #27
   83d5c:	f8ca 1008 	str.w	r1, [sl, #8]
   83d60:	6861      	ldr	r1, [r4, #4]
   83d62:	f8ca 100c 	str.w	r1, [sl, #12]
   83d66:	f200 80b2 	bhi.w	83ece <_realloc_r+0x33a>
   83d6a:	3408      	adds	r4, #8
   83d6c:	f10a 0210 	add.w	r2, sl, #16
   83d70:	6821      	ldr	r1, [r4, #0]
   83d72:	461d      	mov	r5, r3
   83d74:	6011      	str	r1, [r2, #0]
   83d76:	6861      	ldr	r1, [r4, #4]
   83d78:	4657      	mov	r7, sl
   83d7a:	6051      	str	r1, [r2, #4]
   83d7c:	68a3      	ldr	r3, [r4, #8]
   83d7e:	6093      	str	r3, [r2, #8]
   83d80:	f8da 3004 	ldr.w	r3, [sl, #4]
   83d84:	e774      	b.n	83c70 <_realloc_r+0xdc>
   83d86:	6823      	ldr	r3, [r4, #0]
   83d88:	2a1b      	cmp	r2, #27
   83d8a:	6003      	str	r3, [r0, #0]
   83d8c:	6863      	ldr	r3, [r4, #4]
   83d8e:	6043      	str	r3, [r0, #4]
   83d90:	d862      	bhi.n	83e58 <_realloc_r+0x2c4>
   83d92:	f100 0308 	add.w	r3, r0, #8
   83d96:	f104 0208 	add.w	r2, r4, #8
   83d9a:	e7b3      	b.n	83d04 <_realloc_r+0x170>
   83d9c:	4643      	mov	r3, r8
   83d9e:	6822      	ldr	r2, [r4, #0]
   83da0:	4675      	mov	r5, lr
   83da2:	601a      	str	r2, [r3, #0]
   83da4:	6862      	ldr	r2, [r4, #4]
   83da6:	4657      	mov	r7, sl
   83da8:	605a      	str	r2, [r3, #4]
   83daa:	68a2      	ldr	r2, [r4, #8]
   83dac:	609a      	str	r2, [r3, #8]
   83dae:	f8da 3004 	ldr.w	r3, [sl, #4]
   83db2:	e75d      	b.n	83c70 <_realloc_r+0xdc>
   83db4:	1b83      	subs	r3, r0, r6
   83db6:	4437      	add	r7, r6
   83db8:	f043 0301 	orr.w	r3, r3, #1
   83dbc:	f8cb 7008 	str.w	r7, [fp, #8]
   83dc0:	607b      	str	r3, [r7, #4]
   83dc2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83dc6:	4648      	mov	r0, r9
   83dc8:	f003 0301 	and.w	r3, r3, #1
   83dcc:	431e      	orrs	r6, r3
   83dce:	f844 6c04 	str.w	r6, [r4, #-4]
   83dd2:	f7ff fedd 	bl	83b90 <__malloc_unlock>
   83dd6:	4620      	mov	r0, r4
   83dd8:	e75a      	b.n	83c90 <_realloc_r+0xfc>
   83dda:	4621      	mov	r1, r4
   83ddc:	f7ff fe70 	bl	83ac0 <memmove>
   83de0:	e796      	b.n	83d10 <_realloc_r+0x17c>
   83de2:	eb02 0c03 	add.w	ip, r2, r3
   83de6:	f106 0210 	add.w	r2, r6, #16
   83dea:	4594      	cmp	ip, r2
   83dec:	f6ff af70 	blt.w	83cd0 <_realloc_r+0x13c>
   83df0:	4657      	mov	r7, sl
   83df2:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83df6:	f8da 300c 	ldr.w	r3, [sl, #12]
   83dfa:	1f2a      	subs	r2, r5, #4
   83dfc:	2a24      	cmp	r2, #36	; 0x24
   83dfe:	60cb      	str	r3, [r1, #12]
   83e00:	6099      	str	r1, [r3, #8]
   83e02:	f200 8086 	bhi.w	83f12 <_realloc_r+0x37e>
   83e06:	2a13      	cmp	r2, #19
   83e08:	d977      	bls.n	83efa <_realloc_r+0x366>
   83e0a:	6823      	ldr	r3, [r4, #0]
   83e0c:	2a1b      	cmp	r2, #27
   83e0e:	f8ca 3008 	str.w	r3, [sl, #8]
   83e12:	6863      	ldr	r3, [r4, #4]
   83e14:	f8ca 300c 	str.w	r3, [sl, #12]
   83e18:	f200 8084 	bhi.w	83f24 <_realloc_r+0x390>
   83e1c:	3408      	adds	r4, #8
   83e1e:	f10a 0310 	add.w	r3, sl, #16
   83e22:	6822      	ldr	r2, [r4, #0]
   83e24:	601a      	str	r2, [r3, #0]
   83e26:	6862      	ldr	r2, [r4, #4]
   83e28:	605a      	str	r2, [r3, #4]
   83e2a:	68a2      	ldr	r2, [r4, #8]
   83e2c:	609a      	str	r2, [r3, #8]
   83e2e:	ebc6 020c 	rsb	r2, r6, ip
   83e32:	eb0a 0306 	add.w	r3, sl, r6
   83e36:	f042 0201 	orr.w	r2, r2, #1
   83e3a:	f8cb 3008 	str.w	r3, [fp, #8]
   83e3e:	605a      	str	r2, [r3, #4]
   83e40:	f8da 3004 	ldr.w	r3, [sl, #4]
   83e44:	4648      	mov	r0, r9
   83e46:	f003 0301 	and.w	r3, r3, #1
   83e4a:	431e      	orrs	r6, r3
   83e4c:	f8ca 6004 	str.w	r6, [sl, #4]
   83e50:	f7ff fe9e 	bl	83b90 <__malloc_unlock>
   83e54:	4638      	mov	r0, r7
   83e56:	e71b      	b.n	83c90 <_realloc_r+0xfc>
   83e58:	68a3      	ldr	r3, [r4, #8]
   83e5a:	2a24      	cmp	r2, #36	; 0x24
   83e5c:	6083      	str	r3, [r0, #8]
   83e5e:	68e3      	ldr	r3, [r4, #12]
   83e60:	60c3      	str	r3, [r0, #12]
   83e62:	d02b      	beq.n	83ebc <_realloc_r+0x328>
   83e64:	f100 0310 	add.w	r3, r0, #16
   83e68:	f104 0210 	add.w	r2, r4, #16
   83e6c:	e74a      	b.n	83d04 <_realloc_r+0x170>
   83e6e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   83e72:	46a0      	mov	r8, r4
   83e74:	f022 0203 	bic.w	r2, r2, #3
   83e78:	4415      	add	r5, r2
   83e7a:	e6f9      	b.n	83c70 <_realloc_r+0xdc>
   83e7c:	4621      	mov	r1, r4
   83e7e:	4640      	mov	r0, r8
   83e80:	4675      	mov	r5, lr
   83e82:	4657      	mov	r7, sl
   83e84:	f7ff fe1c 	bl	83ac0 <memmove>
   83e88:	f8da 3004 	ldr.w	r3, [sl, #4]
   83e8c:	e6f0      	b.n	83c70 <_realloc_r+0xdc>
   83e8e:	4642      	mov	r2, r8
   83e90:	e76e      	b.n	83d70 <_realloc_r+0x1dc>
   83e92:	4621      	mov	r1, r4
   83e94:	4640      	mov	r0, r8
   83e96:	461d      	mov	r5, r3
   83e98:	4657      	mov	r7, sl
   83e9a:	f7ff fe11 	bl	83ac0 <memmove>
   83e9e:	f8da 3004 	ldr.w	r3, [sl, #4]
   83ea2:	e6e5      	b.n	83c70 <_realloc_r+0xdc>
   83ea4:	68a3      	ldr	r3, [r4, #8]
   83ea6:	2a24      	cmp	r2, #36	; 0x24
   83ea8:	f8ca 3010 	str.w	r3, [sl, #16]
   83eac:	68e3      	ldr	r3, [r4, #12]
   83eae:	f8ca 3014 	str.w	r3, [sl, #20]
   83eb2:	d018      	beq.n	83ee6 <_realloc_r+0x352>
   83eb4:	3410      	adds	r4, #16
   83eb6:	f10a 0318 	add.w	r3, sl, #24
   83eba:	e770      	b.n	83d9e <_realloc_r+0x20a>
   83ebc:	6922      	ldr	r2, [r4, #16]
   83ebe:	f100 0318 	add.w	r3, r0, #24
   83ec2:	6102      	str	r2, [r0, #16]
   83ec4:	6961      	ldr	r1, [r4, #20]
   83ec6:	f104 0218 	add.w	r2, r4, #24
   83eca:	6141      	str	r1, [r0, #20]
   83ecc:	e71a      	b.n	83d04 <_realloc_r+0x170>
   83ece:	68a1      	ldr	r1, [r4, #8]
   83ed0:	2a24      	cmp	r2, #36	; 0x24
   83ed2:	f8ca 1010 	str.w	r1, [sl, #16]
   83ed6:	68e1      	ldr	r1, [r4, #12]
   83ed8:	f8ca 1014 	str.w	r1, [sl, #20]
   83edc:	d00f      	beq.n	83efe <_realloc_r+0x36a>
   83ede:	3410      	adds	r4, #16
   83ee0:	f10a 0218 	add.w	r2, sl, #24
   83ee4:	e744      	b.n	83d70 <_realloc_r+0x1dc>
   83ee6:	6922      	ldr	r2, [r4, #16]
   83ee8:	f10a 0320 	add.w	r3, sl, #32
   83eec:	f8ca 2018 	str.w	r2, [sl, #24]
   83ef0:	6962      	ldr	r2, [r4, #20]
   83ef2:	3418      	adds	r4, #24
   83ef4:	f8ca 201c 	str.w	r2, [sl, #28]
   83ef8:	e751      	b.n	83d9e <_realloc_r+0x20a>
   83efa:	463b      	mov	r3, r7
   83efc:	e791      	b.n	83e22 <_realloc_r+0x28e>
   83efe:	6921      	ldr	r1, [r4, #16]
   83f00:	f10a 0220 	add.w	r2, sl, #32
   83f04:	f8ca 1018 	str.w	r1, [sl, #24]
   83f08:	6961      	ldr	r1, [r4, #20]
   83f0a:	3418      	adds	r4, #24
   83f0c:	f8ca 101c 	str.w	r1, [sl, #28]
   83f10:	e72e      	b.n	83d70 <_realloc_r+0x1dc>
   83f12:	4621      	mov	r1, r4
   83f14:	4638      	mov	r0, r7
   83f16:	f8cd c004 	str.w	ip, [sp, #4]
   83f1a:	f7ff fdd1 	bl	83ac0 <memmove>
   83f1e:	f8dd c004 	ldr.w	ip, [sp, #4]
   83f22:	e784      	b.n	83e2e <_realloc_r+0x29a>
   83f24:	68a3      	ldr	r3, [r4, #8]
   83f26:	2a24      	cmp	r2, #36	; 0x24
   83f28:	f8ca 3010 	str.w	r3, [sl, #16]
   83f2c:	68e3      	ldr	r3, [r4, #12]
   83f2e:	f8ca 3014 	str.w	r3, [sl, #20]
   83f32:	d003      	beq.n	83f3c <_realloc_r+0x3a8>
   83f34:	3410      	adds	r4, #16
   83f36:	f10a 0318 	add.w	r3, sl, #24
   83f3a:	e772      	b.n	83e22 <_realloc_r+0x28e>
   83f3c:	6922      	ldr	r2, [r4, #16]
   83f3e:	f10a 0320 	add.w	r3, sl, #32
   83f42:	f8ca 2018 	str.w	r2, [sl, #24]
   83f46:	6962      	ldr	r2, [r4, #20]
   83f48:	3418      	adds	r4, #24
   83f4a:	f8ca 201c 	str.w	r2, [sl, #28]
   83f4e:	e768      	b.n	83e22 <_realloc_r+0x28e>
   83f50:	20070588 	.word	0x20070588

00083f54 <_sbrk_r>:
   83f54:	b538      	push	{r3, r4, r5, lr}
   83f56:	4c07      	ldr	r4, [pc, #28]	; (83f74 <_sbrk_r+0x20>)
   83f58:	2300      	movs	r3, #0
   83f5a:	4605      	mov	r5, r0
   83f5c:	4608      	mov	r0, r1
   83f5e:	6023      	str	r3, [r4, #0]
   83f60:	f7fd fca2 	bl	818a8 <_sbrk>
   83f64:	1c43      	adds	r3, r0, #1
   83f66:	d000      	beq.n	83f6a <_sbrk_r+0x16>
   83f68:	bd38      	pop	{r3, r4, r5, pc}
   83f6a:	6823      	ldr	r3, [r4, #0]
   83f6c:	2b00      	cmp	r3, #0
   83f6e:	d0fb      	beq.n	83f68 <_sbrk_r+0x14>
   83f70:	602b      	str	r3, [r5, #0]
   83f72:	bd38      	pop	{r3, r4, r5, pc}
   83f74:	20070b88 	.word	0x20070b88

00083f78 <__sread>:
   83f78:	b510      	push	{r4, lr}
   83f7a:	460c      	mov	r4, r1
   83f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83f80:	f000 f99e 	bl	842c0 <_read_r>
   83f84:	2800      	cmp	r0, #0
   83f86:	db03      	blt.n	83f90 <__sread+0x18>
   83f88:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83f8a:	4403      	add	r3, r0
   83f8c:	6523      	str	r3, [r4, #80]	; 0x50
   83f8e:	bd10      	pop	{r4, pc}
   83f90:	89a3      	ldrh	r3, [r4, #12]
   83f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83f96:	81a3      	strh	r3, [r4, #12]
   83f98:	bd10      	pop	{r4, pc}
   83f9a:	bf00      	nop

00083f9c <__swrite>:
   83f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83fa0:	460c      	mov	r4, r1
   83fa2:	8989      	ldrh	r1, [r1, #12]
   83fa4:	461d      	mov	r5, r3
   83fa6:	05cb      	lsls	r3, r1, #23
   83fa8:	4616      	mov	r6, r2
   83faa:	4607      	mov	r7, r0
   83fac:	d506      	bpl.n	83fbc <__swrite+0x20>
   83fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83fb2:	2200      	movs	r2, #0
   83fb4:	2302      	movs	r3, #2
   83fb6:	f000 f96f 	bl	84298 <_lseek_r>
   83fba:	89a1      	ldrh	r1, [r4, #12]
   83fbc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83fc0:	81a1      	strh	r1, [r4, #12]
   83fc2:	4638      	mov	r0, r7
   83fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83fc8:	4632      	mov	r2, r6
   83fca:	462b      	mov	r3, r5
   83fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83fd0:	f000 b87a 	b.w	840c8 <_write_r>

00083fd4 <__sseek>:
   83fd4:	b510      	push	{r4, lr}
   83fd6:	460c      	mov	r4, r1
   83fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83fdc:	f000 f95c 	bl	84298 <_lseek_r>
   83fe0:	89a3      	ldrh	r3, [r4, #12]
   83fe2:	1c42      	adds	r2, r0, #1
   83fe4:	bf0e      	itee	eq
   83fe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83fea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83fee:	6520      	strne	r0, [r4, #80]	; 0x50
   83ff0:	81a3      	strh	r3, [r4, #12]
   83ff2:	bd10      	pop	{r4, pc}

00083ff4 <__sclose>:
   83ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83ff8:	f000 b8ce 	b.w	84198 <_close_r>

00083ffc <strlen>:
   83ffc:	f020 0103 	bic.w	r1, r0, #3
   84000:	f010 0003 	ands.w	r0, r0, #3
   84004:	f1c0 0000 	rsb	r0, r0, #0
   84008:	f851 3b04 	ldr.w	r3, [r1], #4
   8400c:	f100 0c04 	add.w	ip, r0, #4
   84010:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   84014:	f06f 0200 	mvn.w	r2, #0
   84018:	bf1c      	itt	ne
   8401a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8401e:	4313      	orrne	r3, r2
   84020:	f04f 0c01 	mov.w	ip, #1
   84024:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84028:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8402c:	eba3 020c 	sub.w	r2, r3, ip
   84030:	ea22 0203 	bic.w	r2, r2, r3
   84034:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   84038:	bf04      	itt	eq
   8403a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8403e:	3004      	addeq	r0, #4
   84040:	d0f4      	beq.n	8402c <strlen+0x30>
   84042:	f013 0fff 	tst.w	r3, #255	; 0xff
   84046:	bf1f      	itttt	ne
   84048:	3001      	addne	r0, #1
   8404a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   8404e:	3001      	addne	r0, #1
   84050:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   84054:	bf18      	it	ne
   84056:	3001      	addne	r0, #1
   84058:	4770      	bx	lr
   8405a:	bf00      	nop

0008405c <_wcrtomb_r>:
   8405c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84060:	461e      	mov	r6, r3
   84062:	b086      	sub	sp, #24
   84064:	460c      	mov	r4, r1
   84066:	4605      	mov	r5, r0
   84068:	4617      	mov	r7, r2
   8406a:	4b0f      	ldr	r3, [pc, #60]	; (840a8 <_wcrtomb_r+0x4c>)
   8406c:	b191      	cbz	r1, 84094 <_wcrtomb_r+0x38>
   8406e:	f8d3 8000 	ldr.w	r8, [r3]
   84072:	f7ff f947 	bl	83304 <__locale_charset>
   84076:	9600      	str	r6, [sp, #0]
   84078:	4603      	mov	r3, r0
   8407a:	4621      	mov	r1, r4
   8407c:	463a      	mov	r2, r7
   8407e:	4628      	mov	r0, r5
   84080:	47c0      	blx	r8
   84082:	1c43      	adds	r3, r0, #1
   84084:	d103      	bne.n	8408e <_wcrtomb_r+0x32>
   84086:	2200      	movs	r2, #0
   84088:	238a      	movs	r3, #138	; 0x8a
   8408a:	6032      	str	r2, [r6, #0]
   8408c:	602b      	str	r3, [r5, #0]
   8408e:	b006      	add	sp, #24
   84090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84094:	681f      	ldr	r7, [r3, #0]
   84096:	f7ff f935 	bl	83304 <__locale_charset>
   8409a:	9600      	str	r6, [sp, #0]
   8409c:	4603      	mov	r3, r0
   8409e:	4622      	mov	r2, r4
   840a0:	4628      	mov	r0, r5
   840a2:	a903      	add	r1, sp, #12
   840a4:	47b8      	blx	r7
   840a6:	e7ec      	b.n	84082 <_wcrtomb_r+0x26>
   840a8:	20070998 	.word	0x20070998

000840ac <__ascii_wctomb>:
   840ac:	b121      	cbz	r1, 840b8 <__ascii_wctomb+0xc>
   840ae:	2aff      	cmp	r2, #255	; 0xff
   840b0:	d804      	bhi.n	840bc <__ascii_wctomb+0x10>
   840b2:	700a      	strb	r2, [r1, #0]
   840b4:	2001      	movs	r0, #1
   840b6:	4770      	bx	lr
   840b8:	4608      	mov	r0, r1
   840ba:	4770      	bx	lr
   840bc:	238a      	movs	r3, #138	; 0x8a
   840be:	6003      	str	r3, [r0, #0]
   840c0:	f04f 30ff 	mov.w	r0, #4294967295
   840c4:	4770      	bx	lr
   840c6:	bf00      	nop

000840c8 <_write_r>:
   840c8:	b570      	push	{r4, r5, r6, lr}
   840ca:	4c08      	ldr	r4, [pc, #32]	; (840ec <_write_r+0x24>)
   840cc:	4606      	mov	r6, r0
   840ce:	2500      	movs	r5, #0
   840d0:	4608      	mov	r0, r1
   840d2:	4611      	mov	r1, r2
   840d4:	461a      	mov	r2, r3
   840d6:	6025      	str	r5, [r4, #0]
   840d8:	f7fc fe88 	bl	80dec <_write>
   840dc:	1c43      	adds	r3, r0, #1
   840de:	d000      	beq.n	840e2 <_write_r+0x1a>
   840e0:	bd70      	pop	{r4, r5, r6, pc}
   840e2:	6823      	ldr	r3, [r4, #0]
   840e4:	2b00      	cmp	r3, #0
   840e6:	d0fb      	beq.n	840e0 <_write_r+0x18>
   840e8:	6033      	str	r3, [r6, #0]
   840ea:	bd70      	pop	{r4, r5, r6, pc}
   840ec:	20070b88 	.word	0x20070b88

000840f0 <__register_exitproc>:
   840f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   840f2:	4c27      	ldr	r4, [pc, #156]	; (84190 <__register_exitproc+0xa0>)
   840f4:	b085      	sub	sp, #20
   840f6:	6826      	ldr	r6, [r4, #0]
   840f8:	4607      	mov	r7, r0
   840fa:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   840fe:	2c00      	cmp	r4, #0
   84100:	d040      	beq.n	84184 <__register_exitproc+0x94>
   84102:	6865      	ldr	r5, [r4, #4]
   84104:	2d1f      	cmp	r5, #31
   84106:	dd1e      	ble.n	84146 <__register_exitproc+0x56>
   84108:	4822      	ldr	r0, [pc, #136]	; (84194 <__register_exitproc+0xa4>)
   8410a:	b918      	cbnz	r0, 84114 <__register_exitproc+0x24>
   8410c:	f04f 30ff 	mov.w	r0, #4294967295
   84110:	b005      	add	sp, #20
   84112:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84114:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84118:	9103      	str	r1, [sp, #12]
   8411a:	9202      	str	r2, [sp, #8]
   8411c:	9301      	str	r3, [sp, #4]
   8411e:	f7ff f96b 	bl	833f8 <malloc>
   84122:	9903      	ldr	r1, [sp, #12]
   84124:	4604      	mov	r4, r0
   84126:	9a02      	ldr	r2, [sp, #8]
   84128:	9b01      	ldr	r3, [sp, #4]
   8412a:	2800      	cmp	r0, #0
   8412c:	d0ee      	beq.n	8410c <__register_exitproc+0x1c>
   8412e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   84132:	2000      	movs	r0, #0
   84134:	6025      	str	r5, [r4, #0]
   84136:	6060      	str	r0, [r4, #4]
   84138:	4605      	mov	r5, r0
   8413a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8413e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   84142:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   84146:	b93f      	cbnz	r7, 84158 <__register_exitproc+0x68>
   84148:	1c6b      	adds	r3, r5, #1
   8414a:	2000      	movs	r0, #0
   8414c:	3502      	adds	r5, #2
   8414e:	6063      	str	r3, [r4, #4]
   84150:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   84154:	b005      	add	sp, #20
   84156:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84158:	2601      	movs	r6, #1
   8415a:	40ae      	lsls	r6, r5
   8415c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   84160:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   84164:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   84168:	2f02      	cmp	r7, #2
   8416a:	ea42 0206 	orr.w	r2, r2, r6
   8416e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   84172:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   84176:	d1e7      	bne.n	84148 <__register_exitproc+0x58>
   84178:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8417c:	431e      	orrs	r6, r3
   8417e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   84182:	e7e1      	b.n	84148 <__register_exitproc+0x58>
   84184:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   84188:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8418c:	e7b9      	b.n	84102 <__register_exitproc+0x12>
   8418e:	bf00      	nop
   84190:	000849f0 	.word	0x000849f0
   84194:	000833f9 	.word	0x000833f9

00084198 <_close_r>:
   84198:	b538      	push	{r3, r4, r5, lr}
   8419a:	4c07      	ldr	r4, [pc, #28]	; (841b8 <_close_r+0x20>)
   8419c:	2300      	movs	r3, #0
   8419e:	4605      	mov	r5, r0
   841a0:	4608      	mov	r0, r1
   841a2:	6023      	str	r3, [r4, #0]
   841a4:	f7fd fb9a 	bl	818dc <_close>
   841a8:	1c43      	adds	r3, r0, #1
   841aa:	d000      	beq.n	841ae <_close_r+0x16>
   841ac:	bd38      	pop	{r3, r4, r5, pc}
   841ae:	6823      	ldr	r3, [r4, #0]
   841b0:	2b00      	cmp	r3, #0
   841b2:	d0fb      	beq.n	841ac <_close_r+0x14>
   841b4:	602b      	str	r3, [r5, #0]
   841b6:	bd38      	pop	{r3, r4, r5, pc}
   841b8:	20070b88 	.word	0x20070b88

000841bc <_fclose_r>:
   841bc:	b570      	push	{r4, r5, r6, lr}
   841be:	460c      	mov	r4, r1
   841c0:	4605      	mov	r5, r0
   841c2:	b131      	cbz	r1, 841d2 <_fclose_r+0x16>
   841c4:	b110      	cbz	r0, 841cc <_fclose_r+0x10>
   841c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   841c8:	2b00      	cmp	r3, #0
   841ca:	d02f      	beq.n	8422c <_fclose_r+0x70>
   841cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   841d0:	b90b      	cbnz	r3, 841d6 <_fclose_r+0x1a>
   841d2:	2000      	movs	r0, #0
   841d4:	bd70      	pop	{r4, r5, r6, pc}
   841d6:	4628      	mov	r0, r5
   841d8:	4621      	mov	r1, r4
   841da:	f7fe fcb7 	bl	82b4c <_fflush_r>
   841de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   841e0:	4606      	mov	r6, r0
   841e2:	b133      	cbz	r3, 841f2 <_fclose_r+0x36>
   841e4:	4628      	mov	r0, r5
   841e6:	69e1      	ldr	r1, [r4, #28]
   841e8:	4798      	blx	r3
   841ea:	2800      	cmp	r0, #0
   841ec:	bfb8      	it	lt
   841ee:	f04f 36ff 	movlt.w	r6, #4294967295
   841f2:	89a3      	ldrh	r3, [r4, #12]
   841f4:	061b      	lsls	r3, r3, #24
   841f6:	d41c      	bmi.n	84232 <_fclose_r+0x76>
   841f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   841fa:	b141      	cbz	r1, 8420e <_fclose_r+0x52>
   841fc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84200:	4299      	cmp	r1, r3
   84202:	d002      	beq.n	8420a <_fclose_r+0x4e>
   84204:	4628      	mov	r0, r5
   84206:	f7fe fe01 	bl	82e0c <_free_r>
   8420a:	2300      	movs	r3, #0
   8420c:	6323      	str	r3, [r4, #48]	; 0x30
   8420e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84210:	b121      	cbz	r1, 8421c <_fclose_r+0x60>
   84212:	4628      	mov	r0, r5
   84214:	f7fe fdfa 	bl	82e0c <_free_r>
   84218:	2300      	movs	r3, #0
   8421a:	6463      	str	r3, [r4, #68]	; 0x44
   8421c:	f7fe fd2c 	bl	82c78 <__sfp_lock_acquire>
   84220:	2300      	movs	r3, #0
   84222:	81a3      	strh	r3, [r4, #12]
   84224:	f7fe fd2a 	bl	82c7c <__sfp_lock_release>
   84228:	4630      	mov	r0, r6
   8422a:	bd70      	pop	{r4, r5, r6, pc}
   8422c:	f7fe fcaa 	bl	82b84 <__sinit>
   84230:	e7cc      	b.n	841cc <_fclose_r+0x10>
   84232:	4628      	mov	r0, r5
   84234:	6921      	ldr	r1, [r4, #16]
   84236:	f7fe fde9 	bl	82e0c <_free_r>
   8423a:	e7dd      	b.n	841f8 <_fclose_r+0x3c>

0008423c <fclose>:
   8423c:	4b02      	ldr	r3, [pc, #8]	; (84248 <fclose+0xc>)
   8423e:	4601      	mov	r1, r0
   84240:	6818      	ldr	r0, [r3, #0]
   84242:	f7ff bfbb 	b.w	841bc <_fclose_r>
   84246:	bf00      	nop
   84248:	20070560 	.word	0x20070560

0008424c <_fstat_r>:
   8424c:	b538      	push	{r3, r4, r5, lr}
   8424e:	4c08      	ldr	r4, [pc, #32]	; (84270 <_fstat_r+0x24>)
   84250:	2300      	movs	r3, #0
   84252:	4605      	mov	r5, r0
   84254:	4608      	mov	r0, r1
   84256:	4611      	mov	r1, r2
   84258:	6023      	str	r3, [r4, #0]
   8425a:	f7fd fb43 	bl	818e4 <_fstat>
   8425e:	1c43      	adds	r3, r0, #1
   84260:	d000      	beq.n	84264 <_fstat_r+0x18>
   84262:	bd38      	pop	{r3, r4, r5, pc}
   84264:	6823      	ldr	r3, [r4, #0]
   84266:	2b00      	cmp	r3, #0
   84268:	d0fb      	beq.n	84262 <_fstat_r+0x16>
   8426a:	602b      	str	r3, [r5, #0]
   8426c:	bd38      	pop	{r3, r4, r5, pc}
   8426e:	bf00      	nop
   84270:	20070b88 	.word	0x20070b88

00084274 <_isatty_r>:
   84274:	b538      	push	{r3, r4, r5, lr}
   84276:	4c07      	ldr	r4, [pc, #28]	; (84294 <_isatty_r+0x20>)
   84278:	2300      	movs	r3, #0
   8427a:	4605      	mov	r5, r0
   8427c:	4608      	mov	r0, r1
   8427e:	6023      	str	r3, [r4, #0]
   84280:	f7fd fb36 	bl	818f0 <_isatty>
   84284:	1c43      	adds	r3, r0, #1
   84286:	d000      	beq.n	8428a <_isatty_r+0x16>
   84288:	bd38      	pop	{r3, r4, r5, pc}
   8428a:	6823      	ldr	r3, [r4, #0]
   8428c:	2b00      	cmp	r3, #0
   8428e:	d0fb      	beq.n	84288 <_isatty_r+0x14>
   84290:	602b      	str	r3, [r5, #0]
   84292:	bd38      	pop	{r3, r4, r5, pc}
   84294:	20070b88 	.word	0x20070b88

00084298 <_lseek_r>:
   84298:	b570      	push	{r4, r5, r6, lr}
   8429a:	4c08      	ldr	r4, [pc, #32]	; (842bc <_lseek_r+0x24>)
   8429c:	4606      	mov	r6, r0
   8429e:	2500      	movs	r5, #0
   842a0:	4608      	mov	r0, r1
   842a2:	4611      	mov	r1, r2
   842a4:	461a      	mov	r2, r3
   842a6:	6025      	str	r5, [r4, #0]
   842a8:	f7fd fb24 	bl	818f4 <_lseek>
   842ac:	1c43      	adds	r3, r0, #1
   842ae:	d000      	beq.n	842b2 <_lseek_r+0x1a>
   842b0:	bd70      	pop	{r4, r5, r6, pc}
   842b2:	6823      	ldr	r3, [r4, #0]
   842b4:	2b00      	cmp	r3, #0
   842b6:	d0fb      	beq.n	842b0 <_lseek_r+0x18>
   842b8:	6033      	str	r3, [r6, #0]
   842ba:	bd70      	pop	{r4, r5, r6, pc}
   842bc:	20070b88 	.word	0x20070b88

000842c0 <_read_r>:
   842c0:	b570      	push	{r4, r5, r6, lr}
   842c2:	4c08      	ldr	r4, [pc, #32]	; (842e4 <_read_r+0x24>)
   842c4:	4606      	mov	r6, r0
   842c6:	2500      	movs	r5, #0
   842c8:	4608      	mov	r0, r1
   842ca:	4611      	mov	r1, r2
   842cc:	461a      	mov	r2, r3
   842ce:	6025      	str	r5, [r4, #0]
   842d0:	f7fb ff3a 	bl	80148 <_read>
   842d4:	1c43      	adds	r3, r0, #1
   842d6:	d000      	beq.n	842da <_read_r+0x1a>
   842d8:	bd70      	pop	{r4, r5, r6, pc}
   842da:	6823      	ldr	r3, [r4, #0]
   842dc:	2b00      	cmp	r3, #0
   842de:	d0fb      	beq.n	842d8 <_read_r+0x18>
   842e0:	6033      	str	r3, [r6, #0]
   842e2:	bd70      	pop	{r4, r5, r6, pc}
   842e4:	20070b88 	.word	0x20070b88

000842e8 <__aeabi_uldivmod>:
   842e8:	b94b      	cbnz	r3, 842fe <__aeabi_uldivmod+0x16>
   842ea:	b942      	cbnz	r2, 842fe <__aeabi_uldivmod+0x16>
   842ec:	2900      	cmp	r1, #0
   842ee:	bf08      	it	eq
   842f0:	2800      	cmpeq	r0, #0
   842f2:	d002      	beq.n	842fa <__aeabi_uldivmod+0x12>
   842f4:	f04f 31ff 	mov.w	r1, #4294967295
   842f8:	4608      	mov	r0, r1
   842fa:	f000 b83b 	b.w	84374 <__aeabi_idiv0>
   842fe:	b082      	sub	sp, #8
   84300:	46ec      	mov	ip, sp
   84302:	e92d 5000 	stmdb	sp!, {ip, lr}
   84306:	f000 f81d 	bl	84344 <__gnu_uldivmod_helper>
   8430a:	f8dd e004 	ldr.w	lr, [sp, #4]
   8430e:	b002      	add	sp, #8
   84310:	bc0c      	pop	{r2, r3}
   84312:	4770      	bx	lr

00084314 <__gnu_ldivmod_helper>:
   84314:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   84318:	9e08      	ldr	r6, [sp, #32]
   8431a:	4614      	mov	r4, r2
   8431c:	461d      	mov	r5, r3
   8431e:	4680      	mov	r8, r0
   84320:	4689      	mov	r9, r1
   84322:	f000 f829 	bl	84378 <__divdi3>
   84326:	fb04 f301 	mul.w	r3, r4, r1
   8432a:	fba4 ab00 	umull	sl, fp, r4, r0
   8432e:	fb00 3205 	mla	r2, r0, r5, r3
   84332:	4493      	add	fp, r2
   84334:	ebb8 080a 	subs.w	r8, r8, sl
   84338:	eb69 090b 	sbc.w	r9, r9, fp
   8433c:	e9c6 8900 	strd	r8, r9, [r6]
   84340:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00084344 <__gnu_uldivmod_helper>:
   84344:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   84348:	9e08      	ldr	r6, [sp, #32]
   8434a:	4614      	mov	r4, r2
   8434c:	461d      	mov	r5, r3
   8434e:	4680      	mov	r8, r0
   84350:	4689      	mov	r9, r1
   84352:	f000 f961 	bl	84618 <__udivdi3>
   84356:	fb00 f505 	mul.w	r5, r0, r5
   8435a:	fba0 ab04 	umull	sl, fp, r0, r4
   8435e:	fb04 5401 	mla	r4, r4, r1, r5
   84362:	44a3      	add	fp, r4
   84364:	ebb8 080a 	subs.w	r8, r8, sl
   84368:	eb69 090b 	sbc.w	r9, r9, fp
   8436c:	e9c6 8900 	strd	r8, r9, [r6]
   84370:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00084374 <__aeabi_idiv0>:
   84374:	4770      	bx	lr
   84376:	bf00      	nop

00084378 <__divdi3>:
   84378:	2900      	cmp	r1, #0
   8437a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8437e:	f2c0 80a1 	blt.w	844c4 <__divdi3+0x14c>
   84382:	2400      	movs	r4, #0
   84384:	2b00      	cmp	r3, #0
   84386:	f2c0 8098 	blt.w	844ba <__divdi3+0x142>
   8438a:	4615      	mov	r5, r2
   8438c:	4606      	mov	r6, r0
   8438e:	460f      	mov	r7, r1
   84390:	2b00      	cmp	r3, #0
   84392:	d13f      	bne.n	84414 <__divdi3+0x9c>
   84394:	428a      	cmp	r2, r1
   84396:	d958      	bls.n	8444a <__divdi3+0xd2>
   84398:	fab2 f382 	clz	r3, r2
   8439c:	b14b      	cbz	r3, 843b2 <__divdi3+0x3a>
   8439e:	f1c3 0220 	rsb	r2, r3, #32
   843a2:	fa01 f703 	lsl.w	r7, r1, r3
   843a6:	fa20 f202 	lsr.w	r2, r0, r2
   843aa:	409d      	lsls	r5, r3
   843ac:	fa00 f603 	lsl.w	r6, r0, r3
   843b0:	4317      	orrs	r7, r2
   843b2:	0c29      	lsrs	r1, r5, #16
   843b4:	fbb7 f2f1 	udiv	r2, r7, r1
   843b8:	fb01 7712 	mls	r7, r1, r2, r7
   843bc:	b2a8      	uxth	r0, r5
   843be:	fb00 f302 	mul.w	r3, r0, r2
   843c2:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   843c6:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   843ca:	42bb      	cmp	r3, r7
   843cc:	d909      	bls.n	843e2 <__divdi3+0x6a>
   843ce:	197f      	adds	r7, r7, r5
   843d0:	f102 3cff 	add.w	ip, r2, #4294967295
   843d4:	f080 8105 	bcs.w	845e2 <__divdi3+0x26a>
   843d8:	42bb      	cmp	r3, r7
   843da:	f240 8102 	bls.w	845e2 <__divdi3+0x26a>
   843de:	3a02      	subs	r2, #2
   843e0:	442f      	add	r7, r5
   843e2:	1aff      	subs	r7, r7, r3
   843e4:	fbb7 f3f1 	udiv	r3, r7, r1
   843e8:	fb01 7113 	mls	r1, r1, r3, r7
   843ec:	fb00 f003 	mul.w	r0, r0, r3
   843f0:	b2b6      	uxth	r6, r6
   843f2:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   843f6:	4288      	cmp	r0, r1
   843f8:	d908      	bls.n	8440c <__divdi3+0x94>
   843fa:	1949      	adds	r1, r1, r5
   843fc:	f103 37ff 	add.w	r7, r3, #4294967295
   84400:	f080 80f1 	bcs.w	845e6 <__divdi3+0x26e>
   84404:	4288      	cmp	r0, r1
   84406:	f240 80ee 	bls.w	845e6 <__divdi3+0x26e>
   8440a:	3b02      	subs	r3, #2
   8440c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   84410:	2300      	movs	r3, #0
   84412:	e003      	b.n	8441c <__divdi3+0xa4>
   84414:	428b      	cmp	r3, r1
   84416:	d90a      	bls.n	8442e <__divdi3+0xb6>
   84418:	2300      	movs	r3, #0
   8441a:	461a      	mov	r2, r3
   8441c:	4610      	mov	r0, r2
   8441e:	4619      	mov	r1, r3
   84420:	b114      	cbz	r4, 84428 <__divdi3+0xb0>
   84422:	4240      	negs	r0, r0
   84424:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84428:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8442c:	4770      	bx	lr
   8442e:	fab3 f883 	clz	r8, r3
   84432:	f1b8 0f00 	cmp.w	r8, #0
   84436:	f040 8088 	bne.w	8454a <__divdi3+0x1d2>
   8443a:	428b      	cmp	r3, r1
   8443c:	d302      	bcc.n	84444 <__divdi3+0xcc>
   8443e:	4282      	cmp	r2, r0
   84440:	f200 80e2 	bhi.w	84608 <__divdi3+0x290>
   84444:	2300      	movs	r3, #0
   84446:	2201      	movs	r2, #1
   84448:	e7e8      	b.n	8441c <__divdi3+0xa4>
   8444a:	b912      	cbnz	r2, 84452 <__divdi3+0xda>
   8444c:	2301      	movs	r3, #1
   8444e:	fbb3 f5f2 	udiv	r5, r3, r2
   84452:	fab5 f285 	clz	r2, r5
   84456:	2a00      	cmp	r2, #0
   84458:	d13a      	bne.n	844d0 <__divdi3+0x158>
   8445a:	1b7f      	subs	r7, r7, r5
   8445c:	0c28      	lsrs	r0, r5, #16
   8445e:	fa1f fc85 	uxth.w	ip, r5
   84462:	2301      	movs	r3, #1
   84464:	fbb7 f1f0 	udiv	r1, r7, r0
   84468:	fb00 7711 	mls	r7, r0, r1, r7
   8446c:	fb0c f201 	mul.w	r2, ip, r1
   84470:	ea4f 4816 	mov.w	r8, r6, lsr #16
   84474:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   84478:	42ba      	cmp	r2, r7
   8447a:	d907      	bls.n	8448c <__divdi3+0x114>
   8447c:	197f      	adds	r7, r7, r5
   8447e:	f101 38ff 	add.w	r8, r1, #4294967295
   84482:	d202      	bcs.n	8448a <__divdi3+0x112>
   84484:	42ba      	cmp	r2, r7
   84486:	f200 80c4 	bhi.w	84612 <__divdi3+0x29a>
   8448a:	4641      	mov	r1, r8
   8448c:	1abf      	subs	r7, r7, r2
   8448e:	fbb7 f2f0 	udiv	r2, r7, r0
   84492:	fb00 7012 	mls	r0, r0, r2, r7
   84496:	fb0c fc02 	mul.w	ip, ip, r2
   8449a:	b2b6      	uxth	r6, r6
   8449c:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   844a0:	4584      	cmp	ip, r0
   844a2:	d907      	bls.n	844b4 <__divdi3+0x13c>
   844a4:	1940      	adds	r0, r0, r5
   844a6:	f102 37ff 	add.w	r7, r2, #4294967295
   844aa:	d202      	bcs.n	844b2 <__divdi3+0x13a>
   844ac:	4584      	cmp	ip, r0
   844ae:	f200 80ae 	bhi.w	8460e <__divdi3+0x296>
   844b2:	463a      	mov	r2, r7
   844b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   844b8:	e7b0      	b.n	8441c <__divdi3+0xa4>
   844ba:	43e4      	mvns	r4, r4
   844bc:	4252      	negs	r2, r2
   844be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   844c2:	e762      	b.n	8438a <__divdi3+0x12>
   844c4:	4240      	negs	r0, r0
   844c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   844ca:	f04f 34ff 	mov.w	r4, #4294967295
   844ce:	e759      	b.n	84384 <__divdi3+0xc>
   844d0:	4095      	lsls	r5, r2
   844d2:	f1c2 0920 	rsb	r9, r2, #32
   844d6:	fa27 f109 	lsr.w	r1, r7, r9
   844da:	fa26 f909 	lsr.w	r9, r6, r9
   844de:	4097      	lsls	r7, r2
   844e0:	0c28      	lsrs	r0, r5, #16
   844e2:	fbb1 f8f0 	udiv	r8, r1, r0
   844e6:	fb00 1118 	mls	r1, r0, r8, r1
   844ea:	fa1f fc85 	uxth.w	ip, r5
   844ee:	fb0c f308 	mul.w	r3, ip, r8
   844f2:	ea49 0907 	orr.w	r9, r9, r7
   844f6:	ea4f 4719 	mov.w	r7, r9, lsr #16
   844fa:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   844fe:	428b      	cmp	r3, r1
   84500:	fa06 f602 	lsl.w	r6, r6, r2
   84504:	d908      	bls.n	84518 <__divdi3+0x1a0>
   84506:	1949      	adds	r1, r1, r5
   84508:	f108 32ff 	add.w	r2, r8, #4294967295
   8450c:	d27a      	bcs.n	84604 <__divdi3+0x28c>
   8450e:	428b      	cmp	r3, r1
   84510:	d978      	bls.n	84604 <__divdi3+0x28c>
   84512:	f1a8 0802 	sub.w	r8, r8, #2
   84516:	4429      	add	r1, r5
   84518:	1ac9      	subs	r1, r1, r3
   8451a:	fbb1 f3f0 	udiv	r3, r1, r0
   8451e:	fb00 1713 	mls	r7, r0, r3, r1
   84522:	fb0c f203 	mul.w	r2, ip, r3
   84526:	fa1f f989 	uxth.w	r9, r9
   8452a:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   8452e:	42ba      	cmp	r2, r7
   84530:	d907      	bls.n	84542 <__divdi3+0x1ca>
   84532:	197f      	adds	r7, r7, r5
   84534:	f103 31ff 	add.w	r1, r3, #4294967295
   84538:	d260      	bcs.n	845fc <__divdi3+0x284>
   8453a:	42ba      	cmp	r2, r7
   8453c:	d95e      	bls.n	845fc <__divdi3+0x284>
   8453e:	3b02      	subs	r3, #2
   84540:	442f      	add	r7, r5
   84542:	1abf      	subs	r7, r7, r2
   84544:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   84548:	e78c      	b.n	84464 <__divdi3+0xec>
   8454a:	f1c8 0220 	rsb	r2, r8, #32
   8454e:	fa25 f102 	lsr.w	r1, r5, r2
   84552:	fa03 fc08 	lsl.w	ip, r3, r8
   84556:	fa27 f302 	lsr.w	r3, r7, r2
   8455a:	fa20 f202 	lsr.w	r2, r0, r2
   8455e:	fa07 f708 	lsl.w	r7, r7, r8
   84562:	ea41 0c0c 	orr.w	ip, r1, ip
   84566:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8456a:	fbb3 f1f9 	udiv	r1, r3, r9
   8456e:	fb09 3311 	mls	r3, r9, r1, r3
   84572:	fa1f fa8c 	uxth.w	sl, ip
   84576:	fb0a fb01 	mul.w	fp, sl, r1
   8457a:	4317      	orrs	r7, r2
   8457c:	0c3a      	lsrs	r2, r7, #16
   8457e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   84582:	459b      	cmp	fp, r3
   84584:	fa05 f008 	lsl.w	r0, r5, r8
   84588:	d908      	bls.n	8459c <__divdi3+0x224>
   8458a:	eb13 030c 	adds.w	r3, r3, ip
   8458e:	f101 32ff 	add.w	r2, r1, #4294967295
   84592:	d235      	bcs.n	84600 <__divdi3+0x288>
   84594:	459b      	cmp	fp, r3
   84596:	d933      	bls.n	84600 <__divdi3+0x288>
   84598:	3902      	subs	r1, #2
   8459a:	4463      	add	r3, ip
   8459c:	ebcb 0303 	rsb	r3, fp, r3
   845a0:	fbb3 f2f9 	udiv	r2, r3, r9
   845a4:	fb09 3312 	mls	r3, r9, r2, r3
   845a8:	fb0a fa02 	mul.w	sl, sl, r2
   845ac:	b2bf      	uxth	r7, r7
   845ae:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   845b2:	45ba      	cmp	sl, r7
   845b4:	d908      	bls.n	845c8 <__divdi3+0x250>
   845b6:	eb17 070c 	adds.w	r7, r7, ip
   845ba:	f102 33ff 	add.w	r3, r2, #4294967295
   845be:	d21b      	bcs.n	845f8 <__divdi3+0x280>
   845c0:	45ba      	cmp	sl, r7
   845c2:	d919      	bls.n	845f8 <__divdi3+0x280>
   845c4:	3a02      	subs	r2, #2
   845c6:	4467      	add	r7, ip
   845c8:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   845cc:	fba5 0100 	umull	r0, r1, r5, r0
   845d0:	ebca 0707 	rsb	r7, sl, r7
   845d4:	428f      	cmp	r7, r1
   845d6:	f04f 0300 	mov.w	r3, #0
   845da:	d30a      	bcc.n	845f2 <__divdi3+0x27a>
   845dc:	d005      	beq.n	845ea <__divdi3+0x272>
   845de:	462a      	mov	r2, r5
   845e0:	e71c      	b.n	8441c <__divdi3+0xa4>
   845e2:	4662      	mov	r2, ip
   845e4:	e6fd      	b.n	843e2 <__divdi3+0x6a>
   845e6:	463b      	mov	r3, r7
   845e8:	e710      	b.n	8440c <__divdi3+0x94>
   845ea:	fa06 f608 	lsl.w	r6, r6, r8
   845ee:	4286      	cmp	r6, r0
   845f0:	d2f5      	bcs.n	845de <__divdi3+0x266>
   845f2:	1e6a      	subs	r2, r5, #1
   845f4:	2300      	movs	r3, #0
   845f6:	e711      	b.n	8441c <__divdi3+0xa4>
   845f8:	461a      	mov	r2, r3
   845fa:	e7e5      	b.n	845c8 <__divdi3+0x250>
   845fc:	460b      	mov	r3, r1
   845fe:	e7a0      	b.n	84542 <__divdi3+0x1ca>
   84600:	4611      	mov	r1, r2
   84602:	e7cb      	b.n	8459c <__divdi3+0x224>
   84604:	4690      	mov	r8, r2
   84606:	e787      	b.n	84518 <__divdi3+0x1a0>
   84608:	4643      	mov	r3, r8
   8460a:	4642      	mov	r2, r8
   8460c:	e706      	b.n	8441c <__divdi3+0xa4>
   8460e:	3a02      	subs	r2, #2
   84610:	e750      	b.n	844b4 <__divdi3+0x13c>
   84612:	3902      	subs	r1, #2
   84614:	442f      	add	r7, r5
   84616:	e739      	b.n	8448c <__divdi3+0x114>

00084618 <__udivdi3>:
   84618:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8461c:	4614      	mov	r4, r2
   8461e:	4605      	mov	r5, r0
   84620:	460e      	mov	r6, r1
   84622:	2b00      	cmp	r3, #0
   84624:	d143      	bne.n	846ae <__udivdi3+0x96>
   84626:	428a      	cmp	r2, r1
   84628:	d953      	bls.n	846d2 <__udivdi3+0xba>
   8462a:	fab2 f782 	clz	r7, r2
   8462e:	b157      	cbz	r7, 84646 <__udivdi3+0x2e>
   84630:	f1c7 0620 	rsb	r6, r7, #32
   84634:	fa20 f606 	lsr.w	r6, r0, r6
   84638:	fa01 f307 	lsl.w	r3, r1, r7
   8463c:	fa02 f407 	lsl.w	r4, r2, r7
   84640:	fa00 f507 	lsl.w	r5, r0, r7
   84644:	431e      	orrs	r6, r3
   84646:	0c21      	lsrs	r1, r4, #16
   84648:	fbb6 f2f1 	udiv	r2, r6, r1
   8464c:	fb01 6612 	mls	r6, r1, r2, r6
   84650:	b2a0      	uxth	r0, r4
   84652:	fb00 f302 	mul.w	r3, r0, r2
   84656:	0c2f      	lsrs	r7, r5, #16
   84658:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8465c:	42b3      	cmp	r3, r6
   8465e:	d909      	bls.n	84674 <__udivdi3+0x5c>
   84660:	1936      	adds	r6, r6, r4
   84662:	f102 37ff 	add.w	r7, r2, #4294967295
   84666:	f080 80fd 	bcs.w	84864 <__udivdi3+0x24c>
   8466a:	42b3      	cmp	r3, r6
   8466c:	f240 80fa 	bls.w	84864 <__udivdi3+0x24c>
   84670:	3a02      	subs	r2, #2
   84672:	4426      	add	r6, r4
   84674:	1af6      	subs	r6, r6, r3
   84676:	fbb6 f3f1 	udiv	r3, r6, r1
   8467a:	fb01 6113 	mls	r1, r1, r3, r6
   8467e:	fb00 f003 	mul.w	r0, r0, r3
   84682:	b2ad      	uxth	r5, r5
   84684:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   84688:	4288      	cmp	r0, r1
   8468a:	d908      	bls.n	8469e <__udivdi3+0x86>
   8468c:	1909      	adds	r1, r1, r4
   8468e:	f103 36ff 	add.w	r6, r3, #4294967295
   84692:	f080 80e9 	bcs.w	84868 <__udivdi3+0x250>
   84696:	4288      	cmp	r0, r1
   84698:	f240 80e6 	bls.w	84868 <__udivdi3+0x250>
   8469c:	3b02      	subs	r3, #2
   8469e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   846a2:	2300      	movs	r3, #0
   846a4:	4610      	mov	r0, r2
   846a6:	4619      	mov	r1, r3
   846a8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   846ac:	4770      	bx	lr
   846ae:	428b      	cmp	r3, r1
   846b0:	d84c      	bhi.n	8474c <__udivdi3+0x134>
   846b2:	fab3 f683 	clz	r6, r3
   846b6:	2e00      	cmp	r6, #0
   846b8:	d14f      	bne.n	8475a <__udivdi3+0x142>
   846ba:	428b      	cmp	r3, r1
   846bc:	d302      	bcc.n	846c4 <__udivdi3+0xac>
   846be:	4282      	cmp	r2, r0
   846c0:	f200 80dd 	bhi.w	8487e <__udivdi3+0x266>
   846c4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   846c8:	2300      	movs	r3, #0
   846ca:	2201      	movs	r2, #1
   846cc:	4610      	mov	r0, r2
   846ce:	4619      	mov	r1, r3
   846d0:	4770      	bx	lr
   846d2:	b912      	cbnz	r2, 846da <__udivdi3+0xc2>
   846d4:	2401      	movs	r4, #1
   846d6:	fbb4 f4f2 	udiv	r4, r4, r2
   846da:	fab4 f284 	clz	r2, r4
   846de:	2a00      	cmp	r2, #0
   846e0:	f040 8082 	bne.w	847e8 <__udivdi3+0x1d0>
   846e4:	1b09      	subs	r1, r1, r4
   846e6:	0c26      	lsrs	r6, r4, #16
   846e8:	b2a7      	uxth	r7, r4
   846ea:	2301      	movs	r3, #1
   846ec:	fbb1 f0f6 	udiv	r0, r1, r6
   846f0:	fb06 1110 	mls	r1, r6, r0, r1
   846f4:	fb07 f200 	mul.w	r2, r7, r0
   846f8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   846fc:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   84700:	428a      	cmp	r2, r1
   84702:	d907      	bls.n	84714 <__udivdi3+0xfc>
   84704:	1909      	adds	r1, r1, r4
   84706:	f100 3cff 	add.w	ip, r0, #4294967295
   8470a:	d202      	bcs.n	84712 <__udivdi3+0xfa>
   8470c:	428a      	cmp	r2, r1
   8470e:	f200 80c8 	bhi.w	848a2 <__udivdi3+0x28a>
   84712:	4660      	mov	r0, ip
   84714:	1a89      	subs	r1, r1, r2
   84716:	fbb1 f2f6 	udiv	r2, r1, r6
   8471a:	fb06 1112 	mls	r1, r6, r2, r1
   8471e:	fb07 f702 	mul.w	r7, r7, r2
   84722:	b2ad      	uxth	r5, r5
   84724:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   84728:	42af      	cmp	r7, r5
   8472a:	d908      	bls.n	8473e <__udivdi3+0x126>
   8472c:	192c      	adds	r4, r5, r4
   8472e:	f102 31ff 	add.w	r1, r2, #4294967295
   84732:	f080 809b 	bcs.w	8486c <__udivdi3+0x254>
   84736:	42a7      	cmp	r7, r4
   84738:	f240 8098 	bls.w	8486c <__udivdi3+0x254>
   8473c:	3a02      	subs	r2, #2
   8473e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   84742:	4610      	mov	r0, r2
   84744:	4619      	mov	r1, r3
   84746:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8474a:	4770      	bx	lr
   8474c:	2300      	movs	r3, #0
   8474e:	461a      	mov	r2, r3
   84750:	4610      	mov	r0, r2
   84752:	4619      	mov	r1, r3
   84754:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84758:	4770      	bx	lr
   8475a:	f1c6 0520 	rsb	r5, r6, #32
   8475e:	fa22 f705 	lsr.w	r7, r2, r5
   84762:	fa03 f406 	lsl.w	r4, r3, r6
   84766:	fa21 f305 	lsr.w	r3, r1, r5
   8476a:	fa01 fb06 	lsl.w	fp, r1, r6
   8476e:	fa20 f505 	lsr.w	r5, r0, r5
   84772:	433c      	orrs	r4, r7
   84774:	ea4f 4814 	mov.w	r8, r4, lsr #16
   84778:	fbb3 fcf8 	udiv	ip, r3, r8
   8477c:	fb08 331c 	mls	r3, r8, ip, r3
   84780:	fa1f f984 	uxth.w	r9, r4
   84784:	fb09 fa0c 	mul.w	sl, r9, ip
   84788:	ea45 0b0b 	orr.w	fp, r5, fp
   8478c:	ea4f 451b 	mov.w	r5, fp, lsr #16
   84790:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   84794:	459a      	cmp	sl, r3
   84796:	fa02 f206 	lsl.w	r2, r2, r6
   8479a:	d904      	bls.n	847a6 <__udivdi3+0x18e>
   8479c:	191b      	adds	r3, r3, r4
   8479e:	f10c 35ff 	add.w	r5, ip, #4294967295
   847a2:	d36f      	bcc.n	84884 <__udivdi3+0x26c>
   847a4:	46ac      	mov	ip, r5
   847a6:	ebca 0303 	rsb	r3, sl, r3
   847aa:	fbb3 f5f8 	udiv	r5, r3, r8
   847ae:	fb08 3315 	mls	r3, r8, r5, r3
   847b2:	fb09 f905 	mul.w	r9, r9, r5
   847b6:	fa1f fb8b 	uxth.w	fp, fp
   847ba:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   847be:	45b9      	cmp	r9, r7
   847c0:	d904      	bls.n	847cc <__udivdi3+0x1b4>
   847c2:	193f      	adds	r7, r7, r4
   847c4:	f105 33ff 	add.w	r3, r5, #4294967295
   847c8:	d362      	bcc.n	84890 <__udivdi3+0x278>
   847ca:	461d      	mov	r5, r3
   847cc:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   847d0:	fbac 2302 	umull	r2, r3, ip, r2
   847d4:	ebc9 0707 	rsb	r7, r9, r7
   847d8:	429f      	cmp	r7, r3
   847da:	f04f 0500 	mov.w	r5, #0
   847de:	d34a      	bcc.n	84876 <__udivdi3+0x25e>
   847e0:	d046      	beq.n	84870 <__udivdi3+0x258>
   847e2:	4662      	mov	r2, ip
   847e4:	462b      	mov	r3, r5
   847e6:	e75d      	b.n	846a4 <__udivdi3+0x8c>
   847e8:	4094      	lsls	r4, r2
   847ea:	f1c2 0920 	rsb	r9, r2, #32
   847ee:	fa21 fc09 	lsr.w	ip, r1, r9
   847f2:	4091      	lsls	r1, r2
   847f4:	fa20 f909 	lsr.w	r9, r0, r9
   847f8:	0c26      	lsrs	r6, r4, #16
   847fa:	fbbc f8f6 	udiv	r8, ip, r6
   847fe:	fb06 cc18 	mls	ip, r6, r8, ip
   84802:	b2a7      	uxth	r7, r4
   84804:	fb07 f308 	mul.w	r3, r7, r8
   84808:	ea49 0901 	orr.w	r9, r9, r1
   8480c:	ea4f 4119 	mov.w	r1, r9, lsr #16
   84810:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   84814:	4563      	cmp	r3, ip
   84816:	fa00 f502 	lsl.w	r5, r0, r2
   8481a:	d909      	bls.n	84830 <__udivdi3+0x218>
   8481c:	eb1c 0c04 	adds.w	ip, ip, r4
   84820:	f108 32ff 	add.w	r2, r8, #4294967295
   84824:	d23b      	bcs.n	8489e <__udivdi3+0x286>
   84826:	4563      	cmp	r3, ip
   84828:	d939      	bls.n	8489e <__udivdi3+0x286>
   8482a:	f1a8 0802 	sub.w	r8, r8, #2
   8482e:	44a4      	add	ip, r4
   84830:	ebc3 0c0c 	rsb	ip, r3, ip
   84834:	fbbc f3f6 	udiv	r3, ip, r6
   84838:	fb06 c113 	mls	r1, r6, r3, ip
   8483c:	fb07 f203 	mul.w	r2, r7, r3
   84840:	fa1f f989 	uxth.w	r9, r9
   84844:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   84848:	428a      	cmp	r2, r1
   8484a:	d907      	bls.n	8485c <__udivdi3+0x244>
   8484c:	1909      	adds	r1, r1, r4
   8484e:	f103 30ff 	add.w	r0, r3, #4294967295
   84852:	d222      	bcs.n	8489a <__udivdi3+0x282>
   84854:	428a      	cmp	r2, r1
   84856:	d920      	bls.n	8489a <__udivdi3+0x282>
   84858:	3b02      	subs	r3, #2
   8485a:	4421      	add	r1, r4
   8485c:	1a89      	subs	r1, r1, r2
   8485e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   84862:	e743      	b.n	846ec <__udivdi3+0xd4>
   84864:	463a      	mov	r2, r7
   84866:	e705      	b.n	84674 <__udivdi3+0x5c>
   84868:	4633      	mov	r3, r6
   8486a:	e718      	b.n	8469e <__udivdi3+0x86>
   8486c:	460a      	mov	r2, r1
   8486e:	e766      	b.n	8473e <__udivdi3+0x126>
   84870:	40b0      	lsls	r0, r6
   84872:	4290      	cmp	r0, r2
   84874:	d2b5      	bcs.n	847e2 <__udivdi3+0x1ca>
   84876:	f10c 32ff 	add.w	r2, ip, #4294967295
   8487a:	2300      	movs	r3, #0
   8487c:	e712      	b.n	846a4 <__udivdi3+0x8c>
   8487e:	4633      	mov	r3, r6
   84880:	4632      	mov	r2, r6
   84882:	e70f      	b.n	846a4 <__udivdi3+0x8c>
   84884:	459a      	cmp	sl, r3
   84886:	d98d      	bls.n	847a4 <__udivdi3+0x18c>
   84888:	f1ac 0c02 	sub.w	ip, ip, #2
   8488c:	4423      	add	r3, r4
   8488e:	e78a      	b.n	847a6 <__udivdi3+0x18e>
   84890:	45b9      	cmp	r9, r7
   84892:	d99a      	bls.n	847ca <__udivdi3+0x1b2>
   84894:	3d02      	subs	r5, #2
   84896:	4427      	add	r7, r4
   84898:	e798      	b.n	847cc <__udivdi3+0x1b4>
   8489a:	4603      	mov	r3, r0
   8489c:	e7de      	b.n	8485c <__udivdi3+0x244>
   8489e:	4690      	mov	r8, r2
   848a0:	e7c6      	b.n	84830 <__udivdi3+0x218>
   848a2:	3802      	subs	r0, #2
   848a4:	4421      	add	r1, r4
   848a6:	e735      	b.n	84714 <__udivdi3+0xfc>

000848a8 <UnityStrOk>:
   848a8:	4b4f 0000                                   OK..

000848ac <UnityStrSpacer>:
   848ac:	202e 0000                                   . ..

000848b0 <UnityStrWas>:
   848b0:	5720 7361 0020 0000                          Was ...

000848b8 <UnityStrFail>:
   848b8:	4146 4c49 0000 0000                         FAIL....

000848c0 <UnityStrExpected>:
   848c0:	4520 7078 6365 6574 2064 0000                Expected ..

000848cc <UnityStrBreaker>:
   848cc:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   848dc:	2d2d 2d2d 2d2d 002d                         -------.

000848e4 <UnityStrResultsFailures>:
   848e4:	4620 6961 756c 6572 2073 0000                Failures ..

000848f0 <UnityStrResultsIgnored>:
   848f0:	4920 6e67 726f 6465 0020 0000                Ignored ...

000848fc <UnityStrResultsTests>:
   848fc:	5420 7365 7374 0020                          Tests .

00084904 <UnityStrPass>:
   84904:	4150 5353 0000 0000 4250 3732 6920 2073     PASS....PB27 is 
   84914:	6f6e 2074 6e69 7469 6169 696c 6573 0064     not initialised.
   84924:	4250 3732 6920 2073 6f6e 2074 6e61 6f20     PB27 is not an o
   84934:	7475 7570 0074 0000 4250 3632 6920 2073     utput...PB26 is 
   84944:	6f6e 2074 6e61 6f20 7475 7570 0074 0000     not an output...
   84954:	4250 3632 6920 2073 6f6e 2074 6968 6867     PB26 is not high
   84964:	0000 0000 4250 3732 6920 2073 6f6e 2074     ....PB27 is not 
   84974:	6968 6867 0000 0000 4250 3732 6920 2073     high....PB27 is 
   84984:	6f6e 2074 6f6c 0077 6f43 736e 6c6f 2065     not low.Console 
   84994:	6572 6461 0a79 0000 3d3d 3d3d 3d3d 3d3d     ready...========
   849a4:	3d3d 3d3d 0a3d 0000 2e2e 742f 7365 2f74     =====...../test/
   849b4:	6574 7473 6944 6967 6174 496c 2e4f 0063     testDigitalIO.c.
   849c4:	6574 7473 645f 6769 7469 6c61 7544 5065     test_digitalDueP
   849d4:	6e69 3331 6e49 7469 6169 696c 6573 7250     in13InitialisePr
   849e4:	706f 7265 796c 0000 0043 0000               operly..C...

000849f0 <_global_impure_ptr>:
   849f0:	0138 2007 3130 3332 3534 3736 3938 4241     8.. 0123456789AB
   84a00:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
   84a10:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
   84a20:	296c 0000                                   l)..

00084a24 <zeroes.6721>:
   84a24:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00084a34 <blanks.6720>:
   84a34:	2020 2020 2020 2020 2020 2020 2020 2020                     

00084a44 <_init>:
   84a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84a46:	bf00      	nop
   84a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84a4a:	bc08      	pop	{r3}
   84a4c:	469e      	mov	lr, r3
   84a4e:	4770      	bx	lr

00084a50 <__init_array_start>:
   84a50:	000829e5 	.word	0x000829e5

00084a54 <__frame_dummy_init_array_entry>:
   84a54:	00080119                                ....

00084a58 <_fini>:
   84a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84a5a:	bf00      	nop
   84a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84a5e:	bc08      	pop	{r3}
   84a60:	469e      	mov	lr, r3
   84a62:	4770      	bx	lr

00084a64 <__fini_array_start>:
   84a64:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900 00000000                       ..=.....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
2007016c:	000849ec 00000000 00000000 00000000     .I..............
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <_impure_ptr>:
20070560:	20070138                                8.. 

20070564 <lc_ctype_charset>:
20070564:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070584 <__mb_cur_max>:
20070584:	00000001                                ....

20070588 <__malloc_av_>:
	...
20070590:	20070588 20070588 20070590 20070590     ... ... ... ... 
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 

20070990 <__malloc_trim_threshold>:
20070990:	00020000                                ....

20070994 <__malloc_sbrk_base>:
20070994:	ffffffff                                ....

20070998 <__wctomb>:
20070998:	000840ad                                .@..
