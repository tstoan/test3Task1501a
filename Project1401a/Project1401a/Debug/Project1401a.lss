
Project1401a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f6c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000974  20070000  00082f6c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000001f0  20070974  000838e0  00010974  2**2
                  ALLOC
  3 .stack        00002004  20070b64  00083ad0  00010974  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010974  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001099d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000ea4c  00000000  00000000  000109f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025b8  00000000  00000000  0001f444  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006134  00000000  00000000  000219fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b30  00000000  00000000  00027b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a08  00000000  00000000  00028660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018e87  00000000  00000000  00029068  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ecd1  00000000  00000000  00041eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006bae1  00000000  00000000  00050bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f64  00000000  00000000  000bc6a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b68 	.word	0x20072b68
   80004:	000819b1 	.word	0x000819b1
   80008:	000819ad 	.word	0x000819ad
   8000c:	000819ad 	.word	0x000819ad
   80010:	000819ad 	.word	0x000819ad
   80014:	000819ad 	.word	0x000819ad
   80018:	000819ad 	.word	0x000819ad
	...
   8002c:	000819ad 	.word	0x000819ad
   80030:	000819ad 	.word	0x000819ad
   80034:	00000000 	.word	0x00000000
   80038:	000819ad 	.word	0x000819ad
   8003c:	000819ad 	.word	0x000819ad
   80040:	000819ad 	.word	0x000819ad
   80044:	000819ad 	.word	0x000819ad
   80048:	000819ad 	.word	0x000819ad
   8004c:	000819ad 	.word	0x000819ad
   80050:	000819ad 	.word	0x000819ad
   80054:	000819ad 	.word	0x000819ad
   80058:	000819ad 	.word	0x000819ad
   8005c:	000819ad 	.word	0x000819ad
   80060:	000819ad 	.word	0x000819ad
   80064:	000819ad 	.word	0x000819ad
   80068:	00000000 	.word	0x00000000
   8006c:	0008181d 	.word	0x0008181d
   80070:	00081831 	.word	0x00081831
   80074:	00081845 	.word	0x00081845
   80078:	00081859 	.word	0x00081859
	...
   80084:	000801b5 	.word	0x000801b5
   80088:	000819ad 	.word	0x000819ad
   8008c:	000819ad 	.word	0x000819ad
   80090:	000819ad 	.word	0x000819ad
   80094:	000819ad 	.word	0x000819ad
   80098:	000819ad 	.word	0x000819ad
   8009c:	000819ad 	.word	0x000819ad
   800a0:	000819ad 	.word	0x000819ad
   800a4:	00000000 	.word	0x00000000
   800a8:	000819ad 	.word	0x000819ad
   800ac:	000819ad 	.word	0x000819ad
   800b0:	000819ad 	.word	0x000819ad
   800b4:	000819ad 	.word	0x000819ad
   800b8:	000819ad 	.word	0x000819ad
   800bc:	000819ad 	.word	0x000819ad
   800c0:	000819ad 	.word	0x000819ad
   800c4:	000819ad 	.word	0x000819ad
   800c8:	000819ad 	.word	0x000819ad
   800cc:	000819ad 	.word	0x000819ad
   800d0:	000819ad 	.word	0x000819ad
   800d4:	000819ad 	.word	0x000819ad
   800d8:	000819ad 	.word	0x000819ad
   800dc:	000819ad 	.word	0x000819ad
   800e0:	000819ad 	.word	0x000819ad
   800e4:	000819ad 	.word	0x000819ad
   800e8:	000819ad 	.word	0x000819ad
   800ec:	000819ad 	.word	0x000819ad
   800f0:	000819ad 	.word	0x000819ad

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070974 	.word	0x20070974
   80110:	00000000 	.word	0x00000000
   80114:	00082f6c 	.word	0x00082f6c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00082f6c 	.word	0x00082f6c
   8013c:	20070978 	.word	0x20070978
   80140:	00082f6c 	.word	0x00082f6c
   80144:	00000000 	.word	0x00000000

00080148 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8014c:	460c      	mov	r4, r1
   8014e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80150:	b960      	cbnz	r0, 8016c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80152:	2a00      	cmp	r2, #0
   80154:	dd0e      	ble.n	80174 <_read+0x2c>
   80156:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80158:	4e09      	ldr	r6, [pc, #36]	; (80180 <_read+0x38>)
   8015a:	4d0a      	ldr	r5, [pc, #40]	; (80184 <_read+0x3c>)
   8015c:	6830      	ldr	r0, [r6, #0]
   8015e:	4621      	mov	r1, r4
   80160:	682b      	ldr	r3, [r5, #0]
   80162:	4798      	blx	r3
		ptr++;
   80164:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80166:	42bc      	cmp	r4, r7
   80168:	d1f8      	bne.n	8015c <_read+0x14>
   8016a:	e006      	b.n	8017a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8016c:	f04f 30ff 	mov.w	r0, #4294967295
   80170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80174:	2000      	movs	r0, #0
   80176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8017a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80180:	20070b5c 	.word	0x20070b5c
   80184:	20070ad8 	.word	0x20070ad8

00080188 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80188:	6943      	ldr	r3, [r0, #20]
   8018a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8018e:	bf1d      	ittte	ne
   80190:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80194:	61c1      	strne	r1, [r0, #28]
	return 0;
   80196:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80198:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8019a:	4770      	bx	lr

0008019c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8019c:	6943      	ldr	r3, [r0, #20]
   8019e:	f013 0f01 	tst.w	r3, #1
   801a2:	d005      	beq.n	801b0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801a4:	6983      	ldr	r3, [r0, #24]
   801a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801aa:	600b      	str	r3, [r1, #0]

	return 0;
   801ac:	2000      	movs	r0, #0
   801ae:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   801b0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   801b2:	4770      	bx	lr

000801b4 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   801b4:	b500      	push	{lr}
   801b6:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   801b8:	4811      	ldr	r0, [pc, #68]	; (80200 <USART0_Handler+0x4c>)
   801ba:	f10d 0107 	add.w	r1, sp, #7
   801be:	2201      	movs	r2, #1
   801c0:	4b10      	ldr	r3, [pc, #64]	; (80204 <USART0_Handler+0x50>)
   801c2:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   801c4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   801c6:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   801ca:	2200      	movs	r2, #0
   801cc:	4b0e      	ldr	r3, [pc, #56]	; (80208 <USART0_Handler+0x54>)
   801ce:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   801d0:	4b0e      	ldr	r3, [pc, #56]	; (8020c <USART0_Handler+0x58>)
   801d2:	781b      	ldrb	r3, [r3, #0]
   801d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   801d8:	4a0d      	ldr	r2, [pc, #52]	; (80210 <USART0_Handler+0x5c>)
   801da:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   801dc:	2b9b      	cmp	r3, #155	; 0x9b
   801de:	d103      	bne.n	801e8 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   801e0:	2200      	movs	r2, #0
   801e2:	4b0a      	ldr	r3, [pc, #40]	; (8020c <USART0_Handler+0x58>)
   801e4:	701a      	strb	r2, [r3, #0]
   801e6:	e002      	b.n	801ee <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   801e8:	3301      	adds	r3, #1
   801ea:	4a08      	ldr	r2, [pc, #32]	; (8020c <USART0_Handler+0x58>)
   801ec:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   801ee:	2201      	movs	r2, #1
   801f0:	4b05      	ldr	r3, [pc, #20]	; (80208 <USART0_Handler+0x54>)
   801f2:	701a      	strb	r2, [r3, #0]
   801f4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   801f8:	b662      	cpsie	i
}
   801fa:	b003      	add	sp, #12
   801fc:	f85d fb04 	ldr.w	pc, [sp], #4
   80200:	40098000 	.word	0x40098000
   80204:	00080e45 	.word	0x00080e45
   80208:	2007012c 	.word	0x2007012c
   8020c:	20070a2c 	.word	0x20070a2c
   80210:	20070990 	.word	0x20070990

00080214 <pinMode>:
 */ 

#include "digitalIO.h"

void pinMode(int pinNumber, mode_definition mode) /* You only have to program a function that cares about OUTPUT, and does nothing for the other values */
{
   80214:	4770      	bx	lr
   80216:	bf00      	nop

00080218 <digitalWrite>:
	
}

void digitalWrite(int pinNumber, int value)
{
   80218:	4770      	bx	lr
   8021a:	bf00      	nop

0008021c <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   8021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80220:	4605      	mov	r5, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   80222:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   80226:	d132      	bne.n	8028e <UnityPrintNumber+0x72>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80228:	4b5f      	ldr	r3, [pc, #380]	; (803a8 <UnityPrintNumber+0x18c>)
   8022a:	6818      	ldr	r0, [r3, #0]
   8022c:	6882      	ldr	r2, [r0, #8]
   8022e:	6893      	ldr	r3, [r2, #8]
   80230:	3b01      	subs	r3, #1
   80232:	6093      	str	r3, [r2, #8]
   80234:	2b00      	cmp	r3, #0
   80236:	da1d      	bge.n	80274 <UnityPrintNumber+0x58>
   80238:	6882      	ldr	r2, [r0, #8]
   8023a:	6891      	ldr	r1, [r2, #8]
   8023c:	6993      	ldr	r3, [r2, #24]
   8023e:	4299      	cmp	r1, r3
   80240:	db12      	blt.n	80268 <UnityPrintNumber+0x4c>
   80242:	6813      	ldr	r3, [r2, #0]
   80244:	222d      	movs	r2, #45	; 0x2d
   80246:	701a      	strb	r2, [r3, #0]
   80248:	4b57      	ldr	r3, [pc, #348]	; (803a8 <UnityPrintNumber+0x18c>)
   8024a:	6818      	ldr	r0, [r3, #0]
   8024c:	6882      	ldr	r2, [r0, #8]
   8024e:	6813      	ldr	r3, [r2, #0]
   80250:	7819      	ldrb	r1, [r3, #0]
   80252:	290a      	cmp	r1, #10
   80254:	d002      	beq.n	8025c <UnityPrintNumber+0x40>
   80256:	3301      	adds	r3, #1
   80258:	6013      	str	r3, [r2, #0]
   8025a:	e04f      	b.n	802fc <UnityPrintNumber+0xe0>
   8025c:	210a      	movs	r1, #10
   8025e:	4b53      	ldr	r3, [pc, #332]	; (803ac <UnityPrintNumber+0x190>)
   80260:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80262:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   80266:	e049      	b.n	802fc <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80268:	212d      	movs	r1, #45	; 0x2d
   8026a:	4b50      	ldr	r3, [pc, #320]	; (803ac <UnityPrintNumber+0x190>)
   8026c:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   8026e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   80272:	e043      	b.n	802fc <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80274:	6883      	ldr	r3, [r0, #8]
   80276:	681b      	ldr	r3, [r3, #0]
   80278:	222d      	movs	r2, #45	; 0x2d
   8027a:	701a      	strb	r2, [r3, #0]
   8027c:	4b4a      	ldr	r3, [pc, #296]	; (803a8 <UnityPrintNumber+0x18c>)
   8027e:	681b      	ldr	r3, [r3, #0]
   80280:	689b      	ldr	r3, [r3, #8]
   80282:	681a      	ldr	r2, [r3, #0]
   80284:	3201      	adds	r2, #1
   80286:	601a      	str	r2, [r3, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80288:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   8028c:	e036      	b.n	802fc <UnityPrintNumber+0xe0>
    }
    else if (number_to_print < 0)
   8028e:	2800      	cmp	r0, #0
   80290:	da34      	bge.n	802fc <UnityPrintNumber+0xe0>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   80292:	4b45      	ldr	r3, [pc, #276]	; (803a8 <UnityPrintNumber+0x18c>)
   80294:	6818      	ldr	r0, [r3, #0]
   80296:	6882      	ldr	r2, [r0, #8]
   80298:	6893      	ldr	r3, [r2, #8]
   8029a:	3b01      	subs	r3, #1
   8029c:	6093      	str	r3, [r2, #8]
   8029e:	2b00      	cmp	r3, #0
   802a0:	da19      	bge.n	802d6 <UnityPrintNumber+0xba>
   802a2:	6882      	ldr	r2, [r0, #8]
   802a4:	6891      	ldr	r1, [r2, #8]
   802a6:	6993      	ldr	r3, [r2, #24]
   802a8:	4299      	cmp	r1, r3
   802aa:	db10      	blt.n	802ce <UnityPrintNumber+0xb2>
   802ac:	6813      	ldr	r3, [r2, #0]
   802ae:	222d      	movs	r2, #45	; 0x2d
   802b0:	701a      	strb	r2, [r3, #0]
   802b2:	4b3d      	ldr	r3, [pc, #244]	; (803a8 <UnityPrintNumber+0x18c>)
   802b4:	6818      	ldr	r0, [r3, #0]
   802b6:	6882      	ldr	r2, [r0, #8]
   802b8:	6813      	ldr	r3, [r2, #0]
   802ba:	7819      	ldrb	r1, [r3, #0]
   802bc:	290a      	cmp	r1, #10
   802be:	d002      	beq.n	802c6 <UnityPrintNumber+0xaa>
   802c0:	3301      	adds	r3, #1
   802c2:	6013      	str	r3, [r2, #0]
   802c4:	e011      	b.n	802ea <UnityPrintNumber+0xce>
   802c6:	210a      	movs	r1, #10
   802c8:	4b38      	ldr	r3, [pc, #224]	; (803ac <UnityPrintNumber+0x190>)
   802ca:	4798      	blx	r3
   802cc:	e00d      	b.n	802ea <UnityPrintNumber+0xce>
   802ce:	212d      	movs	r1, #45	; 0x2d
   802d0:	4b36      	ldr	r3, [pc, #216]	; (803ac <UnityPrintNumber+0x190>)
   802d2:	4798      	blx	r3
   802d4:	e009      	b.n	802ea <UnityPrintNumber+0xce>
   802d6:	6883      	ldr	r3, [r0, #8]
   802d8:	681b      	ldr	r3, [r3, #0]
   802da:	222d      	movs	r2, #45	; 0x2d
   802dc:	701a      	strb	r2, [r3, #0]
   802de:	4b32      	ldr	r3, [pc, #200]	; (803a8 <UnityPrintNumber+0x18c>)
   802e0:	681b      	ldr	r3, [r3, #0]
   802e2:	689b      	ldr	r3, [r3, #8]
   802e4:	681a      	ldr	r2, [r3, #0]
   802e6:	3201      	adds	r2, #1
   802e8:	601a      	str	r2, [r3, #0]
        number = (_U_UINT)(-number_to_print);
   802ea:	426d      	negs	r5, r5
   802ec:	e006      	b.n	802fc <UnityPrintNumber+0xe0>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   802ee:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   802f2:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   802f4:	429c      	cmp	r4, r3
   802f6:	da06      	bge.n	80306 <UnityPrintNumber+0xea>
            divisor = next_divisor;
   802f8:	461c      	mov	r4, r3
   802fa:	e000      	b.n	802fe <UnityPrintNumber+0xe2>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   802fc:	2401      	movs	r4, #1
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   802fe:	fbb5 f3f4 	udiv	r3, r5, r4
   80302:	2b09      	cmp	r3, #9
   80304:	d8f3      	bhi.n	802ee <UnityPrintNumber+0xd2>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   80306:	4e28      	ldr	r6, [pc, #160]	; (803a8 <UnityPrintNumber+0x18c>)
   80308:	4f29      	ldr	r7, [pc, #164]	; (803b0 <UnityPrintNumber+0x194>)
   8030a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 803ac <UnityPrintNumber+0x190>
   8030e:	6830      	ldr	r0, [r6, #0]
   80310:	6882      	ldr	r2, [r0, #8]
   80312:	6893      	ldr	r3, [r2, #8]
   80314:	3b01      	subs	r3, #1
   80316:	6093      	str	r3, [r2, #8]
   80318:	2b00      	cmp	r3, #0
   8031a:	da29      	bge.n	80370 <UnityPrintNumber+0x154>
   8031c:	6882      	ldr	r2, [r0, #8]
   8031e:	6891      	ldr	r1, [r2, #8]
   80320:	6993      	ldr	r3, [r2, #24]
   80322:	4299      	cmp	r1, r3
   80324:	db17      	blt.n	80356 <UnityPrintNumber+0x13a>
   80326:	6811      	ldr	r1, [r2, #0]
   80328:	fbb5 f3f4 	udiv	r3, r5, r4
   8032c:	fba7 0203 	umull	r0, r2, r7, r3
   80330:	08d2      	lsrs	r2, r2, #3
   80332:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80336:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8033a:	3330      	adds	r3, #48	; 0x30
   8033c:	700b      	strb	r3, [r1, #0]
   8033e:	6830      	ldr	r0, [r6, #0]
   80340:	6882      	ldr	r2, [r0, #8]
   80342:	6813      	ldr	r3, [r2, #0]
   80344:	7819      	ldrb	r1, [r3, #0]
   80346:	290a      	cmp	r1, #10
   80348:	d002      	beq.n	80350 <UnityPrintNumber+0x134>
   8034a:	3301      	adds	r3, #1
   8034c:	6013      	str	r3, [r2, #0]
   8034e:	e021      	b.n	80394 <UnityPrintNumber+0x178>
   80350:	210a      	movs	r1, #10
   80352:	47c0      	blx	r8
   80354:	e01e      	b.n	80394 <UnityPrintNumber+0x178>
   80356:	fbb5 f3f4 	udiv	r3, r5, r4
   8035a:	fba7 e103 	umull	lr, r1, r7, r3
   8035e:	08c9      	lsrs	r1, r1, #3
   80360:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80364:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   80368:	3130      	adds	r1, #48	; 0x30
   8036a:	b2c9      	uxtb	r1, r1
   8036c:	47c0      	blx	r8
   8036e:	e011      	b.n	80394 <UnityPrintNumber+0x178>
   80370:	6883      	ldr	r3, [r0, #8]
   80372:	6819      	ldr	r1, [r3, #0]
   80374:	fbb5 f3f4 	udiv	r3, r5, r4
   80378:	fba7 0203 	umull	r0, r2, r7, r3
   8037c:	08d2      	lsrs	r2, r2, #3
   8037e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80382:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   80386:	3330      	adds	r3, #48	; 0x30
   80388:	700b      	strb	r3, [r1, #0]
   8038a:	6833      	ldr	r3, [r6, #0]
   8038c:	689b      	ldr	r3, [r3, #8]
   8038e:	681a      	ldr	r2, [r3, #0]
   80390:	3201      	adds	r2, #1
   80392:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   80394:	4b07      	ldr	r3, [pc, #28]	; (803b4 <UnityPrintNumber+0x198>)
   80396:	fb83 2304 	smull	r2, r3, r3, r4
   8039a:	17e4      	asrs	r4, r4, #31
   8039c:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    }
    while (divisor > 0);
   803a0:	2c00      	cmp	r4, #0
   803a2:	dcb4      	bgt.n	8030e <UnityPrintNumber+0xf2>
}
   803a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803a8:	20070560 	.word	0x20070560
   803ac:	00081ddd 	.word	0x00081ddd
   803b0:	cccccccd 	.word	0xcccccccd
   803b4:	66666667 	.word	0x66666667

000803b8 <UnityPrintNumberHex>:
    while (divisor > 0);
}

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   803b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   803bc:	4606      	mov	r6, r0
   803be:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   803c0:	4b5e      	ldr	r3, [pc, #376]	; (8053c <UnityPrintNumberHex+0x184>)
   803c2:	6818      	ldr	r0, [r3, #0]
   803c4:	6882      	ldr	r2, [r0, #8]
   803c6:	6893      	ldr	r3, [r2, #8]
   803c8:	3b01      	subs	r3, #1
   803ca:	6093      	str	r3, [r2, #8]
   803cc:	2b00      	cmp	r3, #0
   803ce:	da19      	bge.n	80404 <UnityPrintNumberHex+0x4c>
   803d0:	6882      	ldr	r2, [r0, #8]
   803d2:	6891      	ldr	r1, [r2, #8]
   803d4:	6993      	ldr	r3, [r2, #24]
   803d6:	4299      	cmp	r1, r3
   803d8:	db10      	blt.n	803fc <UnityPrintNumberHex+0x44>
   803da:	6813      	ldr	r3, [r2, #0]
   803dc:	2230      	movs	r2, #48	; 0x30
   803de:	701a      	strb	r2, [r3, #0]
   803e0:	4b56      	ldr	r3, [pc, #344]	; (8053c <UnityPrintNumberHex+0x184>)
   803e2:	6818      	ldr	r0, [r3, #0]
   803e4:	6882      	ldr	r2, [r0, #8]
   803e6:	6813      	ldr	r3, [r2, #0]
   803e8:	7819      	ldrb	r1, [r3, #0]
   803ea:	290a      	cmp	r1, #10
   803ec:	d002      	beq.n	803f4 <UnityPrintNumberHex+0x3c>
   803ee:	3301      	adds	r3, #1
   803f0:	6013      	str	r3, [r2, #0]
   803f2:	e011      	b.n	80418 <UnityPrintNumberHex+0x60>
   803f4:	210a      	movs	r1, #10
   803f6:	4b52      	ldr	r3, [pc, #328]	; (80540 <UnityPrintNumberHex+0x188>)
   803f8:	4798      	blx	r3
   803fa:	e00d      	b.n	80418 <UnityPrintNumberHex+0x60>
   803fc:	2130      	movs	r1, #48	; 0x30
   803fe:	4b50      	ldr	r3, [pc, #320]	; (80540 <UnityPrintNumberHex+0x188>)
   80400:	4798      	blx	r3
   80402:	e009      	b.n	80418 <UnityPrintNumberHex+0x60>
   80404:	6883      	ldr	r3, [r0, #8]
   80406:	681b      	ldr	r3, [r3, #0]
   80408:	2230      	movs	r2, #48	; 0x30
   8040a:	701a      	strb	r2, [r3, #0]
   8040c:	4b4b      	ldr	r3, [pc, #300]	; (8053c <UnityPrintNumberHex+0x184>)
   8040e:	681b      	ldr	r3, [r3, #0]
   80410:	689b      	ldr	r3, [r3, #8]
   80412:	681a      	ldr	r2, [r3, #0]
   80414:	3201      	adds	r2, #1
   80416:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_CHAR('x');
   80418:	4b48      	ldr	r3, [pc, #288]	; (8053c <UnityPrintNumberHex+0x184>)
   8041a:	6818      	ldr	r0, [r3, #0]
   8041c:	6882      	ldr	r2, [r0, #8]
   8041e:	6893      	ldr	r3, [r2, #8]
   80420:	3b01      	subs	r3, #1
   80422:	6093      	str	r3, [r2, #8]
   80424:	2b00      	cmp	r3, #0
   80426:	da1b      	bge.n	80460 <UnityPrintNumberHex+0xa8>
   80428:	6882      	ldr	r2, [r0, #8]
   8042a:	6891      	ldr	r1, [r2, #8]
   8042c:	6993      	ldr	r3, [r2, #24]
   8042e:	4299      	cmp	r1, r3
   80430:	db10      	blt.n	80454 <UnityPrintNumberHex+0x9c>
   80432:	6813      	ldr	r3, [r2, #0]
   80434:	2278      	movs	r2, #120	; 0x78
   80436:	701a      	strb	r2, [r3, #0]
   80438:	4b40      	ldr	r3, [pc, #256]	; (8053c <UnityPrintNumberHex+0x184>)
   8043a:	6818      	ldr	r0, [r3, #0]
   8043c:	6882      	ldr	r2, [r0, #8]
   8043e:	6813      	ldr	r3, [r2, #0]
   80440:	7819      	ldrb	r1, [r3, #0]
   80442:	290a      	cmp	r1, #10
   80444:	d002      	beq.n	8044c <UnityPrintNumberHex+0x94>
   80446:	3301      	adds	r3, #1
   80448:	6013      	str	r3, [r2, #0]
   8044a:	e006      	b.n	8045a <UnityPrintNumberHex+0xa2>
   8044c:	210a      	movs	r1, #10
   8044e:	4b3c      	ldr	r3, [pc, #240]	; (80540 <UnityPrintNumberHex+0x188>)
   80450:	4798      	blx	r3
   80452:	e002      	b.n	8045a <UnityPrintNumberHex+0xa2>
   80454:	2178      	movs	r1, #120	; 0x78
   80456:	4b3a      	ldr	r3, [pc, #232]	; (80540 <UnityPrintNumberHex+0x188>)
   80458:	4798      	blx	r3

    while (nibbles > 0)
   8045a:	b964      	cbnz	r4, 80476 <UnityPrintNumberHex+0xbe>
   8045c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   80460:	6883      	ldr	r3, [r0, #8]
   80462:	681b      	ldr	r3, [r3, #0]
   80464:	2278      	movs	r2, #120	; 0x78
   80466:	701a      	strb	r2, [r3, #0]
   80468:	4b34      	ldr	r3, [pc, #208]	; (8053c <UnityPrintNumberHex+0x184>)
   8046a:	681b      	ldr	r3, [r3, #0]
   8046c:	689b      	ldr	r3, [r3, #8]
   8046e:	681a      	ldr	r2, [r3, #0]
   80470:	3201      	adds	r2, #1
   80472:	601a      	str	r2, [r3, #0]
   80474:	e7f1      	b.n	8045a <UnityPrintNumberHex+0xa2>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80476:	4d31      	ldr	r5, [pc, #196]	; (8053c <UnityPrintNumberHex+0x184>)
   80478:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80540 <UnityPrintNumberHex+0x188>
   8047c:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   80480:	3c01      	subs	r4, #1
   80482:	b2e4      	uxtb	r4, r4
   80484:	00a3      	lsls	r3, r4, #2
   80486:	fa26 f303 	lsr.w	r3, r6, r3
   8048a:	f003 030f 	and.w	r3, r3, #15
        if (nibble <= 9)
   8048e:	2b09      	cmp	r3, #9
   80490:	d828      	bhi.n	804e4 <UnityPrintNumberHex+0x12c>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   80492:	6828      	ldr	r0, [r5, #0]
   80494:	6881      	ldr	r1, [r0, #8]
   80496:	688a      	ldr	r2, [r1, #8]
   80498:	3a01      	subs	r2, #1
   8049a:	608a      	str	r2, [r1, #8]
   8049c:	2a00      	cmp	r2, #0
   8049e:	da17      	bge.n	804d0 <UnityPrintNumberHex+0x118>
   804a0:	6882      	ldr	r2, [r0, #8]
   804a2:	6891      	ldr	r1, [r2, #8]
   804a4:	6997      	ldr	r7, [r2, #24]
   804a6:	42b9      	cmp	r1, r7
   804a8:	db0e      	blt.n	804c8 <UnityPrintNumberHex+0x110>
   804aa:	6812      	ldr	r2, [r2, #0]
   804ac:	3330      	adds	r3, #48	; 0x30
   804ae:	7013      	strb	r3, [r2, #0]
   804b0:	6828      	ldr	r0, [r5, #0]
   804b2:	6882      	ldr	r2, [r0, #8]
   804b4:	6813      	ldr	r3, [r2, #0]
   804b6:	7819      	ldrb	r1, [r3, #0]
   804b8:	290a      	cmp	r1, #10
   804ba:	d002      	beq.n	804c2 <UnityPrintNumberHex+0x10a>
   804bc:	3301      	adds	r3, #1
   804be:	6013      	str	r3, [r2, #0]
   804c0:	e038      	b.n	80534 <UnityPrintNumberHex+0x17c>
   804c2:	4641      	mov	r1, r8
   804c4:	47c8      	blx	r9
   804c6:	e035      	b.n	80534 <UnityPrintNumberHex+0x17c>
   804c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
   804cc:	47c8      	blx	r9
   804ce:	e031      	b.n	80534 <UnityPrintNumberHex+0x17c>
   804d0:	6882      	ldr	r2, [r0, #8]
   804d2:	6812      	ldr	r2, [r2, #0]
   804d4:	3330      	adds	r3, #48	; 0x30
   804d6:	7013      	strb	r3, [r2, #0]
   804d8:	682b      	ldr	r3, [r5, #0]
   804da:	689b      	ldr	r3, [r3, #8]
   804dc:	681a      	ldr	r2, [r3, #0]
   804de:	3201      	adds	r2, #1
   804e0:	601a      	str	r2, [r3, #0]
   804e2:	e027      	b.n	80534 <UnityPrintNumberHex+0x17c>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   804e4:	6828      	ldr	r0, [r5, #0]
   804e6:	6881      	ldr	r1, [r0, #8]
   804e8:	688a      	ldr	r2, [r1, #8]
   804ea:	3a01      	subs	r2, #1
   804ec:	608a      	str	r2, [r1, #8]
   804ee:	2a00      	cmp	r2, #0
   804f0:	da17      	bge.n	80522 <UnityPrintNumberHex+0x16a>
   804f2:	6882      	ldr	r2, [r0, #8]
   804f4:	6891      	ldr	r1, [r2, #8]
   804f6:	6997      	ldr	r7, [r2, #24]
   804f8:	42b9      	cmp	r1, r7
   804fa:	db0e      	blt.n	8051a <UnityPrintNumberHex+0x162>
   804fc:	6812      	ldr	r2, [r2, #0]
   804fe:	3337      	adds	r3, #55	; 0x37
   80500:	7013      	strb	r3, [r2, #0]
   80502:	6828      	ldr	r0, [r5, #0]
   80504:	6882      	ldr	r2, [r0, #8]
   80506:	6813      	ldr	r3, [r2, #0]
   80508:	7819      	ldrb	r1, [r3, #0]
   8050a:	290a      	cmp	r1, #10
   8050c:	d002      	beq.n	80514 <UnityPrintNumberHex+0x15c>
   8050e:	3301      	adds	r3, #1
   80510:	6013      	str	r3, [r2, #0]
   80512:	e00f      	b.n	80534 <UnityPrintNumberHex+0x17c>
   80514:	4641      	mov	r1, r8
   80516:	47c8      	blx	r9
   80518:	e00c      	b.n	80534 <UnityPrintNumberHex+0x17c>
   8051a:	f103 0137 	add.w	r1, r3, #55	; 0x37
   8051e:	47c8      	blx	r9
   80520:	e008      	b.n	80534 <UnityPrintNumberHex+0x17c>
   80522:	6882      	ldr	r2, [r0, #8]
   80524:	6812      	ldr	r2, [r2, #0]
   80526:	3337      	adds	r3, #55	; 0x37
   80528:	7013      	strb	r3, [r2, #0]
   8052a:	682b      	ldr	r3, [r5, #0]
   8052c:	689b      	ldr	r3, [r3, #8]
   8052e:	681a      	ldr	r2, [r3, #0]
   80530:	3201      	adds	r2, #1
   80532:	601a      	str	r2, [r3, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   80534:	2c00      	cmp	r4, #0
   80536:	d1a3      	bne.n	80480 <UnityPrintNumberHex+0xc8>
   80538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8053c:	20070560 	.word	0x20070560
   80540:	00081ddd 	.word	0x00081ddd

00080544 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   80544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   80546:	2800      	cmp	r0, #0
   80548:	f000 810a 	beq.w	80760 <UnityPrint+0x21c>
    {
        while (*pch)
   8054c:	7803      	ldrb	r3, [r0, #0]
   8054e:	2b00      	cmp	r3, #0
   80550:	f000 8106 	beq.w	80760 <UnityPrint+0x21c>
   80554:	1c44      	adds	r4, r0, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80556:	4d83      	ldr	r5, [pc, #524]	; (80764 <UnityPrint+0x220>)
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   80558:	4e83      	ldr	r6, [pc, #524]	; (80768 <UnityPrint+0x224>)
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   8055a:	4f84      	ldr	r7, [pc, #528]	; (8076c <UnityPrint+0x228>)
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   8055c:	f1a3 0220 	sub.w	r2, r3, #32
   80560:	b2d2      	uxtb	r2, r2
   80562:	2a5e      	cmp	r2, #94	; 0x5e
   80564:	d82a      	bhi.n	805bc <UnityPrint+0x78>
            {
                UNITY_OUTPUT_CHAR(*pch);
   80566:	6828      	ldr	r0, [r5, #0]
   80568:	6882      	ldr	r2, [r0, #8]
   8056a:	6893      	ldr	r3, [r2, #8]
   8056c:	3b01      	subs	r3, #1
   8056e:	6093      	str	r3, [r2, #8]
   80570:	2b00      	cmp	r3, #0
   80572:	da18      	bge.n	805a6 <UnityPrint+0x62>
   80574:	6882      	ldr	r2, [r0, #8]
   80576:	6891      	ldr	r1, [r2, #8]
   80578:	6993      	ldr	r3, [r2, #24]
   8057a:	4299      	cmp	r1, r3
   8057c:	db0f      	blt.n	8059e <UnityPrint+0x5a>
   8057e:	6813      	ldr	r3, [r2, #0]
   80580:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80584:	701a      	strb	r2, [r3, #0]
   80586:	6828      	ldr	r0, [r5, #0]
   80588:	6882      	ldr	r2, [r0, #8]
   8058a:	6813      	ldr	r3, [r2, #0]
   8058c:	7819      	ldrb	r1, [r3, #0]
   8058e:	290a      	cmp	r1, #10
   80590:	d002      	beq.n	80598 <UnityPrint+0x54>
   80592:	3301      	adds	r3, #1
   80594:	6013      	str	r3, [r2, #0]
   80596:	e0de      	b.n	80756 <UnityPrint+0x212>
   80598:	210a      	movs	r1, #10
   8059a:	47b8      	blx	r7
   8059c:	e0db      	b.n	80756 <UnityPrint+0x212>
   8059e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   805a2:	47b8      	blx	r7
   805a4:	e0d7      	b.n	80756 <UnityPrint+0x212>
   805a6:	6883      	ldr	r3, [r0, #8]
   805a8:	681b      	ldr	r3, [r3, #0]
   805aa:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   805ae:	701a      	strb	r2, [r3, #0]
   805b0:	682b      	ldr	r3, [r5, #0]
   805b2:	689b      	ldr	r3, [r3, #8]
   805b4:	681a      	ldr	r2, [r3, #0]
   805b6:	3201      	adds	r2, #1
   805b8:	601a      	str	r2, [r3, #0]
   805ba:	e0cc      	b.n	80756 <UnityPrint+0x212>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   805bc:	2b0d      	cmp	r3, #13
   805be:	d14e      	bne.n	8065e <UnityPrint+0x11a>
            {
                UNITY_OUTPUT_CHAR('\\');
   805c0:	6828      	ldr	r0, [r5, #0]
   805c2:	6882      	ldr	r2, [r0, #8]
   805c4:	6893      	ldr	r3, [r2, #8]
   805c6:	3b01      	subs	r3, #1
   805c8:	6093      	str	r3, [r2, #8]
   805ca:	2b00      	cmp	r3, #0
   805cc:	da16      	bge.n	805fc <UnityPrint+0xb8>
   805ce:	6882      	ldr	r2, [r0, #8]
   805d0:	6891      	ldr	r1, [r2, #8]
   805d2:	6993      	ldr	r3, [r2, #24]
   805d4:	4299      	cmp	r1, r3
   805d6:	db0e      	blt.n	805f6 <UnityPrint+0xb2>
   805d8:	6813      	ldr	r3, [r2, #0]
   805da:	225c      	movs	r2, #92	; 0x5c
   805dc:	701a      	strb	r2, [r3, #0]
   805de:	6828      	ldr	r0, [r5, #0]
   805e0:	6882      	ldr	r2, [r0, #8]
   805e2:	6813      	ldr	r3, [r2, #0]
   805e4:	7819      	ldrb	r1, [r3, #0]
   805e6:	290a      	cmp	r1, #10
   805e8:	d002      	beq.n	805f0 <UnityPrint+0xac>
   805ea:	3301      	adds	r3, #1
   805ec:	6013      	str	r3, [r2, #0]
   805ee:	e00e      	b.n	8060e <UnityPrint+0xca>
   805f0:	210a      	movs	r1, #10
   805f2:	47b8      	blx	r7
   805f4:	e00b      	b.n	8060e <UnityPrint+0xca>
   805f6:	215c      	movs	r1, #92	; 0x5c
   805f8:	47b8      	blx	r7
   805fa:	e008      	b.n	8060e <UnityPrint+0xca>
   805fc:	6883      	ldr	r3, [r0, #8]
   805fe:	681b      	ldr	r3, [r3, #0]
   80600:	225c      	movs	r2, #92	; 0x5c
   80602:	701a      	strb	r2, [r3, #0]
   80604:	682b      	ldr	r3, [r5, #0]
   80606:	689b      	ldr	r3, [r3, #8]
   80608:	681a      	ldr	r2, [r3, #0]
   8060a:	3201      	adds	r2, #1
   8060c:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('r');
   8060e:	6828      	ldr	r0, [r5, #0]
   80610:	6882      	ldr	r2, [r0, #8]
   80612:	6893      	ldr	r3, [r2, #8]
   80614:	3b01      	subs	r3, #1
   80616:	6093      	str	r3, [r2, #8]
   80618:	2b00      	cmp	r3, #0
   8061a:	da16      	bge.n	8064a <UnityPrint+0x106>
   8061c:	6882      	ldr	r2, [r0, #8]
   8061e:	6891      	ldr	r1, [r2, #8]
   80620:	6993      	ldr	r3, [r2, #24]
   80622:	4299      	cmp	r1, r3
   80624:	db0e      	blt.n	80644 <UnityPrint+0x100>
   80626:	6813      	ldr	r3, [r2, #0]
   80628:	2272      	movs	r2, #114	; 0x72
   8062a:	701a      	strb	r2, [r3, #0]
   8062c:	6828      	ldr	r0, [r5, #0]
   8062e:	6882      	ldr	r2, [r0, #8]
   80630:	6813      	ldr	r3, [r2, #0]
   80632:	7819      	ldrb	r1, [r3, #0]
   80634:	290a      	cmp	r1, #10
   80636:	d002      	beq.n	8063e <UnityPrint+0xfa>
   80638:	3301      	adds	r3, #1
   8063a:	6013      	str	r3, [r2, #0]
   8063c:	e08b      	b.n	80756 <UnityPrint+0x212>
   8063e:	210a      	movs	r1, #10
   80640:	47b8      	blx	r7
   80642:	e088      	b.n	80756 <UnityPrint+0x212>
   80644:	2172      	movs	r1, #114	; 0x72
   80646:	47b8      	blx	r7
   80648:	e085      	b.n	80756 <UnityPrint+0x212>
   8064a:	6883      	ldr	r3, [r0, #8]
   8064c:	681b      	ldr	r3, [r3, #0]
   8064e:	2272      	movs	r2, #114	; 0x72
   80650:	701a      	strb	r2, [r3, #0]
   80652:	682b      	ldr	r3, [r5, #0]
   80654:	689b      	ldr	r3, [r3, #8]
   80656:	681a      	ldr	r2, [r3, #0]
   80658:	3201      	adds	r2, #1
   8065a:	601a      	str	r2, [r3, #0]
   8065c:	e07b      	b.n	80756 <UnityPrint+0x212>
            }
            //write escaped line feeds
            else if (*pch == 10)
   8065e:	2b0a      	cmp	r3, #10
   80660:	d14e      	bne.n	80700 <UnityPrint+0x1bc>
            {
                UNITY_OUTPUT_CHAR('\\');
   80662:	6828      	ldr	r0, [r5, #0]
   80664:	6882      	ldr	r2, [r0, #8]
   80666:	6893      	ldr	r3, [r2, #8]
   80668:	3b01      	subs	r3, #1
   8066a:	6093      	str	r3, [r2, #8]
   8066c:	2b00      	cmp	r3, #0
   8066e:	da16      	bge.n	8069e <UnityPrint+0x15a>
   80670:	6882      	ldr	r2, [r0, #8]
   80672:	6891      	ldr	r1, [r2, #8]
   80674:	6993      	ldr	r3, [r2, #24]
   80676:	4299      	cmp	r1, r3
   80678:	db0e      	blt.n	80698 <UnityPrint+0x154>
   8067a:	6813      	ldr	r3, [r2, #0]
   8067c:	225c      	movs	r2, #92	; 0x5c
   8067e:	701a      	strb	r2, [r3, #0]
   80680:	6828      	ldr	r0, [r5, #0]
   80682:	6882      	ldr	r2, [r0, #8]
   80684:	6813      	ldr	r3, [r2, #0]
   80686:	7819      	ldrb	r1, [r3, #0]
   80688:	290a      	cmp	r1, #10
   8068a:	d002      	beq.n	80692 <UnityPrint+0x14e>
   8068c:	3301      	adds	r3, #1
   8068e:	6013      	str	r3, [r2, #0]
   80690:	e00e      	b.n	806b0 <UnityPrint+0x16c>
   80692:	210a      	movs	r1, #10
   80694:	47b8      	blx	r7
   80696:	e00b      	b.n	806b0 <UnityPrint+0x16c>
   80698:	215c      	movs	r1, #92	; 0x5c
   8069a:	47b8      	blx	r7
   8069c:	e008      	b.n	806b0 <UnityPrint+0x16c>
   8069e:	6883      	ldr	r3, [r0, #8]
   806a0:	681b      	ldr	r3, [r3, #0]
   806a2:	225c      	movs	r2, #92	; 0x5c
   806a4:	701a      	strb	r2, [r3, #0]
   806a6:	682b      	ldr	r3, [r5, #0]
   806a8:	689b      	ldr	r3, [r3, #8]
   806aa:	681a      	ldr	r2, [r3, #0]
   806ac:	3201      	adds	r2, #1
   806ae:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('n');
   806b0:	6828      	ldr	r0, [r5, #0]
   806b2:	6882      	ldr	r2, [r0, #8]
   806b4:	6893      	ldr	r3, [r2, #8]
   806b6:	3b01      	subs	r3, #1
   806b8:	6093      	str	r3, [r2, #8]
   806ba:	2b00      	cmp	r3, #0
   806bc:	da16      	bge.n	806ec <UnityPrint+0x1a8>
   806be:	6882      	ldr	r2, [r0, #8]
   806c0:	6891      	ldr	r1, [r2, #8]
   806c2:	6993      	ldr	r3, [r2, #24]
   806c4:	4299      	cmp	r1, r3
   806c6:	db0e      	blt.n	806e6 <UnityPrint+0x1a2>
   806c8:	6813      	ldr	r3, [r2, #0]
   806ca:	226e      	movs	r2, #110	; 0x6e
   806cc:	701a      	strb	r2, [r3, #0]
   806ce:	6828      	ldr	r0, [r5, #0]
   806d0:	6882      	ldr	r2, [r0, #8]
   806d2:	6813      	ldr	r3, [r2, #0]
   806d4:	7819      	ldrb	r1, [r3, #0]
   806d6:	290a      	cmp	r1, #10
   806d8:	d002      	beq.n	806e0 <UnityPrint+0x19c>
   806da:	3301      	adds	r3, #1
   806dc:	6013      	str	r3, [r2, #0]
   806de:	e03a      	b.n	80756 <UnityPrint+0x212>
   806e0:	210a      	movs	r1, #10
   806e2:	47b8      	blx	r7
   806e4:	e037      	b.n	80756 <UnityPrint+0x212>
   806e6:	216e      	movs	r1, #110	; 0x6e
   806e8:	47b8      	blx	r7
   806ea:	e034      	b.n	80756 <UnityPrint+0x212>
   806ec:	6883      	ldr	r3, [r0, #8]
   806ee:	681b      	ldr	r3, [r3, #0]
   806f0:	226e      	movs	r2, #110	; 0x6e
   806f2:	701a      	strb	r2, [r3, #0]
   806f4:	682b      	ldr	r3, [r5, #0]
   806f6:	689b      	ldr	r3, [r3, #8]
   806f8:	681a      	ldr	r2, [r3, #0]
   806fa:	3201      	adds	r2, #1
   806fc:	601a      	str	r2, [r3, #0]
   806fe:	e02a      	b.n	80756 <UnityPrint+0x212>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80700:	6828      	ldr	r0, [r5, #0]
   80702:	6882      	ldr	r2, [r0, #8]
   80704:	6893      	ldr	r3, [r2, #8]
   80706:	3b01      	subs	r3, #1
   80708:	6093      	str	r3, [r2, #8]
   8070a:	2b00      	cmp	r3, #0
   8070c:	da16      	bge.n	8073c <UnityPrint+0x1f8>
   8070e:	6882      	ldr	r2, [r0, #8]
   80710:	6891      	ldr	r1, [r2, #8]
   80712:	6993      	ldr	r3, [r2, #24]
   80714:	4299      	cmp	r1, r3
   80716:	db0e      	blt.n	80736 <UnityPrint+0x1f2>
   80718:	6813      	ldr	r3, [r2, #0]
   8071a:	225c      	movs	r2, #92	; 0x5c
   8071c:	701a      	strb	r2, [r3, #0]
   8071e:	6828      	ldr	r0, [r5, #0]
   80720:	6882      	ldr	r2, [r0, #8]
   80722:	6813      	ldr	r3, [r2, #0]
   80724:	7819      	ldrb	r1, [r3, #0]
   80726:	290a      	cmp	r1, #10
   80728:	d002      	beq.n	80730 <UnityPrint+0x1ec>
   8072a:	3301      	adds	r3, #1
   8072c:	6013      	str	r3, [r2, #0]
   8072e:	e00e      	b.n	8074e <UnityPrint+0x20a>
   80730:	210a      	movs	r1, #10
   80732:	47b8      	blx	r7
   80734:	e00b      	b.n	8074e <UnityPrint+0x20a>
   80736:	215c      	movs	r1, #92	; 0x5c
   80738:	47b8      	blx	r7
   8073a:	e008      	b.n	8074e <UnityPrint+0x20a>
   8073c:	6883      	ldr	r3, [r0, #8]
   8073e:	681b      	ldr	r3, [r3, #0]
   80740:	225c      	movs	r2, #92	; 0x5c
   80742:	701a      	strb	r2, [r3, #0]
   80744:	682b      	ldr	r3, [r5, #0]
   80746:	689b      	ldr	r3, [r3, #8]
   80748:	681a      	ldr	r2, [r3, #0]
   8074a:	3201      	adds	r2, #1
   8074c:	601a      	str	r2, [r3, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   8074e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   80752:	2102      	movs	r1, #2
   80754:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   80756:	f814 3b01 	ldrb.w	r3, [r4], #1
   8075a:	2b00      	cmp	r3, #0
   8075c:	f47f aefe 	bne.w	8055c <UnityPrint+0x18>
   80760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80762:	bf00      	nop
   80764:	20070560 	.word	0x20070560
   80768:	000803b9 	.word	0x000803b9
   8076c:	00081ddd 	.word	0x00081ddd

00080770 <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   80770:	b538      	push	{r3, r4, r5, lr}
   80772:	460d      	mov	r5, r1
    UnityPrint(file);
   80774:	4b46      	ldr	r3, [pc, #280]	; (80890 <UnityTestResultsBegin+0x120>)
   80776:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80778:	4b46      	ldr	r3, [pc, #280]	; (80894 <UnityTestResultsBegin+0x124>)
   8077a:	6818      	ldr	r0, [r3, #0]
   8077c:	6884      	ldr	r4, [r0, #8]
   8077e:	68a2      	ldr	r2, [r4, #8]
   80780:	3a01      	subs	r2, #1
   80782:	60a2      	str	r2, [r4, #8]
   80784:	2a00      	cmp	r2, #0
   80786:	da19      	bge.n	807bc <UnityTestResultsBegin+0x4c>
   80788:	6882      	ldr	r2, [r0, #8]
   8078a:	6893      	ldr	r3, [r2, #8]
   8078c:	6991      	ldr	r1, [r2, #24]
   8078e:	428b      	cmp	r3, r1
   80790:	db10      	blt.n	807b4 <UnityTestResultsBegin+0x44>
   80792:	6813      	ldr	r3, [r2, #0]
   80794:	223a      	movs	r2, #58	; 0x3a
   80796:	701a      	strb	r2, [r3, #0]
   80798:	4b3e      	ldr	r3, [pc, #248]	; (80894 <UnityTestResultsBegin+0x124>)
   8079a:	6818      	ldr	r0, [r3, #0]
   8079c:	6882      	ldr	r2, [r0, #8]
   8079e:	6813      	ldr	r3, [r2, #0]
   807a0:	7819      	ldrb	r1, [r3, #0]
   807a2:	290a      	cmp	r1, #10
   807a4:	d002      	beq.n	807ac <UnityTestResultsBegin+0x3c>
   807a6:	3301      	adds	r3, #1
   807a8:	6013      	str	r3, [r2, #0]
   807aa:	e011      	b.n	807d0 <UnityTestResultsBegin+0x60>
   807ac:	210a      	movs	r1, #10
   807ae:	4b3a      	ldr	r3, [pc, #232]	; (80898 <UnityTestResultsBegin+0x128>)
   807b0:	4798      	blx	r3
   807b2:	e00d      	b.n	807d0 <UnityTestResultsBegin+0x60>
   807b4:	213a      	movs	r1, #58	; 0x3a
   807b6:	4b38      	ldr	r3, [pc, #224]	; (80898 <UnityTestResultsBegin+0x128>)
   807b8:	4798      	blx	r3
   807ba:	e009      	b.n	807d0 <UnityTestResultsBegin+0x60>
   807bc:	6883      	ldr	r3, [r0, #8]
   807be:	681b      	ldr	r3, [r3, #0]
   807c0:	223a      	movs	r2, #58	; 0x3a
   807c2:	701a      	strb	r2, [r3, #0]
   807c4:	4b33      	ldr	r3, [pc, #204]	; (80894 <UnityTestResultsBegin+0x124>)
   807c6:	681b      	ldr	r3, [r3, #0]
   807c8:	689b      	ldr	r3, [r3, #8]
   807ca:	681a      	ldr	r2, [r3, #0]
   807cc:	3201      	adds	r2, #1
   807ce:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)line);
   807d0:	4628      	mov	r0, r5
   807d2:	4b32      	ldr	r3, [pc, #200]	; (8089c <UnityTestResultsBegin+0x12c>)
   807d4:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   807d6:	4b2f      	ldr	r3, [pc, #188]	; (80894 <UnityTestResultsBegin+0x124>)
   807d8:	6818      	ldr	r0, [r3, #0]
   807da:	6882      	ldr	r2, [r0, #8]
   807dc:	6893      	ldr	r3, [r2, #8]
   807de:	3b01      	subs	r3, #1
   807e0:	6093      	str	r3, [r2, #8]
   807e2:	2b00      	cmp	r3, #0
   807e4:	da19      	bge.n	8081a <UnityTestResultsBegin+0xaa>
   807e6:	6882      	ldr	r2, [r0, #8]
   807e8:	6891      	ldr	r1, [r2, #8]
   807ea:	6993      	ldr	r3, [r2, #24]
   807ec:	4299      	cmp	r1, r3
   807ee:	db10      	blt.n	80812 <UnityTestResultsBegin+0xa2>
   807f0:	6813      	ldr	r3, [r2, #0]
   807f2:	223a      	movs	r2, #58	; 0x3a
   807f4:	701a      	strb	r2, [r3, #0]
   807f6:	4b27      	ldr	r3, [pc, #156]	; (80894 <UnityTestResultsBegin+0x124>)
   807f8:	6818      	ldr	r0, [r3, #0]
   807fa:	6882      	ldr	r2, [r0, #8]
   807fc:	6813      	ldr	r3, [r2, #0]
   807fe:	7819      	ldrb	r1, [r3, #0]
   80800:	290a      	cmp	r1, #10
   80802:	d002      	beq.n	8080a <UnityTestResultsBegin+0x9a>
   80804:	3301      	adds	r3, #1
   80806:	6013      	str	r3, [r2, #0]
   80808:	e011      	b.n	8082e <UnityTestResultsBegin+0xbe>
   8080a:	210a      	movs	r1, #10
   8080c:	4b22      	ldr	r3, [pc, #136]	; (80898 <UnityTestResultsBegin+0x128>)
   8080e:	4798      	blx	r3
   80810:	e00d      	b.n	8082e <UnityTestResultsBegin+0xbe>
   80812:	213a      	movs	r1, #58	; 0x3a
   80814:	4b20      	ldr	r3, [pc, #128]	; (80898 <UnityTestResultsBegin+0x128>)
   80816:	4798      	blx	r3
   80818:	e009      	b.n	8082e <UnityTestResultsBegin+0xbe>
   8081a:	6883      	ldr	r3, [r0, #8]
   8081c:	681b      	ldr	r3, [r3, #0]
   8081e:	223a      	movs	r2, #58	; 0x3a
   80820:	701a      	strb	r2, [r3, #0]
   80822:	4b1c      	ldr	r3, [pc, #112]	; (80894 <UnityTestResultsBegin+0x124>)
   80824:	681b      	ldr	r3, [r3, #0]
   80826:	689b      	ldr	r3, [r3, #8]
   80828:	681a      	ldr	r2, [r3, #0]
   8082a:	3201      	adds	r2, #1
   8082c:	601a      	str	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
   8082e:	4b1c      	ldr	r3, [pc, #112]	; (808a0 <UnityTestResultsBegin+0x130>)
   80830:	6858      	ldr	r0, [r3, #4]
   80832:	4b17      	ldr	r3, [pc, #92]	; (80890 <UnityTestResultsBegin+0x120>)
   80834:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80836:	4b17      	ldr	r3, [pc, #92]	; (80894 <UnityTestResultsBegin+0x124>)
   80838:	6818      	ldr	r0, [r3, #0]
   8083a:	6882      	ldr	r2, [r0, #8]
   8083c:	6893      	ldr	r3, [r2, #8]
   8083e:	3b01      	subs	r3, #1
   80840:	6093      	str	r3, [r2, #8]
   80842:	2b00      	cmp	r3, #0
   80844:	da19      	bge.n	8087a <UnityTestResultsBegin+0x10a>
   80846:	6882      	ldr	r2, [r0, #8]
   80848:	6891      	ldr	r1, [r2, #8]
   8084a:	6993      	ldr	r3, [r2, #24]
   8084c:	4299      	cmp	r1, r3
   8084e:	db10      	blt.n	80872 <UnityTestResultsBegin+0x102>
   80850:	6813      	ldr	r3, [r2, #0]
   80852:	223a      	movs	r2, #58	; 0x3a
   80854:	701a      	strb	r2, [r3, #0]
   80856:	4b0f      	ldr	r3, [pc, #60]	; (80894 <UnityTestResultsBegin+0x124>)
   80858:	6818      	ldr	r0, [r3, #0]
   8085a:	6882      	ldr	r2, [r0, #8]
   8085c:	6813      	ldr	r3, [r2, #0]
   8085e:	7819      	ldrb	r1, [r3, #0]
   80860:	290a      	cmp	r1, #10
   80862:	d002      	beq.n	8086a <UnityTestResultsBegin+0xfa>
   80864:	3301      	adds	r3, #1
   80866:	6013      	str	r3, [r2, #0]
   80868:	bd38      	pop	{r3, r4, r5, pc}
   8086a:	210a      	movs	r1, #10
   8086c:	4b0a      	ldr	r3, [pc, #40]	; (80898 <UnityTestResultsBegin+0x128>)
   8086e:	4798      	blx	r3
   80870:	bd38      	pop	{r3, r4, r5, pc}
   80872:	213a      	movs	r1, #58	; 0x3a
   80874:	4b08      	ldr	r3, [pc, #32]	; (80898 <UnityTestResultsBegin+0x128>)
   80876:	4798      	blx	r3
   80878:	bd38      	pop	{r3, r4, r5, pc}
   8087a:	6883      	ldr	r3, [r0, #8]
   8087c:	681b      	ldr	r3, [r3, #0]
   8087e:	223a      	movs	r2, #58	; 0x3a
   80880:	701a      	strb	r2, [r3, #0]
   80882:	4b04      	ldr	r3, [pc, #16]	; (80894 <UnityTestResultsBegin+0x124>)
   80884:	681b      	ldr	r3, [r3, #0]
   80886:	689b      	ldr	r3, [r3, #8]
   80888:	681a      	ldr	r2, [r3, #0]
   8088a:	3201      	adds	r2, #1
   8088c:	601a      	str	r2, [r3, #0]
   8088e:	bd38      	pop	{r3, r4, r5, pc}
   80890:	00080545 	.word	0x00080545
   80894:	20070560 	.word	0x20070560
   80898:	00081ddd 	.word	0x00081ddd
   8089c:	0008021d 	.word	0x0008021d
   808a0:	20070adc 	.word	0x20070adc

000808a4 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   808a4:	b508      	push	{r3, lr}
   808a6:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   808a8:	4b19      	ldr	r3, [pc, #100]	; (80910 <UnityTestResultsFailBegin+0x6c>)
   808aa:	6818      	ldr	r0, [r3, #0]
   808ac:	4b19      	ldr	r3, [pc, #100]	; (80914 <UnityTestResultsFailBegin+0x70>)
   808ae:	4798      	blx	r3
    UnityPrint(UnityStrFail);
   808b0:	4819      	ldr	r0, [pc, #100]	; (80918 <UnityTestResultsFailBegin+0x74>)
   808b2:	4b1a      	ldr	r3, [pc, #104]	; (8091c <UnityTestResultsFailBegin+0x78>)
   808b4:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   808b6:	4b1a      	ldr	r3, [pc, #104]	; (80920 <UnityTestResultsFailBegin+0x7c>)
   808b8:	6818      	ldr	r0, [r3, #0]
   808ba:	6882      	ldr	r2, [r0, #8]
   808bc:	6893      	ldr	r3, [r2, #8]
   808be:	3b01      	subs	r3, #1
   808c0:	6093      	str	r3, [r2, #8]
   808c2:	2b00      	cmp	r3, #0
   808c4:	da19      	bge.n	808fa <UnityTestResultsFailBegin+0x56>
   808c6:	6882      	ldr	r2, [r0, #8]
   808c8:	6891      	ldr	r1, [r2, #8]
   808ca:	6993      	ldr	r3, [r2, #24]
   808cc:	4299      	cmp	r1, r3
   808ce:	db10      	blt.n	808f2 <UnityTestResultsFailBegin+0x4e>
   808d0:	6813      	ldr	r3, [r2, #0]
   808d2:	223a      	movs	r2, #58	; 0x3a
   808d4:	701a      	strb	r2, [r3, #0]
   808d6:	4b12      	ldr	r3, [pc, #72]	; (80920 <UnityTestResultsFailBegin+0x7c>)
   808d8:	6818      	ldr	r0, [r3, #0]
   808da:	6882      	ldr	r2, [r0, #8]
   808dc:	6813      	ldr	r3, [r2, #0]
   808de:	7819      	ldrb	r1, [r3, #0]
   808e0:	290a      	cmp	r1, #10
   808e2:	d002      	beq.n	808ea <UnityTestResultsFailBegin+0x46>
   808e4:	3301      	adds	r3, #1
   808e6:	6013      	str	r3, [r2, #0]
   808e8:	bd08      	pop	{r3, pc}
   808ea:	210a      	movs	r1, #10
   808ec:	4b0d      	ldr	r3, [pc, #52]	; (80924 <UnityTestResultsFailBegin+0x80>)
   808ee:	4798      	blx	r3
   808f0:	bd08      	pop	{r3, pc}
   808f2:	213a      	movs	r1, #58	; 0x3a
   808f4:	4b0b      	ldr	r3, [pc, #44]	; (80924 <UnityTestResultsFailBegin+0x80>)
   808f6:	4798      	blx	r3
   808f8:	bd08      	pop	{r3, pc}
   808fa:	6883      	ldr	r3, [r0, #8]
   808fc:	681b      	ldr	r3, [r3, #0]
   808fe:	223a      	movs	r2, #58	; 0x3a
   80900:	701a      	strb	r2, [r3, #0]
   80902:	4b07      	ldr	r3, [pc, #28]	; (80920 <UnityTestResultsFailBegin+0x7c>)
   80904:	681b      	ldr	r3, [r3, #0]
   80906:	689b      	ldr	r3, [r3, #8]
   80908:	681a      	ldr	r2, [r3, #0]
   8090a:	3201      	adds	r2, #1
   8090c:	601a      	str	r2, [r3, #0]
   8090e:	bd08      	pop	{r3, pc}
   80910:	20070adc 	.word	0x20070adc
   80914:	00080771 	.word	0x00080771
   80918:	00082d98 	.word	0x00082d98
   8091c:	00080545 	.word	0x00080545
   80920:	20070560 	.word	0x20070560
   80924:	00081ddd 	.word	0x00081ddd

00080928 <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   80928:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   8092a:	4605      	mov	r5, r0
   8092c:	b120      	cbz	r0, 80938 <UnityAddMsgIfSpecified+0x10>
    {
        UnityPrint(UnityStrSpacer);
   8092e:	4803      	ldr	r0, [pc, #12]	; (8093c <UnityAddMsgIfSpecified+0x14>)
   80930:	4c03      	ldr	r4, [pc, #12]	; (80940 <UnityAddMsgIfSpecified+0x18>)
   80932:	47a0      	blx	r4
        UnityPrint(msg);
   80934:	4628      	mov	r0, r5
   80936:	47a0      	blx	r4
   80938:	bd38      	pop	{r3, r4, r5, pc}
   8093a:	bf00      	nop
   8093c:	00082d8c 	.word	0x00082d8c
   80940:	00080545 	.word	0x00080545

00080944 <UnityPrintMask>:
    }
}

//-----------------------------------------------
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
   80944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80948:	4607      	mov	r7, r0
   8094a:	4688      	mov	r8, r1
   8094c:	2520      	movs	r5, #32
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
   8094e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
                UNITY_OUTPUT_CHAR('0');
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   80952:	4e43      	ldr	r6, [pc, #268]	; (80a60 <UnityPrintMask+0x11c>)
   80954:	f04f 0958 	mov.w	r9, #88	; 0x58
   80958:	f8df a108 	ldr.w	sl, [pc, #264]	; 80a64 <UnityPrintMask+0x120>
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
    {
        if (current_bit & mask)
   8095c:	423c      	tst	r4, r7
   8095e:	d052      	beq.n	80a06 <UnityPrintMask+0xc2>
        {
            if (current_bit & number)
   80960:	ea14 0f08 	tst.w	r4, r8
   80964:	d027      	beq.n	809b6 <UnityPrintMask+0x72>
            {
                UNITY_OUTPUT_CHAR('1');
   80966:	6830      	ldr	r0, [r6, #0]
   80968:	6882      	ldr	r2, [r0, #8]
   8096a:	6893      	ldr	r3, [r2, #8]
   8096c:	3b01      	subs	r3, #1
   8096e:	6093      	str	r3, [r2, #8]
   80970:	2b00      	cmp	r3, #0
   80972:	da16      	bge.n	809a2 <UnityPrintMask+0x5e>
   80974:	6882      	ldr	r2, [r0, #8]
   80976:	6891      	ldr	r1, [r2, #8]
   80978:	6993      	ldr	r3, [r2, #24]
   8097a:	4299      	cmp	r1, r3
   8097c:	db0e      	blt.n	8099c <UnityPrintMask+0x58>
   8097e:	6813      	ldr	r3, [r2, #0]
   80980:	2231      	movs	r2, #49	; 0x31
   80982:	701a      	strb	r2, [r3, #0]
   80984:	6830      	ldr	r0, [r6, #0]
   80986:	6882      	ldr	r2, [r0, #8]
   80988:	6813      	ldr	r3, [r2, #0]
   8098a:	7819      	ldrb	r1, [r3, #0]
   8098c:	290a      	cmp	r1, #10
   8098e:	d002      	beq.n	80996 <UnityPrintMask+0x52>
   80990:	3301      	adds	r3, #1
   80992:	6013      	str	r3, [r2, #0]
   80994:	e05e      	b.n	80a54 <UnityPrintMask+0x110>
   80996:	210a      	movs	r1, #10
   80998:	47d0      	blx	sl
   8099a:	e05b      	b.n	80a54 <UnityPrintMask+0x110>
   8099c:	2131      	movs	r1, #49	; 0x31
   8099e:	47d0      	blx	sl
   809a0:	e058      	b.n	80a54 <UnityPrintMask+0x110>
   809a2:	6883      	ldr	r3, [r0, #8]
   809a4:	681b      	ldr	r3, [r3, #0]
   809a6:	2231      	movs	r2, #49	; 0x31
   809a8:	701a      	strb	r2, [r3, #0]
   809aa:	6833      	ldr	r3, [r6, #0]
   809ac:	689b      	ldr	r3, [r3, #8]
   809ae:	681a      	ldr	r2, [r3, #0]
   809b0:	3201      	adds	r2, #1
   809b2:	601a      	str	r2, [r3, #0]
   809b4:	e04e      	b.n	80a54 <UnityPrintMask+0x110>
            }
            else
            {
                UNITY_OUTPUT_CHAR('0');
   809b6:	6830      	ldr	r0, [r6, #0]
   809b8:	6882      	ldr	r2, [r0, #8]
   809ba:	6893      	ldr	r3, [r2, #8]
   809bc:	3b01      	subs	r3, #1
   809be:	6093      	str	r3, [r2, #8]
   809c0:	2b00      	cmp	r3, #0
   809c2:	da16      	bge.n	809f2 <UnityPrintMask+0xae>
   809c4:	6882      	ldr	r2, [r0, #8]
   809c6:	6891      	ldr	r1, [r2, #8]
   809c8:	6993      	ldr	r3, [r2, #24]
   809ca:	4299      	cmp	r1, r3
   809cc:	db0e      	blt.n	809ec <UnityPrintMask+0xa8>
   809ce:	6813      	ldr	r3, [r2, #0]
   809d0:	2230      	movs	r2, #48	; 0x30
   809d2:	701a      	strb	r2, [r3, #0]
   809d4:	6830      	ldr	r0, [r6, #0]
   809d6:	6882      	ldr	r2, [r0, #8]
   809d8:	6813      	ldr	r3, [r2, #0]
   809da:	7819      	ldrb	r1, [r3, #0]
   809dc:	290a      	cmp	r1, #10
   809de:	d002      	beq.n	809e6 <UnityPrintMask+0xa2>
   809e0:	3301      	adds	r3, #1
   809e2:	6013      	str	r3, [r2, #0]
   809e4:	e036      	b.n	80a54 <UnityPrintMask+0x110>
   809e6:	210a      	movs	r1, #10
   809e8:	47d0      	blx	sl
   809ea:	e033      	b.n	80a54 <UnityPrintMask+0x110>
   809ec:	2130      	movs	r1, #48	; 0x30
   809ee:	47d0      	blx	sl
   809f0:	e030      	b.n	80a54 <UnityPrintMask+0x110>
   809f2:	6883      	ldr	r3, [r0, #8]
   809f4:	681b      	ldr	r3, [r3, #0]
   809f6:	2230      	movs	r2, #48	; 0x30
   809f8:	701a      	strb	r2, [r3, #0]
   809fa:	6833      	ldr	r3, [r6, #0]
   809fc:	689b      	ldr	r3, [r3, #8]
   809fe:	681a      	ldr	r2, [r3, #0]
   80a00:	3201      	adds	r2, #1
   80a02:	601a      	str	r2, [r3, #0]
   80a04:	e026      	b.n	80a54 <UnityPrintMask+0x110>
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   80a06:	6830      	ldr	r0, [r6, #0]
   80a08:	6882      	ldr	r2, [r0, #8]
   80a0a:	6893      	ldr	r3, [r2, #8]
   80a0c:	3b01      	subs	r3, #1
   80a0e:	6093      	str	r3, [r2, #8]
   80a10:	2b00      	cmp	r3, #0
   80a12:	da16      	bge.n	80a42 <UnityPrintMask+0xfe>
   80a14:	6882      	ldr	r2, [r0, #8]
   80a16:	6891      	ldr	r1, [r2, #8]
   80a18:	6993      	ldr	r3, [r2, #24]
   80a1a:	4299      	cmp	r1, r3
   80a1c:	db0e      	blt.n	80a3c <UnityPrintMask+0xf8>
   80a1e:	6813      	ldr	r3, [r2, #0]
   80a20:	f883 9000 	strb.w	r9, [r3]
   80a24:	6830      	ldr	r0, [r6, #0]
   80a26:	6882      	ldr	r2, [r0, #8]
   80a28:	6813      	ldr	r3, [r2, #0]
   80a2a:	7819      	ldrb	r1, [r3, #0]
   80a2c:	290a      	cmp	r1, #10
   80a2e:	d002      	beq.n	80a36 <UnityPrintMask+0xf2>
   80a30:	3301      	adds	r3, #1
   80a32:	6013      	str	r3, [r2, #0]
   80a34:	e00e      	b.n	80a54 <UnityPrintMask+0x110>
   80a36:	210a      	movs	r1, #10
   80a38:	47d0      	blx	sl
   80a3a:	e00b      	b.n	80a54 <UnityPrintMask+0x110>
   80a3c:	4649      	mov	r1, r9
   80a3e:	47d0      	blx	sl
   80a40:	e008      	b.n	80a54 <UnityPrintMask+0x110>
   80a42:	6883      	ldr	r3, [r0, #8]
   80a44:	681b      	ldr	r3, [r3, #0]
   80a46:	f883 9000 	strb.w	r9, [r3]
   80a4a:	6833      	ldr	r3, [r6, #0]
   80a4c:	689b      	ldr	r3, [r3, #8]
   80a4e:	681a      	ldr	r2, [r3, #0]
   80a50:	3201      	adds	r2, #1
   80a52:	601a      	str	r2, [r3, #0]
        }
        current_bit = current_bit >> 1;
   80a54:	0864      	lsrs	r4, r4, #1
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
   80a56:	3d01      	subs	r5, #1
   80a58:	d180      	bne.n	8095c <UnityPrintMask+0x18>
        {
            UNITY_OUTPUT_CHAR('X');
        }
        current_bit = current_bit >> 1;
    }
}
   80a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80a5e:	bf00      	nop
   80a60:	20070560 	.word	0x20070560
   80a64:	00081ddd 	.word	0x00081ddd

00080a68 <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   80a68:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   80a6a:	4802      	ldr	r0, [pc, #8]	; (80a74 <UnityPrintFail+0xc>)
   80a6c:	4b02      	ldr	r3, [pc, #8]	; (80a78 <UnityPrintFail+0x10>)
   80a6e:	4798      	blx	r3
   80a70:	bd08      	pop	{r3, pc}
   80a72:	bf00      	nop
   80a74:	00082d98 	.word	0x00082d98
   80a78:	00080545 	.word	0x00080545

00080a7c <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   80a7c:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   80a7e:	4802      	ldr	r0, [pc, #8]	; (80a88 <UnityPrintOk+0xc>)
   80a80:	4b02      	ldr	r3, [pc, #8]	; (80a8c <UnityPrintOk+0x10>)
   80a82:	4798      	blx	r3
   80a84:	bd08      	pop	{r3, pc}
   80a86:	bf00      	nop
   80a88:	00082d88 	.word	0x00082d88
   80a8c:	00080545 	.word	0x00080545

00080a90 <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   80a90:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   80a92:	4b24      	ldr	r3, [pc, #144]	; (80b24 <UnityConcludeTest+0x94>)
   80a94:	69db      	ldr	r3, [r3, #28]
   80a96:	b123      	cbz	r3, 80aa2 <UnityConcludeTest+0x12>
    {
        Unity.TestIgnores++;
   80a98:	4b22      	ldr	r3, [pc, #136]	; (80b24 <UnityConcludeTest+0x94>)
   80a9a:	695a      	ldr	r2, [r3, #20]
   80a9c:	3201      	adds	r2, #1
   80a9e:	615a      	str	r2, [r3, #20]
   80aa0:	e00f      	b.n	80ac2 <UnityConcludeTest+0x32>
    }
    else if (!Unity.CurrentTestFailed)
   80aa2:	4b20      	ldr	r3, [pc, #128]	; (80b24 <UnityConcludeTest+0x94>)
   80aa4:	699b      	ldr	r3, [r3, #24]
   80aa6:	b943      	cbnz	r3, 80aba <UnityConcludeTest+0x2a>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   80aa8:	4b1e      	ldr	r3, [pc, #120]	; (80b24 <UnityConcludeTest+0x94>)
   80aaa:	6818      	ldr	r0, [r3, #0]
   80aac:	6899      	ldr	r1, [r3, #8]
   80aae:	4b1e      	ldr	r3, [pc, #120]	; (80b28 <UnityConcludeTest+0x98>)
   80ab0:	4798      	blx	r3
        UnityPrint(UnityStrPass);
   80ab2:	481e      	ldr	r0, [pc, #120]	; (80b2c <UnityConcludeTest+0x9c>)
   80ab4:	4b1e      	ldr	r3, [pc, #120]	; (80b30 <UnityConcludeTest+0xa0>)
   80ab6:	4798      	blx	r3
   80ab8:	e003      	b.n	80ac2 <UnityConcludeTest+0x32>
    }
    else
    {
        Unity.TestFailures++;
   80aba:	4b1a      	ldr	r3, [pc, #104]	; (80b24 <UnityConcludeTest+0x94>)
   80abc:	691a      	ldr	r2, [r3, #16]
   80abe:	3201      	adds	r2, #1
   80ac0:	611a      	str	r2, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   80ac2:	4b18      	ldr	r3, [pc, #96]	; (80b24 <UnityConcludeTest+0x94>)
   80ac4:	2200      	movs	r2, #0
   80ac6:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80ac8:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   80aca:	4b1a      	ldr	r3, [pc, #104]	; (80b34 <UnityConcludeTest+0xa4>)
   80acc:	6818      	ldr	r0, [r3, #0]
   80ace:	6882      	ldr	r2, [r0, #8]
   80ad0:	6893      	ldr	r3, [r2, #8]
   80ad2:	3b01      	subs	r3, #1
   80ad4:	6093      	str	r3, [r2, #8]
   80ad6:	2b00      	cmp	r3, #0
   80ad8:	da19      	bge.n	80b0e <UnityConcludeTest+0x7e>
   80ada:	6882      	ldr	r2, [r0, #8]
   80adc:	6891      	ldr	r1, [r2, #8]
   80ade:	6993      	ldr	r3, [r2, #24]
   80ae0:	4299      	cmp	r1, r3
   80ae2:	db10      	blt.n	80b06 <UnityConcludeTest+0x76>
   80ae4:	6813      	ldr	r3, [r2, #0]
   80ae6:	220a      	movs	r2, #10
   80ae8:	701a      	strb	r2, [r3, #0]
   80aea:	4b12      	ldr	r3, [pc, #72]	; (80b34 <UnityConcludeTest+0xa4>)
   80aec:	6818      	ldr	r0, [r3, #0]
   80aee:	6882      	ldr	r2, [r0, #8]
   80af0:	6813      	ldr	r3, [r2, #0]
   80af2:	7819      	ldrb	r1, [r3, #0]
   80af4:	290a      	cmp	r1, #10
   80af6:	d002      	beq.n	80afe <UnityConcludeTest+0x6e>
   80af8:	3301      	adds	r3, #1
   80afa:	6013      	str	r3, [r2, #0]
   80afc:	bd08      	pop	{r3, pc}
   80afe:	210a      	movs	r1, #10
   80b00:	4b0d      	ldr	r3, [pc, #52]	; (80b38 <UnityConcludeTest+0xa8>)
   80b02:	4798      	blx	r3
   80b04:	bd08      	pop	{r3, pc}
   80b06:	210a      	movs	r1, #10
   80b08:	4b0b      	ldr	r3, [pc, #44]	; (80b38 <UnityConcludeTest+0xa8>)
   80b0a:	4798      	blx	r3
   80b0c:	bd08      	pop	{r3, pc}
   80b0e:	6883      	ldr	r3, [r0, #8]
   80b10:	681b      	ldr	r3, [r3, #0]
   80b12:	220a      	movs	r2, #10
   80b14:	701a      	strb	r2, [r3, #0]
   80b16:	4b07      	ldr	r3, [pc, #28]	; (80b34 <UnityConcludeTest+0xa4>)
   80b18:	681b      	ldr	r3, [r3, #0]
   80b1a:	689b      	ldr	r3, [r3, #8]
   80b1c:	681a      	ldr	r2, [r3, #0]
   80b1e:	3201      	adds	r2, #1
   80b20:	601a      	str	r2, [r3, #0]
   80b22:	bd08      	pop	{r3, pc}
   80b24:	20070adc 	.word	0x20070adc
   80b28:	00080771 	.word	0x00080771
   80b2c:	00082de4 	.word	0x00082de4
   80b30:	00080545 	.word	0x00080545
   80b34:	20070560 	.word	0x20070560
   80b38:	00081ddd 	.word	0x00081ddd

00080b3c <UnityAssertBits>:
void UnityAssertBits(const _U_SINT mask,
                     const _U_SINT expected,
                     const _U_SINT actual,
                     const char* msg,
                     const UNITY_LINE_TYPE lineNumber)
{
   80b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80b40:	4605      	mov	r5, r0
   80b42:	460f      	mov	r7, r1
   80b44:	4616      	mov	r6, r2
   80b46:	4698      	mov	r8, r3
    UNITY_SKIP_EXECUTION;
   80b48:	4c12      	ldr	r4, [pc, #72]	; (80b94 <UnityAssertBits+0x58>)
   80b4a:	69a4      	ldr	r4, [r4, #24]
   80b4c:	b9fc      	cbnz	r4, 80b8e <UnityAssertBits+0x52>
   80b4e:	4a11      	ldr	r2, [pc, #68]	; (80b94 <UnityAssertBits+0x58>)
   80b50:	69d2      	ldr	r2, [r2, #28]
   80b52:	b9e2      	cbnz	r2, 80b8e <UnityAssertBits+0x52>

    if ((mask & expected) != (mask & actual))
   80b54:	ea81 0306 	eor.w	r3, r1, r6
   80b58:	4203      	tst	r3, r0
   80b5a:	d018      	beq.n	80b8e <UnityAssertBits+0x52>
    {
        UnityTestResultsFailBegin(lineNumber);
   80b5c:	9808      	ldr	r0, [sp, #32]
   80b5e:	4b0e      	ldr	r3, [pc, #56]	; (80b98 <UnityAssertBits+0x5c>)
   80b60:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   80b62:	480e      	ldr	r0, [pc, #56]	; (80b9c <UnityAssertBits+0x60>)
   80b64:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80bb0 <UnityAssertBits+0x74>
   80b68:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)expected);
   80b6a:	4628      	mov	r0, r5
   80b6c:	4639      	mov	r1, r7
   80b6e:	4c0c      	ldr	r4, [pc, #48]	; (80ba0 <UnityAssertBits+0x64>)
   80b70:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   80b72:	480c      	ldr	r0, [pc, #48]	; (80ba4 <UnityAssertBits+0x68>)
   80b74:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)actual);
   80b76:	4628      	mov	r0, r5
   80b78:	4631      	mov	r1, r6
   80b7a:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   80b7c:	4640      	mov	r0, r8
   80b7e:	4b0a      	ldr	r3, [pc, #40]	; (80ba8 <UnityAssertBits+0x6c>)
   80b80:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   80b82:	4804      	ldr	r0, [pc, #16]	; (80b94 <UnityAssertBits+0x58>)
   80b84:	2101      	movs	r1, #1
   80b86:	6181      	str	r1, [r0, #24]
   80b88:	3020      	adds	r0, #32
   80b8a:	4b08      	ldr	r3, [pc, #32]	; (80bac <UnityAssertBits+0x70>)
   80b8c:	4798      	blx	r3
   80b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b92:	bf00      	nop
   80b94:	20070adc 	.word	0x20070adc
   80b98:	000808a5 	.word	0x000808a5
   80b9c:	00082da0 	.word	0x00082da0
   80ba0:	00080945 	.word	0x00080945
   80ba4:	00082d90 	.word	0x00082d90
   80ba8:	00080929 	.word	0x00080929
   80bac:	00081ccd 	.word	0x00081ccd
   80bb0:	00080545 	.word	0x00080545

00080bb4 <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   80bb4:	b500      	push	{lr}
   80bb6:	b083      	sub	sp, #12
   80bb8:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   80bba:	480e      	ldr	r0, [pc, #56]	; (80bf4 <UnityDefaultTestRun+0x40>)
   80bbc:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   80bbe:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   80bc0:	68c3      	ldr	r3, [r0, #12]
   80bc2:	3301      	adds	r3, #1
   80bc4:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   80bc6:	3020      	adds	r0, #32
   80bc8:	4b0b      	ldr	r3, [pc, #44]	; (80bf8 <UnityDefaultTestRun+0x44>)
   80bca:	4798      	blx	r3
   80bcc:	b918      	cbnz	r0, 80bd6 <UnityDefaultTestRun+0x22>
    {
        setUp();
   80bce:	4b0b      	ldr	r3, [pc, #44]	; (80bfc <UnityDefaultTestRun+0x48>)
   80bd0:	4798      	blx	r3
        Func();
   80bd2:	9b01      	ldr	r3, [sp, #4]
   80bd4:	4798      	blx	r3
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   80bd6:	480a      	ldr	r0, [pc, #40]	; (80c00 <UnityDefaultTestRun+0x4c>)
   80bd8:	4b07      	ldr	r3, [pc, #28]	; (80bf8 <UnityDefaultTestRun+0x44>)
   80bda:	4798      	blx	r3
   80bdc:	b920      	cbnz	r0, 80be8 <UnityDefaultTestRun+0x34>
   80bde:	4b05      	ldr	r3, [pc, #20]	; (80bf4 <UnityDefaultTestRun+0x40>)
   80be0:	69db      	ldr	r3, [r3, #28]
   80be2:	b90b      	cbnz	r3, 80be8 <UnityDefaultTestRun+0x34>
    {
        tearDown();
   80be4:	4b07      	ldr	r3, [pc, #28]	; (80c04 <UnityDefaultTestRun+0x50>)
   80be6:	4798      	blx	r3
    }
    UnityConcludeTest();
   80be8:	4b07      	ldr	r3, [pc, #28]	; (80c08 <UnityDefaultTestRun+0x54>)
   80bea:	4798      	blx	r3
}
   80bec:	b003      	add	sp, #12
   80bee:	f85d fb04 	ldr.w	pc, [sp], #4
   80bf2:	bf00      	nop
   80bf4:	20070adc 	.word	0x20070adc
   80bf8:	00081cc1 	.word	0x00081cc1
   80bfc:	00080f65 	.word	0x00080f65
   80c00:	20070afc 	.word	0x20070afc
   80c04:	00080f75 	.word	0x00080f75
   80c08:	00080a91 	.word	0x00080a91

00080c0c <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   80c0c:	4b05      	ldr	r3, [pc, #20]	; (80c24 <UnityBegin+0x18>)
   80c0e:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   80c10:	2200      	movs	r2, #0
   80c12:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   80c14:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   80c16:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   80c18:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   80c1a:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   80c1c:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80c1e:	61da      	str	r2, [r3, #28]
   80c20:	4770      	bx	lr
   80c22:	bf00      	nop
   80c24:	20070adc 	.word	0x20070adc

00080c28 <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   80c28:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   80c2a:	4b66      	ldr	r3, [pc, #408]	; (80dc4 <UnityEnd+0x19c>)
   80c2c:	6818      	ldr	r0, [r3, #0]
   80c2e:	6882      	ldr	r2, [r0, #8]
   80c30:	6893      	ldr	r3, [r2, #8]
   80c32:	3b01      	subs	r3, #1
   80c34:	6093      	str	r3, [r2, #8]
   80c36:	2b00      	cmp	r3, #0
   80c38:	da19      	bge.n	80c6e <UnityEnd+0x46>
   80c3a:	6882      	ldr	r2, [r0, #8]
   80c3c:	6891      	ldr	r1, [r2, #8]
   80c3e:	6993      	ldr	r3, [r2, #24]
   80c40:	4299      	cmp	r1, r3
   80c42:	db10      	blt.n	80c66 <UnityEnd+0x3e>
   80c44:	6813      	ldr	r3, [r2, #0]
   80c46:	220a      	movs	r2, #10
   80c48:	701a      	strb	r2, [r3, #0]
   80c4a:	4b5e      	ldr	r3, [pc, #376]	; (80dc4 <UnityEnd+0x19c>)
   80c4c:	6818      	ldr	r0, [r3, #0]
   80c4e:	6882      	ldr	r2, [r0, #8]
   80c50:	6813      	ldr	r3, [r2, #0]
   80c52:	7819      	ldrb	r1, [r3, #0]
   80c54:	290a      	cmp	r1, #10
   80c56:	d002      	beq.n	80c5e <UnityEnd+0x36>
   80c58:	3301      	adds	r3, #1
   80c5a:	6013      	str	r3, [r2, #0]
   80c5c:	e011      	b.n	80c82 <UnityEnd+0x5a>
   80c5e:	210a      	movs	r1, #10
   80c60:	4b59      	ldr	r3, [pc, #356]	; (80dc8 <UnityEnd+0x1a0>)
   80c62:	4798      	blx	r3
   80c64:	e00d      	b.n	80c82 <UnityEnd+0x5a>
   80c66:	210a      	movs	r1, #10
   80c68:	4b57      	ldr	r3, [pc, #348]	; (80dc8 <UnityEnd+0x1a0>)
   80c6a:	4798      	blx	r3
   80c6c:	e009      	b.n	80c82 <UnityEnd+0x5a>
   80c6e:	6883      	ldr	r3, [r0, #8]
   80c70:	681b      	ldr	r3, [r3, #0]
   80c72:	220a      	movs	r2, #10
   80c74:	701a      	strb	r2, [r3, #0]
   80c76:	4b53      	ldr	r3, [pc, #332]	; (80dc4 <UnityEnd+0x19c>)
   80c78:	681b      	ldr	r3, [r3, #0]
   80c7a:	689b      	ldr	r3, [r3, #8]
   80c7c:	681a      	ldr	r2, [r3, #0]
   80c7e:	3201      	adds	r2, #1
   80c80:	601a      	str	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
   80c82:	4852      	ldr	r0, [pc, #328]	; (80dcc <UnityEnd+0x1a4>)
   80c84:	4b52      	ldr	r3, [pc, #328]	; (80dd0 <UnityEnd+0x1a8>)
   80c86:	4798      	blx	r3
    UNITY_PRINT_EOL;
   80c88:	4b4e      	ldr	r3, [pc, #312]	; (80dc4 <UnityEnd+0x19c>)
   80c8a:	6818      	ldr	r0, [r3, #0]
   80c8c:	6882      	ldr	r2, [r0, #8]
   80c8e:	6893      	ldr	r3, [r2, #8]
   80c90:	3b01      	subs	r3, #1
   80c92:	6093      	str	r3, [r2, #8]
   80c94:	2b00      	cmp	r3, #0
   80c96:	da19      	bge.n	80ccc <UnityEnd+0xa4>
   80c98:	6882      	ldr	r2, [r0, #8]
   80c9a:	6891      	ldr	r1, [r2, #8]
   80c9c:	6993      	ldr	r3, [r2, #24]
   80c9e:	4299      	cmp	r1, r3
   80ca0:	db10      	blt.n	80cc4 <UnityEnd+0x9c>
   80ca2:	6813      	ldr	r3, [r2, #0]
   80ca4:	220a      	movs	r2, #10
   80ca6:	701a      	strb	r2, [r3, #0]
   80ca8:	4b46      	ldr	r3, [pc, #280]	; (80dc4 <UnityEnd+0x19c>)
   80caa:	6818      	ldr	r0, [r3, #0]
   80cac:	6882      	ldr	r2, [r0, #8]
   80cae:	6813      	ldr	r3, [r2, #0]
   80cb0:	7819      	ldrb	r1, [r3, #0]
   80cb2:	290a      	cmp	r1, #10
   80cb4:	d002      	beq.n	80cbc <UnityEnd+0x94>
   80cb6:	3301      	adds	r3, #1
   80cb8:	6013      	str	r3, [r2, #0]
   80cba:	e011      	b.n	80ce0 <UnityEnd+0xb8>
   80cbc:	210a      	movs	r1, #10
   80cbe:	4b42      	ldr	r3, [pc, #264]	; (80dc8 <UnityEnd+0x1a0>)
   80cc0:	4798      	blx	r3
   80cc2:	e00d      	b.n	80ce0 <UnityEnd+0xb8>
   80cc4:	210a      	movs	r1, #10
   80cc6:	4b40      	ldr	r3, [pc, #256]	; (80dc8 <UnityEnd+0x1a0>)
   80cc8:	4798      	blx	r3
   80cca:	e009      	b.n	80ce0 <UnityEnd+0xb8>
   80ccc:	6883      	ldr	r3, [r0, #8]
   80cce:	681b      	ldr	r3, [r3, #0]
   80cd0:	220a      	movs	r2, #10
   80cd2:	701a      	strb	r2, [r3, #0]
   80cd4:	4b3b      	ldr	r3, [pc, #236]	; (80dc4 <UnityEnd+0x19c>)
   80cd6:	681b      	ldr	r3, [r3, #0]
   80cd8:	689b      	ldr	r3, [r3, #8]
   80cda:	681a      	ldr	r2, [r3, #0]
   80cdc:	3201      	adds	r2, #1
   80cde:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   80ce0:	4e3c      	ldr	r6, [pc, #240]	; (80dd4 <UnityEnd+0x1ac>)
   80ce2:	68f0      	ldr	r0, [r6, #12]
   80ce4:	4d3c      	ldr	r5, [pc, #240]	; (80dd8 <UnityEnd+0x1b0>)
   80ce6:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   80ce8:	483c      	ldr	r0, [pc, #240]	; (80ddc <UnityEnd+0x1b4>)
   80cea:	4c39      	ldr	r4, [pc, #228]	; (80dd0 <UnityEnd+0x1a8>)
   80cec:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   80cee:	6930      	ldr	r0, [r6, #16]
   80cf0:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   80cf2:	483b      	ldr	r0, [pc, #236]	; (80de0 <UnityEnd+0x1b8>)
   80cf4:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   80cf6:	6970      	ldr	r0, [r6, #20]
   80cf8:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   80cfa:	483a      	ldr	r0, [pc, #232]	; (80de4 <UnityEnd+0x1bc>)
   80cfc:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   80cfe:	4b31      	ldr	r3, [pc, #196]	; (80dc4 <UnityEnd+0x19c>)
   80d00:	6818      	ldr	r0, [r3, #0]
   80d02:	6882      	ldr	r2, [r0, #8]
   80d04:	6893      	ldr	r3, [r2, #8]
   80d06:	3b01      	subs	r3, #1
   80d08:	6093      	str	r3, [r2, #8]
   80d0a:	2b00      	cmp	r3, #0
   80d0c:	da19      	bge.n	80d42 <UnityEnd+0x11a>
   80d0e:	6882      	ldr	r2, [r0, #8]
   80d10:	6891      	ldr	r1, [r2, #8]
   80d12:	6993      	ldr	r3, [r2, #24]
   80d14:	4299      	cmp	r1, r3
   80d16:	db10      	blt.n	80d3a <UnityEnd+0x112>
   80d18:	6813      	ldr	r3, [r2, #0]
   80d1a:	220a      	movs	r2, #10
   80d1c:	701a      	strb	r2, [r3, #0]
   80d1e:	4b29      	ldr	r3, [pc, #164]	; (80dc4 <UnityEnd+0x19c>)
   80d20:	6818      	ldr	r0, [r3, #0]
   80d22:	6882      	ldr	r2, [r0, #8]
   80d24:	6813      	ldr	r3, [r2, #0]
   80d26:	7819      	ldrb	r1, [r3, #0]
   80d28:	290a      	cmp	r1, #10
   80d2a:	d002      	beq.n	80d32 <UnityEnd+0x10a>
   80d2c:	3301      	adds	r3, #1
   80d2e:	6013      	str	r3, [r2, #0]
   80d30:	e011      	b.n	80d56 <UnityEnd+0x12e>
   80d32:	210a      	movs	r1, #10
   80d34:	4b24      	ldr	r3, [pc, #144]	; (80dc8 <UnityEnd+0x1a0>)
   80d36:	4798      	blx	r3
   80d38:	e00d      	b.n	80d56 <UnityEnd+0x12e>
   80d3a:	210a      	movs	r1, #10
   80d3c:	4b22      	ldr	r3, [pc, #136]	; (80dc8 <UnityEnd+0x1a0>)
   80d3e:	4798      	blx	r3
   80d40:	e009      	b.n	80d56 <UnityEnd+0x12e>
   80d42:	6883      	ldr	r3, [r0, #8]
   80d44:	681b      	ldr	r3, [r3, #0]
   80d46:	220a      	movs	r2, #10
   80d48:	701a      	strb	r2, [r3, #0]
   80d4a:	4b1e      	ldr	r3, [pc, #120]	; (80dc4 <UnityEnd+0x19c>)
   80d4c:	681b      	ldr	r3, [r3, #0]
   80d4e:	689b      	ldr	r3, [r3, #8]
   80d50:	681a      	ldr	r2, [r3, #0]
   80d52:	3201      	adds	r2, #1
   80d54:	601a      	str	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
   80d56:	4b1f      	ldr	r3, [pc, #124]	; (80dd4 <UnityEnd+0x1ac>)
   80d58:	691b      	ldr	r3, [r3, #16]
   80d5a:	b913      	cbnz	r3, 80d62 <UnityEnd+0x13a>
    {
        UnityPrintOk();
   80d5c:	4b22      	ldr	r3, [pc, #136]	; (80de8 <UnityEnd+0x1c0>)
   80d5e:	4798      	blx	r3
   80d60:	e001      	b.n	80d66 <UnityEnd+0x13e>
    }
    else
    {
        UnityPrintFail();
   80d62:	4b22      	ldr	r3, [pc, #136]	; (80dec <UnityEnd+0x1c4>)
   80d64:	4798      	blx	r3
    }
    UNITY_PRINT_EOL;
   80d66:	4b17      	ldr	r3, [pc, #92]	; (80dc4 <UnityEnd+0x19c>)
   80d68:	6818      	ldr	r0, [r3, #0]
   80d6a:	6882      	ldr	r2, [r0, #8]
   80d6c:	6893      	ldr	r3, [r2, #8]
   80d6e:	3b01      	subs	r3, #1
   80d70:	6093      	str	r3, [r2, #8]
   80d72:	2b00      	cmp	r3, #0
   80d74:	da19      	bge.n	80daa <UnityEnd+0x182>
   80d76:	6882      	ldr	r2, [r0, #8]
   80d78:	6891      	ldr	r1, [r2, #8]
   80d7a:	6993      	ldr	r3, [r2, #24]
   80d7c:	4299      	cmp	r1, r3
   80d7e:	db10      	blt.n	80da2 <UnityEnd+0x17a>
   80d80:	6813      	ldr	r3, [r2, #0]
   80d82:	220a      	movs	r2, #10
   80d84:	701a      	strb	r2, [r3, #0]
   80d86:	4b0f      	ldr	r3, [pc, #60]	; (80dc4 <UnityEnd+0x19c>)
   80d88:	6818      	ldr	r0, [r3, #0]
   80d8a:	6882      	ldr	r2, [r0, #8]
   80d8c:	6813      	ldr	r3, [r2, #0]
   80d8e:	7819      	ldrb	r1, [r3, #0]
   80d90:	290a      	cmp	r1, #10
   80d92:	d002      	beq.n	80d9a <UnityEnd+0x172>
   80d94:	3301      	adds	r3, #1
   80d96:	6013      	str	r3, [r2, #0]
   80d98:	e011      	b.n	80dbe <UnityEnd+0x196>
   80d9a:	210a      	movs	r1, #10
   80d9c:	4b0a      	ldr	r3, [pc, #40]	; (80dc8 <UnityEnd+0x1a0>)
   80d9e:	4798      	blx	r3
   80da0:	e00d      	b.n	80dbe <UnityEnd+0x196>
   80da2:	210a      	movs	r1, #10
   80da4:	4b08      	ldr	r3, [pc, #32]	; (80dc8 <UnityEnd+0x1a0>)
   80da6:	4798      	blx	r3
   80da8:	e009      	b.n	80dbe <UnityEnd+0x196>
   80daa:	6883      	ldr	r3, [r0, #8]
   80dac:	681b      	ldr	r3, [r3, #0]
   80dae:	220a      	movs	r2, #10
   80db0:	701a      	strb	r2, [r3, #0]
   80db2:	4b04      	ldr	r3, [pc, #16]	; (80dc4 <UnityEnd+0x19c>)
   80db4:	681b      	ldr	r3, [r3, #0]
   80db6:	689b      	ldr	r3, [r3, #8]
   80db8:	681a      	ldr	r2, [r3, #0]
   80dba:	3201      	adds	r2, #1
   80dbc:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   80dbe:	4b05      	ldr	r3, [pc, #20]	; (80dd4 <UnityEnd+0x1ac>)
   80dc0:	6918      	ldr	r0, [r3, #16]
   80dc2:	bd70      	pop	{r4, r5, r6, pc}
   80dc4:	20070560 	.word	0x20070560
   80dc8:	00081ddd 	.word	0x00081ddd
   80dcc:	00082dac 	.word	0x00082dac
   80dd0:	00080545 	.word	0x00080545
   80dd4:	20070adc 	.word	0x20070adc
   80dd8:	0008021d 	.word	0x0008021d
   80ddc:	00082ddc 	.word	0x00082ddc
   80de0:	00082dc4 	.word	0x00082dc4
   80de4:	00082dd0 	.word	0x00082dd0
   80de8:	00080a7d 	.word	0x00080a7d
   80dec:	00080a69 	.word	0x00080a69

00080df0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80df4:	460e      	mov	r6, r1
   80df6:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80df8:	3801      	subs	r0, #1
   80dfa:	2802      	cmp	r0, #2
   80dfc:	d80f      	bhi.n	80e1e <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80dfe:	b192      	cbz	r2, 80e26 <_write+0x36>
   80e00:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80e02:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80e40 <_write+0x50>
   80e06:	4f0d      	ldr	r7, [pc, #52]	; (80e3c <_write+0x4c>)
   80e08:	f8d8 0000 	ldr.w	r0, [r8]
   80e0c:	5d31      	ldrb	r1, [r6, r4]
   80e0e:	683b      	ldr	r3, [r7, #0]
   80e10:	4798      	blx	r3
   80e12:	2800      	cmp	r0, #0
   80e14:	db0a      	blt.n	80e2c <_write+0x3c>
			return -1;
		}
		++nChars;
   80e16:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80e18:	42a5      	cmp	r5, r4
   80e1a:	d1f5      	bne.n	80e08 <_write+0x18>
   80e1c:	e00a      	b.n	80e34 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80e1e:	f04f 30ff 	mov.w	r0, #4294967295
   80e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80e26:	2000      	movs	r0, #0
   80e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80e2c:	f04f 30ff 	mov.w	r0, #4294967295
   80e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80e34:	4620      	mov	r0, r4
	}
	return nChars;
}
   80e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e3a:	bf00      	nop
   80e3c:	20070b58 	.word	0x20070b58
   80e40:	20070b5c 	.word	0x20070b5c

00080e44 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e48:	b083      	sub	sp, #12
   80e4a:	4605      	mov	r5, r0
	while (len) {
   80e4c:	4690      	mov	r8, r2
   80e4e:	2a00      	cmp	r2, #0
   80e50:	d047      	beq.n	80ee2 <usart_serial_read_packet+0x9e>
   80e52:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80e54:	4f25      	ldr	r7, [pc, #148]	; (80eec <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   80e56:	4c26      	ldr	r4, [pc, #152]	; (80ef0 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80e58:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80f04 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80e5c:	f8df b094 	ldr.w	fp, [pc, #148]	; 80ef4 <usart_serial_read_packet+0xb0>
   80e60:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80e64:	2300      	movs	r3, #0
   80e66:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80e68:	4b22      	ldr	r3, [pc, #136]	; (80ef4 <usart_serial_read_packet+0xb0>)
   80e6a:	429d      	cmp	r5, r3
   80e6c:	d106      	bne.n	80e7c <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80e6e:	4658      	mov	r0, fp
   80e70:	4649      	mov	r1, r9
   80e72:	4b21      	ldr	r3, [pc, #132]	; (80ef8 <usart_serial_read_packet+0xb4>)
   80e74:	4798      	blx	r3
   80e76:	2800      	cmp	r0, #0
   80e78:	d1f9      	bne.n	80e6e <usart_serial_read_packet+0x2a>
   80e7a:	e019      	b.n	80eb0 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80e7c:	4b1f      	ldr	r3, [pc, #124]	; (80efc <usart_serial_read_packet+0xb8>)
   80e7e:	429d      	cmp	r5, r3
   80e80:	d109      	bne.n	80e96 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80e82:	4699      	mov	r9, r3
   80e84:	4648      	mov	r0, r9
   80e86:	a901      	add	r1, sp, #4
   80e88:	47a0      	blx	r4
   80e8a:	2800      	cmp	r0, #0
   80e8c:	d1fa      	bne.n	80e84 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80e8e:	9b01      	ldr	r3, [sp, #4]
   80e90:	f806 3c01 	strb.w	r3, [r6, #-1]
   80e94:	e017      	b.n	80ec6 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80e96:	4b1a      	ldr	r3, [pc, #104]	; (80f00 <usart_serial_read_packet+0xbc>)
   80e98:	429d      	cmp	r5, r3
   80e9a:	d109      	bne.n	80eb0 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80e9c:	4699      	mov	r9, r3
   80e9e:	4648      	mov	r0, r9
   80ea0:	a901      	add	r1, sp, #4
   80ea2:	47a0      	blx	r4
   80ea4:	2800      	cmp	r0, #0
   80ea6:	d1fa      	bne.n	80e9e <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80ea8:	9b01      	ldr	r3, [sp, #4]
   80eaa:	f806 3c01 	strb.w	r3, [r6, #-1]
   80eae:	e014      	b.n	80eda <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80eb0:	4555      	cmp	r5, sl
   80eb2:	d108      	bne.n	80ec6 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80eb4:	4650      	mov	r0, sl
   80eb6:	a901      	add	r1, sp, #4
   80eb8:	47a0      	blx	r4
   80eba:	2800      	cmp	r0, #0
   80ebc:	d1fa      	bne.n	80eb4 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80ebe:	9b01      	ldr	r3, [sp, #4]
   80ec0:	f806 3c01 	strb.w	r3, [r6, #-1]
   80ec4:	e009      	b.n	80eda <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80ec6:	42bd      	cmp	r5, r7
   80ec8:	d107      	bne.n	80eda <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80eca:	4638      	mov	r0, r7
   80ecc:	a901      	add	r1, sp, #4
   80ece:	47a0      	blx	r4
   80ed0:	2800      	cmp	r0, #0
   80ed2:	d1fa      	bne.n	80eca <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80ed4:	9b01      	ldr	r3, [sp, #4]
   80ed6:	f806 3c01 	strb.w	r3, [r6, #-1]
   80eda:	3601      	adds	r6, #1
   80edc:	f1b8 0801 	subs.w	r8, r8, #1
   80ee0:	d1be      	bne.n	80e60 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   80ee2:	2000      	movs	r0, #0
   80ee4:	b003      	add	sp, #12
   80ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80eea:	bf00      	nop
   80eec:	400a4000 	.word	0x400a4000
   80ef0:	0008019d 	.word	0x0008019d
   80ef4:	400e0800 	.word	0x400e0800
   80ef8:	00080f51 	.word	0x00080f51
   80efc:	40098000 	.word	0x40098000
   80f00:	4009c000 	.word	0x4009c000
   80f04:	400a0000 	.word	0x400a0000

00080f08 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80f08:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80f0a:	23ac      	movs	r3, #172	; 0xac
   80f0c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80f0e:	680a      	ldr	r2, [r1, #0]
   80f10:	684b      	ldr	r3, [r1, #4]
   80f12:	fbb2 f3f3 	udiv	r3, r2, r3
   80f16:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80f18:	1e5c      	subs	r4, r3, #1
   80f1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80f1e:	4294      	cmp	r4, r2
   80f20:	d80a      	bhi.n	80f38 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80f22:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80f24:	688b      	ldr	r3, [r1, #8]
   80f26:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80f28:	f240 2302 	movw	r3, #514	; 0x202
   80f2c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80f30:	2350      	movs	r3, #80	; 0x50
   80f32:	6003      	str	r3, [r0, #0]

	return 0;
   80f34:	2000      	movs	r0, #0
   80f36:	e000      	b.n	80f3a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80f38:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
   80f3e:	4770      	bx	lr

00080f40 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80f40:	6943      	ldr	r3, [r0, #20]
   80f42:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80f46:	bf1a      	itte	ne
   80f48:	61c1      	strne	r1, [r0, #28]
	return 0;
   80f4a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80f4c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80f4e:	4770      	bx	lr

00080f50 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80f50:	6943      	ldr	r3, [r0, #20]
   80f52:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80f56:	bf1d      	ittte	ne
   80f58:	6983      	ldrne	r3, [r0, #24]
   80f5a:	700b      	strbne	r3, [r1, #0]
	return 0;
   80f5c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80f5e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80f60:	4770      	bx	lr
   80f62:	bf00      	nop

00080f64 <setUp>:


void setUp(void)
{
//	*p_PIOB_ODR = 0xFFFFFFFFU; 
	*p_PIOB_PDR = 0xFFFFFFFFU; /* Disable PORT B */
   80f64:	f04f 32ff 	mov.w	r2, #4294967295
   80f68:	4b01      	ldr	r3, [pc, #4]	; (80f70 <setUp+0xc>)
   80f6a:	601a      	str	r2, [r3, #0]
   80f6c:	4770      	bx	lr
   80f6e:	bf00      	nop
   80f70:	400e1004 	.word	0x400e1004

00080f74 <tearDown>:
}

void tearDown(void)
{
//	*p_PIOB_ODR = 0xFFFFFFFFU;
	*p_PIOB_PDR = 0xFFFFFFFF; /* Disable PORT B */
   80f74:	f04f 32ff 	mov.w	r2, #4294967295
   80f78:	4b01      	ldr	r3, [pc, #4]	; (80f80 <tearDown+0xc>)
   80f7a:	601a      	str	r2, [r3, #0]
   80f7c:	4770      	bx	lr
   80f7e:	bf00      	nop
   80f80:	400e1004 	.word	0x400e1004

00080f84 <test_digitalDuePin13InitialiseProperly>:
	tearDown();
	setUp();
}

void test_digitalDuePin13InitialiseProperly(void)
{
   80f84:	b510      	push	{r4, lr}
   80f86:	b082      	sub	sp, #8
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output */
   80f88:	200d      	movs	r0, #13
   80f8a:	2102      	movs	r1, #2
   80f8c:	4b0c      	ldr	r3, [pc, #48]	; (80fc0 <test_digitalDuePin13InitialiseProperly+0x3c>)
   80f8e:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(27, *p_PIOB_PSR);	/* Check the status bit that PB27 on port B is properly initialised */
   80f90:	4b0c      	ldr	r3, [pc, #48]	; (80fc4 <test_digitalDuePin13InitialiseProperly+0x40>)
   80f92:	681a      	ldr	r2, [r3, #0]
   80f94:	233a      	movs	r3, #58	; 0x3a
   80f96:	9300      	str	r3, [sp, #0]
   80f98:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   80f9c:	f04f 31ff 	mov.w	r1, #4294967295
   80fa0:	2300      	movs	r3, #0
   80fa2:	4c09      	ldr	r4, [pc, #36]	; (80fc8 <test_digitalDuePin13InitialiseProperly+0x44>)
   80fa4:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH(27, *p_PIOB_OSR);	/* Check the status bit that PB27 on port B is properly initialised */
   80fa6:	4b09      	ldr	r3, [pc, #36]	; (80fcc <test_digitalDuePin13InitialiseProperly+0x48>)
   80fa8:	681a      	ldr	r2, [r3, #0]
   80faa:	233b      	movs	r3, #59	; 0x3b
   80fac:	9300      	str	r3, [sp, #0]
   80fae:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   80fb2:	f04f 31ff 	mov.w	r1, #4294967295
   80fb6:	2300      	movs	r3, #0
   80fb8:	47a0      	blx	r4
	
	/* Note that you need to understand the board pin mapping on http://www.arduino.cc/en/Hacking/PinMappingSAM3X */
}
   80fba:	b002      	add	sp, #8
   80fbc:	bd10      	pop	{r4, pc}
   80fbe:	bf00      	nop
   80fc0:	00080215 	.word	0x00080215
   80fc4:	400e1008 	.word	0x400e1008
   80fc8:	00080b3d 	.word	0x00080b3d
   80fcc:	400e1018 	.word	0x400e1018

00080fd0 <test_digitalDuePin13IsSet>:

void test_digitalDuePin13IsSet(void)
{
   80fd0:	b510      	push	{r4, lr}
   80fd2:	b082      	sub	sp, #8
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output, already proven to work in previous test */
   80fd4:	200d      	movs	r0, #13
   80fd6:	2102      	movs	r1, #2
   80fd8:	4b09      	ldr	r3, [pc, #36]	; (81000 <test_digitalDuePin13IsSet+0x30>)
   80fda:	4798      	blx	r3
	
	digitalWrite(13, HIGH); /* set pin 13 on the Due to high, lighting up the amber diode */
   80fdc:	200d      	movs	r0, #13
   80fde:	2101      	movs	r1, #1
   80fe0:	4b08      	ldr	r3, [pc, #32]	; (81004 <test_digitalDuePin13IsSet+0x34>)
   80fe2:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(27, *p_PIOB_ODSR);	/* Check the status bit that PB27 on port B is set */
   80fe4:	4b08      	ldr	r3, [pc, #32]	; (81008 <test_digitalDuePin13IsSet+0x38>)
   80fe6:	681a      	ldr	r2, [r3, #0]
   80fe8:	2345      	movs	r3, #69	; 0x45
   80fea:	9300      	str	r3, [sp, #0]
   80fec:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   80ff0:	f04f 31ff 	mov.w	r1, #4294967295
   80ff4:	2300      	movs	r3, #0
   80ff6:	4c05      	ldr	r4, [pc, #20]	; (8100c <test_digitalDuePin13IsSet+0x3c>)
   80ff8:	47a0      	blx	r4
}
   80ffa:	b002      	add	sp, #8
   80ffc:	bd10      	pop	{r4, pc}
   80ffe:	bf00      	nop
   81000:	00080215 	.word	0x00080215
   81004:	00080219 	.word	0x00080219
   81008:	400e1038 	.word	0x400e1038
   8100c:	00080b3d 	.word	0x00080b3d

00081010 <test_digitalDuePin13IsCleared>:

void test_digitalDuePin13IsCleared(void)
{
   81010:	b510      	push	{r4, lr}
   81012:	b082      	sub	sp, #8
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output, proven to work in previous test */
   81014:	200d      	movs	r0, #13
   81016:	2102      	movs	r1, #2
   81018:	4b0a      	ldr	r3, [pc, #40]	; (81044 <test_digitalDuePin13IsCleared+0x34>)
   8101a:	4798      	blx	r3
	digitalWrite(13, HIGH); /* set pin 13 on the Due to high, lighting up the amber diode, proven to work in previous test */
   8101c:	200d      	movs	r0, #13
   8101e:	2101      	movs	r1, #1
   81020:	4c09      	ldr	r4, [pc, #36]	; (81048 <test_digitalDuePin13IsCleared+0x38>)
   81022:	47a0      	blx	r4
	digitalWrite(13, LOW);	/* set pin 13 on the Due to low, turning off the amber diode */
   81024:	200d      	movs	r0, #13
   81026:	2100      	movs	r1, #0
   81028:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(27, *p_PIOB_ODSR);	/* Check the status bit that PB27 on port B is cleared */
   8102a:	4b08      	ldr	r3, [pc, #32]	; (8104c <test_digitalDuePin13IsCleared+0x3c>)
   8102c:	681a      	ldr	r2, [r3, #0]
   8102e:	234d      	movs	r3, #77	; 0x4d
   81030:	9300      	str	r3, [sp, #0]
   81032:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   81036:	2100      	movs	r1, #0
   81038:	460b      	mov	r3, r1
   8103a:	4c05      	ldr	r4, [pc, #20]	; (81050 <test_digitalDuePin13IsCleared+0x40>)
   8103c:	47a0      	blx	r4
}
   8103e:	b002      	add	sp, #8
   81040:	bd10      	pop	{r4, pc}
   81042:	bf00      	nop
   81044:	00080215 	.word	0x00080215
   81048:	00080219 	.word	0x00080219
   8104c:	400e1038 	.word	0x400e1038
   81050:	00080b3d 	.word	0x00080b3d

00081054 <test_digitalDuePin22InitialiseProperly>:

void test_digitalDuePin22InitialiseProperly(void)
{
   81054:	b510      	push	{r4, lr}
   81056:	b082      	sub	sp, #8
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output */
   81058:	2016      	movs	r0, #22
   8105a:	2102      	movs	r1, #2
   8105c:	4b07      	ldr	r3, [pc, #28]	; (8107c <test_digitalDuePin22InitialiseProperly+0x28>)
   8105e:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(26, *p_PIOB_OSR);	/* Check the status bit that PB26 on port B is properly initialised */
   81060:	4b07      	ldr	r3, [pc, #28]	; (81080 <test_digitalDuePin22InitialiseProperly+0x2c>)
   81062:	681a      	ldr	r2, [r3, #0]
   81064:	2353      	movs	r3, #83	; 0x53
   81066:	9300      	str	r3, [sp, #0]
   81068:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   8106c:	f04f 31ff 	mov.w	r1, #4294967295
   81070:	2300      	movs	r3, #0
   81072:	4c04      	ldr	r4, [pc, #16]	; (81084 <test_digitalDuePin22InitialiseProperly+0x30>)
   81074:	47a0      	blx	r4
}
   81076:	b002      	add	sp, #8
   81078:	bd10      	pop	{r4, pc}
   8107a:	bf00      	nop
   8107c:	00080215 	.word	0x00080215
   81080:	400e1018 	.word	0x400e1018
   81084:	00080b3d 	.word	0x00080b3d

00081088 <test_digitalDuePin22IsSet>:
void test_digitalDuePin22IsSet(void)
{
   81088:	b510      	push	{r4, lr}
   8108a:	b082      	sub	sp, #8
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output, already proven to work in previous test */
   8108c:	2016      	movs	r0, #22
   8108e:	2102      	movs	r1, #2
   81090:	4b09      	ldr	r3, [pc, #36]	; (810b8 <test_digitalDuePin22IsSet+0x30>)
   81092:	4798      	blx	r3
	digitalWrite(22, HIGH); /* set pin 22 on the Due to high */
   81094:	2016      	movs	r0, #22
   81096:	2101      	movs	r1, #1
   81098:	4b08      	ldr	r3, [pc, #32]	; (810bc <test_digitalDuePin22IsSet+0x34>)
   8109a:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(26, *p_PIOB_ODSR);	/* Check the status bit that PB26 on port B is set */
   8109c:	4b08      	ldr	r3, [pc, #32]	; (810c0 <test_digitalDuePin22IsSet+0x38>)
   8109e:	681a      	ldr	r2, [r3, #0]
   810a0:	2359      	movs	r3, #89	; 0x59
   810a2:	9300      	str	r3, [sp, #0]
   810a4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   810a8:	f04f 31ff 	mov.w	r1, #4294967295
   810ac:	2300      	movs	r3, #0
   810ae:	4c05      	ldr	r4, [pc, #20]	; (810c4 <test_digitalDuePin22IsSet+0x3c>)
   810b0:	47a0      	blx	r4
}
   810b2:	b002      	add	sp, #8
   810b4:	bd10      	pop	{r4, pc}
   810b6:	bf00      	nop
   810b8:	00080215 	.word	0x00080215
   810bc:	00080219 	.word	0x00080219
   810c0:	400e1038 	.word	0x400e1038
   810c4:	00080b3d 	.word	0x00080b3d

000810c8 <test_digitalDuePin22IsCleared>:
void test_digitalDuePin22IsCleared(void)
{
   810c8:	b510      	push	{r4, lr}
   810ca:	b082      	sub	sp, #8
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output, proven to work in previous test */
   810cc:	2016      	movs	r0, #22
   810ce:	2102      	movs	r1, #2
   810d0:	4b0a      	ldr	r3, [pc, #40]	; (810fc <test_digitalDuePin22IsCleared+0x34>)
   810d2:	4798      	blx	r3
	digitalWrite(22, HIGH); /* set pin 22 on the Due to high, proven to work in previous test */
   810d4:	2016      	movs	r0, #22
   810d6:	2101      	movs	r1, #1
   810d8:	4c09      	ldr	r4, [pc, #36]	; (81100 <test_digitalDuePin22IsCleared+0x38>)
   810da:	47a0      	blx	r4
	
	digitalWrite(22, LOW);	/* set pin 22 on the Due to low */
   810dc:	2016      	movs	r0, #22
   810de:	2100      	movs	r1, #0
   810e0:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(26, *p_PIOB_ODSR);	/* Check the status bit that PB26 on port B is cleared */
   810e2:	4b08      	ldr	r3, [pc, #32]	; (81104 <test_digitalDuePin22IsCleared+0x3c>)
   810e4:	681a      	ldr	r2, [r3, #0]
   810e6:	2361      	movs	r3, #97	; 0x61
   810e8:	9300      	str	r3, [sp, #0]
   810ea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   810ee:	2100      	movs	r1, #0
   810f0:	460b      	mov	r3, r1
   810f2:	4c05      	ldr	r4, [pc, #20]	; (81108 <test_digitalDuePin22IsCleared+0x40>)
   810f4:	47a0      	blx	r4
}
   810f6:	b002      	add	sp, #8
   810f8:	bd10      	pop	{r4, pc}
   810fa:	bf00      	nop
   810fc:	00080215 	.word	0x00080215
   81100:	00080219 	.word	0x00080219
   81104:	400e1038 	.word	0x400e1038
   81108:	00080b3d 	.word	0x00080b3d

0008110c <test_digitalDuePin13And22InitialiseProperly>:

void test_digitalDuePin13And22InitialiseProperly(void)
{
   8110c:	b530      	push	{r4, r5, lr}
   8110e:	b083      	sub	sp, #12
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output */
   81110:	200d      	movs	r0, #13
   81112:	2102      	movs	r1, #2
   81114:	4c0d      	ldr	r4, [pc, #52]	; (8114c <test_digitalDuePin13And22InitialiseProperly+0x40>)
   81116:	47a0      	blx	r4
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output */
   81118:	2016      	movs	r0, #22
   8111a:	2102      	movs	r1, #2
   8111c:	47a0      	blx	r4
	
	TEST_ASSERT_BIT_HIGH(26, *p_PIOB_OSR);	/* Check the status bit that PB26 on port B is properly initialised */
   8111e:	4d0c      	ldr	r5, [pc, #48]	; (81150 <test_digitalDuePin13And22InitialiseProperly+0x44>)
   81120:	682a      	ldr	r2, [r5, #0]
   81122:	2369      	movs	r3, #105	; 0x69
   81124:	9300      	str	r3, [sp, #0]
   81126:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   8112a:	f04f 31ff 	mov.w	r1, #4294967295
   8112e:	2300      	movs	r3, #0
   81130:	4c08      	ldr	r4, [pc, #32]	; (81154 <test_digitalDuePin13And22InitialiseProperly+0x48>)
   81132:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH(27, *p_PIOB_OSR);	/* Check the status bit that PB27 on port B is properly initialised */
   81134:	682a      	ldr	r2, [r5, #0]
   81136:	236a      	movs	r3, #106	; 0x6a
   81138:	9300      	str	r3, [sp, #0]
   8113a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   8113e:	f04f 31ff 	mov.w	r1, #4294967295
   81142:	2300      	movs	r3, #0
   81144:	47a0      	blx	r4
}
   81146:	b003      	add	sp, #12
   81148:	bd30      	pop	{r4, r5, pc}
   8114a:	bf00      	nop
   8114c:	00080215 	.word	0x00080215
   81150:	400e1018 	.word	0x400e1018
   81154:	00080b3d 	.word	0x00080b3d

00081158 <test_digitalDuePin13And22IsSet>:

void test_digitalDuePin13And22IsSet(void)
{		
   81158:	b530      	push	{r4, r5, lr}
   8115a:	b083      	sub	sp, #12
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output */
   8115c:	200d      	movs	r0, #13
   8115e:	2102      	movs	r1, #2
   81160:	4c10      	ldr	r4, [pc, #64]	; (811a4 <test_digitalDuePin13And22IsSet+0x4c>)
   81162:	47a0      	blx	r4
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output */
   81164:	2016      	movs	r0, #22
   81166:	2102      	movs	r1, #2
   81168:	47a0      	blx	r4
		
	digitalWrite(13, HIGH); /* set pin 13 on the Due to high, lighting up the amber diode */
   8116a:	200d      	movs	r0, #13
   8116c:	2101      	movs	r1, #1
   8116e:	4c0e      	ldr	r4, [pc, #56]	; (811a8 <test_digitalDuePin13And22IsSet+0x50>)
   81170:	47a0      	blx	r4
	digitalWrite(22, HIGH); /* set pin 22 on the Due to high */
   81172:	2016      	movs	r0, #22
   81174:	2101      	movs	r1, #1
   81176:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH(26, *p_PIOB_ODSR);	/* Check the status bit that PB26 on port B is set */
   81178:	4d0c      	ldr	r5, [pc, #48]	; (811ac <test_digitalDuePin13And22IsSet+0x54>)
   8117a:	682a      	ldr	r2, [r5, #0]
   8117c:	2374      	movs	r3, #116	; 0x74
   8117e:	9300      	str	r3, [sp, #0]
   81180:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   81184:	f04f 31ff 	mov.w	r1, #4294967295
   81188:	2300      	movs	r3, #0
   8118a:	4c09      	ldr	r4, [pc, #36]	; (811b0 <test_digitalDuePin13And22IsSet+0x58>)
   8118c:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH(27, *p_PIOB_ODSR);	/* Check the status bit that PB27 on port B is set */
   8118e:	682a      	ldr	r2, [r5, #0]
   81190:	2375      	movs	r3, #117	; 0x75
   81192:	9300      	str	r3, [sp, #0]
   81194:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   81198:	f04f 31ff 	mov.w	r1, #4294967295
   8119c:	2300      	movs	r3, #0
   8119e:	47a0      	blx	r4
}
   811a0:	b003      	add	sp, #12
   811a2:	bd30      	pop	{r4, r5, pc}
   811a4:	00080215 	.word	0x00080215
   811a8:	00080219 	.word	0x00080219
   811ac:	400e1038 	.word	0x400e1038
   811b0:	00080b3d 	.word	0x00080b3d

000811b4 <test_digitalDuePin13isSetAnd22IsCleared>:

void test_digitalDuePin13isSetAnd22IsCleared(void)
{
   811b4:	b570      	push	{r4, r5, r6, lr}
   811b6:	b082      	sub	sp, #8
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output */
   811b8:	200d      	movs	r0, #13
   811ba:	2102      	movs	r1, #2
   811bc:	4c1b      	ldr	r4, [pc, #108]	; (8122c <test_digitalDuePin13isSetAnd22IsCleared+0x78>)
   811be:	47a0      	blx	r4
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output */
   811c0:	2016      	movs	r0, #22
   811c2:	2102      	movs	r1, #2
   811c4:	47a0      	blx	r4

	digitalWrite(13, LOW); /* set pin 13 on the Due to low */
   811c6:	200d      	movs	r0, #13
   811c8:	2100      	movs	r1, #0
   811ca:	4e19      	ldr	r6, [pc, #100]	; (81230 <test_digitalDuePin13isSetAnd22IsCleared+0x7c>)
   811cc:	47b0      	blx	r6
	digitalWrite(22, HIGH); /* set pin 22 on the Due to high */
   811ce:	2016      	movs	r0, #22
   811d0:	2101      	movs	r1, #1
   811d2:	47b0      	blx	r6
	TEST_ASSERT_BIT_LOW(27, *p_PIOB_ODSR);	/* Check the status bit that PB27 on port B is cleared */
   811d4:	4d17      	ldr	r5, [pc, #92]	; (81234 <test_digitalDuePin13isSetAnd22IsCleared+0x80>)
   811d6:	682a      	ldr	r2, [r5, #0]
   811d8:	237f      	movs	r3, #127	; 0x7f
   811da:	9300      	str	r3, [sp, #0]
   811dc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   811e0:	2100      	movs	r1, #0
   811e2:	460b      	mov	r3, r1
   811e4:	4c14      	ldr	r4, [pc, #80]	; (81238 <test_digitalDuePin13isSetAnd22IsCleared+0x84>)
   811e6:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH(26, *p_PIOB_ODSR);	/* Check the status bit that PB26 on port B is set */
   811e8:	682a      	ldr	r2, [r5, #0]
   811ea:	2380      	movs	r3, #128	; 0x80
   811ec:	9300      	str	r3, [sp, #0]
   811ee:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   811f2:	f04f 31ff 	mov.w	r1, #4294967295
   811f6:	2300      	movs	r3, #0
   811f8:	47a0      	blx	r4
			
	digitalWrite(13, HIGH); /* set pin 13 on the Due to high, lighting up the amber diode */
   811fa:	200d      	movs	r0, #13
   811fc:	2101      	movs	r1, #1
   811fe:	47b0      	blx	r6
	digitalWrite(22, LOW); /* set pin 22 on the Due to low */
   81200:	2016      	movs	r0, #22
   81202:	2100      	movs	r1, #0
   81204:	47b0      	blx	r6
	TEST_ASSERT_BIT_HIGH(27, *p_PIOB_ODSR);	/* Check the status bit that PB27 on port B is set */	
   81206:	682a      	ldr	r2, [r5, #0]
   81208:	2384      	movs	r3, #132	; 0x84
   8120a:	9300      	str	r3, [sp, #0]
   8120c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   81210:	f04f 31ff 	mov.w	r1, #4294967295
   81214:	2300      	movs	r3, #0
   81216:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(26, *p_PIOB_ODSR);	/* Check the status bit that PB26 on port B is cleared */
   81218:	682a      	ldr	r2, [r5, #0]
   8121a:	2385      	movs	r3, #133	; 0x85
   8121c:	9300      	str	r3, [sp, #0]
   8121e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   81222:	2100      	movs	r1, #0
   81224:	460b      	mov	r3, r1
   81226:	47a0      	blx	r4
}
   81228:	b002      	add	sp, #8
   8122a:	bd70      	pop	{r4, r5, r6, pc}
   8122c:	00080215 	.word	0x00080215
   81230:	00080219 	.word	0x00080219
   81234:	400e1038 	.word	0x400e1038
   81238:	00080b3d 	.word	0x00080b3d

0008123c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8123c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8123e:	b083      	sub	sp, #12
   81240:	4604      	mov	r4, r0
   81242:	460d      	mov	r5, r1
	uint32_t val = 0;
   81244:	2300      	movs	r3, #0
   81246:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81248:	4b1f      	ldr	r3, [pc, #124]	; (812c8 <usart_serial_getchar+0x8c>)
   8124a:	4298      	cmp	r0, r3
   8124c:	d107      	bne.n	8125e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8124e:	461f      	mov	r7, r3
   81250:	4e1e      	ldr	r6, [pc, #120]	; (812cc <usart_serial_getchar+0x90>)
   81252:	4638      	mov	r0, r7
   81254:	4629      	mov	r1, r5
   81256:	47b0      	blx	r6
   81258:	2800      	cmp	r0, #0
   8125a:	d1fa      	bne.n	81252 <usart_serial_getchar+0x16>
   8125c:	e019      	b.n	81292 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8125e:	4b1c      	ldr	r3, [pc, #112]	; (812d0 <usart_serial_getchar+0x94>)
   81260:	4298      	cmp	r0, r3
   81262:	d109      	bne.n	81278 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   81264:	461f      	mov	r7, r3
   81266:	4e1b      	ldr	r6, [pc, #108]	; (812d4 <usart_serial_getchar+0x98>)
   81268:	4638      	mov	r0, r7
   8126a:	a901      	add	r1, sp, #4
   8126c:	47b0      	blx	r6
   8126e:	2800      	cmp	r0, #0
   81270:	d1fa      	bne.n	81268 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   81272:	9b01      	ldr	r3, [sp, #4]
   81274:	702b      	strb	r3, [r5, #0]
   81276:	e019      	b.n	812ac <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81278:	4b17      	ldr	r3, [pc, #92]	; (812d8 <usart_serial_getchar+0x9c>)
   8127a:	4298      	cmp	r0, r3
   8127c:	d109      	bne.n	81292 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8127e:	461e      	mov	r6, r3
   81280:	4c14      	ldr	r4, [pc, #80]	; (812d4 <usart_serial_getchar+0x98>)
   81282:	4630      	mov	r0, r6
   81284:	a901      	add	r1, sp, #4
   81286:	47a0      	blx	r4
   81288:	2800      	cmp	r0, #0
   8128a:	d1fa      	bne.n	81282 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   8128c:	9b01      	ldr	r3, [sp, #4]
   8128e:	702b      	strb	r3, [r5, #0]
   81290:	e018      	b.n	812c4 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81292:	4b12      	ldr	r3, [pc, #72]	; (812dc <usart_serial_getchar+0xa0>)
   81294:	429c      	cmp	r4, r3
   81296:	d109      	bne.n	812ac <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   81298:	461e      	mov	r6, r3
   8129a:	4c0e      	ldr	r4, [pc, #56]	; (812d4 <usart_serial_getchar+0x98>)
   8129c:	4630      	mov	r0, r6
   8129e:	a901      	add	r1, sp, #4
   812a0:	47a0      	blx	r4
   812a2:	2800      	cmp	r0, #0
   812a4:	d1fa      	bne.n	8129c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   812a6:	9b01      	ldr	r3, [sp, #4]
   812a8:	702b      	strb	r3, [r5, #0]
   812aa:	e00b      	b.n	812c4 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   812ac:	4b0c      	ldr	r3, [pc, #48]	; (812e0 <usart_serial_getchar+0xa4>)
   812ae:	429c      	cmp	r4, r3
   812b0:	d108      	bne.n	812c4 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   812b2:	461e      	mov	r6, r3
   812b4:	4c07      	ldr	r4, [pc, #28]	; (812d4 <usart_serial_getchar+0x98>)
   812b6:	4630      	mov	r0, r6
   812b8:	a901      	add	r1, sp, #4
   812ba:	47a0      	blx	r4
   812bc:	2800      	cmp	r0, #0
   812be:	d1fa      	bne.n	812b6 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   812c0:	9b01      	ldr	r3, [sp, #4]
   812c2:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   812c4:	b003      	add	sp, #12
   812c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   812c8:	400e0800 	.word	0x400e0800
   812cc:	00080f51 	.word	0x00080f51
   812d0:	40098000 	.word	0x40098000
   812d4:	0008019d 	.word	0x0008019d
   812d8:	4009c000 	.word	0x4009c000
   812dc:	400a0000 	.word	0x400a0000
   812e0:	400a4000 	.word	0x400a4000

000812e4 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   812e4:	b570      	push	{r4, r5, r6, lr}
   812e6:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   812e8:	4b21      	ldr	r3, [pc, #132]	; (81370 <usart_serial_putchar+0x8c>)
   812ea:	4298      	cmp	r0, r3
   812ec:	d107      	bne.n	812fe <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   812ee:	461e      	mov	r6, r3
   812f0:	4d20      	ldr	r5, [pc, #128]	; (81374 <usart_serial_putchar+0x90>)
   812f2:	4630      	mov	r0, r6
   812f4:	4621      	mov	r1, r4
   812f6:	47a8      	blx	r5
   812f8:	2800      	cmp	r0, #0
   812fa:	d1fa      	bne.n	812f2 <usart_serial_putchar+0xe>
   812fc:	e02b      	b.n	81356 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   812fe:	4b1e      	ldr	r3, [pc, #120]	; (81378 <usart_serial_putchar+0x94>)
   81300:	4298      	cmp	r0, r3
   81302:	d107      	bne.n	81314 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   81304:	461e      	mov	r6, r3
   81306:	4d1d      	ldr	r5, [pc, #116]	; (8137c <usart_serial_putchar+0x98>)
   81308:	4630      	mov	r0, r6
   8130a:	4621      	mov	r1, r4
   8130c:	47a8      	blx	r5
   8130e:	2800      	cmp	r0, #0
   81310:	d1fa      	bne.n	81308 <usart_serial_putchar+0x24>
   81312:	e022      	b.n	8135a <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81314:	4b1a      	ldr	r3, [pc, #104]	; (81380 <usart_serial_putchar+0x9c>)
   81316:	4298      	cmp	r0, r3
   81318:	d107      	bne.n	8132a <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8131a:	461e      	mov	r6, r3
   8131c:	4d17      	ldr	r5, [pc, #92]	; (8137c <usart_serial_putchar+0x98>)
   8131e:	4630      	mov	r0, r6
   81320:	4621      	mov	r1, r4
   81322:	47a8      	blx	r5
   81324:	2800      	cmp	r0, #0
   81326:	d1fa      	bne.n	8131e <usart_serial_putchar+0x3a>
   81328:	e019      	b.n	8135e <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8132a:	4b16      	ldr	r3, [pc, #88]	; (81384 <usart_serial_putchar+0xa0>)
   8132c:	4298      	cmp	r0, r3
   8132e:	d107      	bne.n	81340 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   81330:	461e      	mov	r6, r3
   81332:	4d12      	ldr	r5, [pc, #72]	; (8137c <usart_serial_putchar+0x98>)
   81334:	4630      	mov	r0, r6
   81336:	4621      	mov	r1, r4
   81338:	47a8      	blx	r5
   8133a:	2800      	cmp	r0, #0
   8133c:	d1fa      	bne.n	81334 <usart_serial_putchar+0x50>
   8133e:	e010      	b.n	81362 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81340:	4b11      	ldr	r3, [pc, #68]	; (81388 <usart_serial_putchar+0xa4>)
   81342:	4298      	cmp	r0, r3
   81344:	d10f      	bne.n	81366 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   81346:	461e      	mov	r6, r3
   81348:	4d0c      	ldr	r5, [pc, #48]	; (8137c <usart_serial_putchar+0x98>)
   8134a:	4630      	mov	r0, r6
   8134c:	4621      	mov	r1, r4
   8134e:	47a8      	blx	r5
   81350:	2800      	cmp	r0, #0
   81352:	d1fa      	bne.n	8134a <usart_serial_putchar+0x66>
   81354:	e009      	b.n	8136a <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   81356:	2001      	movs	r0, #1
   81358:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8135a:	2001      	movs	r0, #1
   8135c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8135e:	2001      	movs	r0, #1
   81360:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81362:	2001      	movs	r0, #1
   81364:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   81366:	2000      	movs	r0, #0
   81368:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8136a:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   8136c:	bd70      	pop	{r4, r5, r6, pc}
   8136e:	bf00      	nop
   81370:	400e0800 	.word	0x400e0800
   81374:	00080f41 	.word	0x00080f41
   81378:	40098000 	.word	0x40098000
   8137c:	00080189 	.word	0x00080189
   81380:	4009c000 	.word	0x4009c000
   81384:	400a0000 	.word	0x400a0000
   81388:	400a4000 	.word	0x400a4000

0008138c <main>:
	/* printf("Console ready\n"); */
}


int main(void)
{
   8138c:	b530      	push	{r4, r5, lr}
   8138e:	b085      	sub	sp, #20
	/* Insert system clock initialization code here (sysclk_init()). */
	 sysclk_init();
   81390:	4b2a      	ldr	r3, [pc, #168]	; (8143c <main+0xb0>)
   81392:	4798      	blx	r3
	 board_init();
   81394:	4b2a      	ldr	r3, [pc, #168]	; (81440 <main+0xb4>)
   81396:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81398:	2008      	movs	r0, #8
   8139a:	4d2a      	ldr	r5, [pc, #168]	; (81444 <main+0xb8>)
   8139c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8139e:	4c2a      	ldr	r4, [pc, #168]	; (81448 <main+0xbc>)
   813a0:	4b2a      	ldr	r3, [pc, #168]	; (8144c <main+0xc0>)
   813a2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   813a4:	4a2a      	ldr	r2, [pc, #168]	; (81450 <main+0xc4>)
   813a6:	4b2b      	ldr	r3, [pc, #172]	; (81454 <main+0xc8>)
   813a8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   813aa:	4a2b      	ldr	r2, [pc, #172]	; (81458 <main+0xcc>)
   813ac:	4b2b      	ldr	r3, [pc, #172]	; (8145c <main+0xd0>)
   813ae:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   813b0:	4b2b      	ldr	r3, [pc, #172]	; (81460 <main+0xd4>)
   813b2:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   813b4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   813b8:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   813ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
   813be:	9303      	str	r3, [sp, #12]
   813c0:	2008      	movs	r0, #8
   813c2:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   813c4:	4620      	mov	r0, r4
   813c6:	a901      	add	r1, sp, #4
   813c8:	4b26      	ldr	r3, [pc, #152]	; (81464 <main+0xd8>)
   813ca:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   813cc:	4d26      	ldr	r5, [pc, #152]	; (81468 <main+0xdc>)
   813ce:	682b      	ldr	r3, [r5, #0]
   813d0:	6898      	ldr	r0, [r3, #8]
   813d2:	2100      	movs	r1, #0
   813d4:	4c25      	ldr	r4, [pc, #148]	; (8146c <main+0xe0>)
   813d6:	47a0      	blx	r4
	setbuf(stdin, NULL);
   813d8:	682b      	ldr	r3, [r5, #0]
   813da:	6858      	ldr	r0, [r3, #4]
   813dc:	2100      	movs	r1, #0
   813de:	47a0      	blx	r4

	/* Initialize the console UART used from within Atmel Studio*/
	configure_console();
	
	/* From here on the program uses the Unity testing framework */
	UnityBegin("../test/testDigitalIO.c");
   813e0:	4823      	ldr	r0, [pc, #140]	; (81470 <main+0xe4>)
   813e2:	4b24      	ldr	r3, [pc, #144]	; (81474 <main+0xe8>)
   813e4:	4798      	blx	r3
	
	/* Run the tests from the test-file */
	RUN_TEST(test_digitalDuePin13InitialiseProperly, 10);
   813e6:	4824      	ldr	r0, [pc, #144]	; (81478 <main+0xec>)
   813e8:	4924      	ldr	r1, [pc, #144]	; (8147c <main+0xf0>)
   813ea:	220a      	movs	r2, #10
   813ec:	4c24      	ldr	r4, [pc, #144]	; (81480 <main+0xf4>)
   813ee:	47a0      	blx	r4
	
	/* Uncomment the rest of the tests, one at a time, when you have written or modified code so that you pass the latest test */
	RUN_TEST(test_digitalDuePin13IsSet, 15);
   813f0:	4824      	ldr	r0, [pc, #144]	; (81484 <main+0xf8>)
   813f2:	4925      	ldr	r1, [pc, #148]	; (81488 <main+0xfc>)
   813f4:	220f      	movs	r2, #15
   813f6:	47a0      	blx	r4
	RUN_TEST(test_digitalDuePin13IsCleared, 18);
   813f8:	4824      	ldr	r0, [pc, #144]	; (8148c <main+0x100>)
   813fa:	4925      	ldr	r1, [pc, #148]	; (81490 <main+0x104>)
   813fc:	2212      	movs	r2, #18
   813fe:	47a0      	blx	r4

	RUN_TEST(test_digitalDuePin22InitialiseProperly, 20);
   81400:	4824      	ldr	r0, [pc, #144]	; (81494 <main+0x108>)
   81402:	4925      	ldr	r1, [pc, #148]	; (81498 <main+0x10c>)
   81404:	2214      	movs	r2, #20
   81406:	47a0      	blx	r4
	RUN_TEST(test_digitalDuePin22IsSet, 25);
   81408:	4824      	ldr	r0, [pc, #144]	; (8149c <main+0x110>)
   8140a:	4925      	ldr	r1, [pc, #148]	; (814a0 <main+0x114>)
   8140c:	2219      	movs	r2, #25
   8140e:	47a0      	blx	r4
	RUN_TEST(test_digitalDuePin22IsCleared, 28);
   81410:	4824      	ldr	r0, [pc, #144]	; (814a4 <main+0x118>)
   81412:	4925      	ldr	r1, [pc, #148]	; (814a8 <main+0x11c>)
   81414:	221c      	movs	r2, #28
   81416:	47a0      	blx	r4

	RUN_TEST(test_digitalDuePin13And22InitialiseProperly, 30);
   81418:	4824      	ldr	r0, [pc, #144]	; (814ac <main+0x120>)
   8141a:	4925      	ldr	r1, [pc, #148]	; (814b0 <main+0x124>)
   8141c:	221e      	movs	r2, #30
   8141e:	47a0      	blx	r4
	RUN_TEST(test_digitalDuePin13And22IsSet, 35);
   81420:	4824      	ldr	r0, [pc, #144]	; (814b4 <main+0x128>)
   81422:	4925      	ldr	r1, [pc, #148]	; (814b8 <main+0x12c>)
   81424:	2223      	movs	r2, #35	; 0x23
   81426:	47a0      	blx	r4
	RUN_TEST(test_digitalDuePin13isSetAnd22IsCleared, 38);
   81428:	4824      	ldr	r0, [pc, #144]	; (814bc <main+0x130>)
   8142a:	4925      	ldr	r1, [pc, #148]	; (814c0 <main+0x134>)
   8142c:	2226      	movs	r2, #38	; 0x26
   8142e:	47a0      	blx	r4

	UnityEnd();
   81430:	4b24      	ldr	r3, [pc, #144]	; (814c4 <main+0x138>)
   81432:	4798      	blx	r3
	
	return 0;
}
   81434:	2000      	movs	r0, #0
   81436:	b005      	add	sp, #20
   81438:	bd30      	pop	{r4, r5, pc}
   8143a:	bf00      	nop
   8143c:	000814c9 	.word	0x000814c9
   81440:	0008152d 	.word	0x0008152d
   81444:	00081955 	.word	0x00081955
   81448:	400e0800 	.word	0x400e0800
   8144c:	20070b5c 	.word	0x20070b5c
   81450:	000812e5 	.word	0x000812e5
   81454:	20070b58 	.word	0x20070b58
   81458:	0008123d 	.word	0x0008123d
   8145c:	20070ad8 	.word	0x20070ad8
   81460:	0501bd00 	.word	0x0501bd00
   81464:	00080f09 	.word	0x00080f09
   81468:	20070560 	.word	0x20070560
   8146c:	00081cb1 	.word	0x00081cb1
   81470:	00082dec 	.word	0x00082dec
   81474:	00080c0d 	.word	0x00080c0d
   81478:	00080f85 	.word	0x00080f85
   8147c:	00082e04 	.word	0x00082e04
   81480:	00080bb5 	.word	0x00080bb5
   81484:	00080fd1 	.word	0x00080fd1
   81488:	00082e2c 	.word	0x00082e2c
   8148c:	00081011 	.word	0x00081011
   81490:	00082e48 	.word	0x00082e48
   81494:	00081055 	.word	0x00081055
   81498:	00082e68 	.word	0x00082e68
   8149c:	00081089 	.word	0x00081089
   814a0:	00082e90 	.word	0x00082e90
   814a4:	000810c9 	.word	0x000810c9
   814a8:	00082eac 	.word	0x00082eac
   814ac:	0008110d 	.word	0x0008110d
   814b0:	00082ecc 	.word	0x00082ecc
   814b4:	00081159 	.word	0x00081159
   814b8:	00082ef8 	.word	0x00082ef8
   814bc:	000811b5 	.word	0x000811b5
   814c0:	00082f18 	.word	0x00082f18
   814c4:	00080c29 	.word	0x00080c29

000814c8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   814c8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   814ca:	480e      	ldr	r0, [pc, #56]	; (81504 <sysclk_init+0x3c>)
   814cc:	4b0e      	ldr	r3, [pc, #56]	; (81508 <sysclk_init+0x40>)
   814ce:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   814d0:	2000      	movs	r0, #0
   814d2:	213e      	movs	r1, #62	; 0x3e
   814d4:	4b0d      	ldr	r3, [pc, #52]	; (8150c <sysclk_init+0x44>)
   814d6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   814d8:	4c0d      	ldr	r4, [pc, #52]	; (81510 <sysclk_init+0x48>)
   814da:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   814dc:	2800      	cmp	r0, #0
   814de:	d0fc      	beq.n	814da <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   814e0:	4b0c      	ldr	r3, [pc, #48]	; (81514 <sysclk_init+0x4c>)
   814e2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   814e4:	4a0c      	ldr	r2, [pc, #48]	; (81518 <sysclk_init+0x50>)
   814e6:	4b0d      	ldr	r3, [pc, #52]	; (8151c <sysclk_init+0x54>)
   814e8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   814ea:	4c0d      	ldr	r4, [pc, #52]	; (81520 <sysclk_init+0x58>)
   814ec:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   814ee:	2800      	cmp	r0, #0
   814f0:	d0fc      	beq.n	814ec <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   814f2:	2010      	movs	r0, #16
   814f4:	4b0b      	ldr	r3, [pc, #44]	; (81524 <sysclk_init+0x5c>)
   814f6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   814f8:	4b0b      	ldr	r3, [pc, #44]	; (81528 <sysclk_init+0x60>)
   814fa:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   814fc:	4801      	ldr	r0, [pc, #4]	; (81504 <sysclk_init+0x3c>)
   814fe:	4b02      	ldr	r3, [pc, #8]	; (81508 <sysclk_init+0x40>)
   81500:	4798      	blx	r3
   81502:	bd10      	pop	{r4, pc}
   81504:	0501bd00 	.word	0x0501bd00
   81508:	200700a5 	.word	0x200700a5
   8150c:	000818d1 	.word	0x000818d1
   81510:	00081925 	.word	0x00081925
   81514:	00081935 	.word	0x00081935
   81518:	200d3f01 	.word	0x200d3f01
   8151c:	400e0600 	.word	0x400e0600
   81520:	00081945 	.word	0x00081945
   81524:	0008186d 	.word	0x0008186d
   81528:	00081a61 	.word	0x00081a61

0008152c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8152c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8152e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81532:	4b16      	ldr	r3, [pc, #88]	; (8158c <board_init+0x60>)
   81534:	605a      	str	r2, [r3, #4]
   81536:	200b      	movs	r0, #11
   81538:	4c15      	ldr	r4, [pc, #84]	; (81590 <board_init+0x64>)
   8153a:	47a0      	blx	r4
   8153c:	200c      	movs	r0, #12
   8153e:	47a0      	blx	r4
   81540:	200d      	movs	r0, #13
   81542:	47a0      	blx	r4
   81544:	200e      	movs	r0, #14
   81546:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81548:	203b      	movs	r0, #59	; 0x3b
   8154a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8154e:	4c11      	ldr	r4, [pc, #68]	; (81594 <board_init+0x68>)
   81550:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81552:	2055      	movs	r0, #85	; 0x55
   81554:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81558:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8155a:	2056      	movs	r0, #86	; 0x56
   8155c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81560:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81562:	2068      	movs	r0, #104	; 0x68
   81564:	490c      	ldr	r1, [pc, #48]	; (81598 <board_init+0x6c>)
   81566:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81568:	205c      	movs	r0, #92	; 0x5c
   8156a:	490c      	ldr	r1, [pc, #48]	; (8159c <board_init+0x70>)
   8156c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8156e:	480c      	ldr	r0, [pc, #48]	; (815a0 <board_init+0x74>)
   81570:	f44f 7140 	mov.w	r1, #768	; 0x300
   81574:	4a0b      	ldr	r2, [pc, #44]	; (815a4 <board_init+0x78>)
   81576:	4b0c      	ldr	r3, [pc, #48]	; (815a8 <board_init+0x7c>)
   81578:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8157a:	202b      	movs	r0, #43	; 0x2b
   8157c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81580:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81582:	202a      	movs	r0, #42	; 0x2a
   81584:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81588:	47a0      	blx	r4
   8158a:	bd10      	pop	{r4, pc}
   8158c:	400e1a50 	.word	0x400e1a50
   81590:	00081955 	.word	0x00081955
   81594:	00081651 	.word	0x00081651
   81598:	28000079 	.word	0x28000079
   8159c:	28000001 	.word	0x28000001
   815a0:	400e0e00 	.word	0x400e0e00
   815a4:	08000001 	.word	0x08000001
   815a8:	00081725 	.word	0x00081725

000815ac <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   815ac:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   815ae:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   815b2:	d016      	beq.n	815e2 <pio_set_peripheral+0x36>
   815b4:	d804      	bhi.n	815c0 <pio_set_peripheral+0x14>
   815b6:	b1c1      	cbz	r1, 815ea <pio_set_peripheral+0x3e>
   815b8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   815bc:	d00a      	beq.n	815d4 <pio_set_peripheral+0x28>
   815be:	e013      	b.n	815e8 <pio_set_peripheral+0x3c>
   815c0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   815c4:	d011      	beq.n	815ea <pio_set_peripheral+0x3e>
   815c6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   815ca:	d00e      	beq.n	815ea <pio_set_peripheral+0x3e>
   815cc:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   815d0:	d10a      	bne.n	815e8 <pio_set_peripheral+0x3c>
   815d2:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   815d4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   815d6:	6f01      	ldr	r1, [r0, #112]	; 0x70
   815d8:	400b      	ands	r3, r1
   815da:	ea23 0302 	bic.w	r3, r3, r2
   815de:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   815e0:	e002      	b.n	815e8 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   815e2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   815e4:	4313      	orrs	r3, r2
   815e6:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   815e8:	6042      	str	r2, [r0, #4]
   815ea:	4770      	bx	lr

000815ec <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   815ec:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   815ee:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   815f2:	bf14      	ite	ne
   815f4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   815f6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   815f8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   815fc:	bf14      	ite	ne
   815fe:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81600:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81602:	f012 0f02 	tst.w	r2, #2
   81606:	d002      	beq.n	8160e <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81608:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8160c:	e004      	b.n	81618 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8160e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81612:	bf18      	it	ne
   81614:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81618:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8161a:	6001      	str	r1, [r0, #0]
   8161c:	4770      	bx	lr
   8161e:	bf00      	nop

00081620 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81620:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81622:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81624:	9c01      	ldr	r4, [sp, #4]
   81626:	b10c      	cbz	r4, 8162c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81628:	6641      	str	r1, [r0, #100]	; 0x64
   8162a:	e000      	b.n	8162e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8162c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8162e:	b10b      	cbz	r3, 81634 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   81630:	6501      	str	r1, [r0, #80]	; 0x50
   81632:	e000      	b.n	81636 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81634:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81636:	b10a      	cbz	r2, 8163c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81638:	6301      	str	r1, [r0, #48]	; 0x30
   8163a:	e000      	b.n	8163e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8163c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8163e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81640:	6001      	str	r1, [r0, #0]
}
   81642:	f85d 4b04 	ldr.w	r4, [sp], #4
   81646:	4770      	bx	lr

00081648 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81648:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8164a:	4770      	bx	lr

0008164c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8164c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8164e:	4770      	bx	lr

00081650 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81650:	b570      	push	{r4, r5, r6, lr}
   81652:	b082      	sub	sp, #8
   81654:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81656:	0944      	lsrs	r4, r0, #5
   81658:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   8165c:	f204 7407 	addw	r4, r4, #1799	; 0x707
   81660:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81662:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   81666:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8166a:	d030      	beq.n	816ce <pio_configure_pin+0x7e>
   8166c:	d806      	bhi.n	8167c <pio_configure_pin+0x2c>
   8166e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   81672:	d00a      	beq.n	8168a <pio_configure_pin+0x3a>
   81674:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81678:	d018      	beq.n	816ac <pio_configure_pin+0x5c>
   8167a:	e049      	b.n	81710 <pio_configure_pin+0xc0>
   8167c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81680:	d030      	beq.n	816e4 <pio_configure_pin+0x94>
   81682:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81686:	d02d      	beq.n	816e4 <pio_configure_pin+0x94>
   81688:	e042      	b.n	81710 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8168a:	f000 001f 	and.w	r0, r0, #31
   8168e:	2401      	movs	r4, #1
   81690:	4084      	lsls	r4, r0
   81692:	4630      	mov	r0, r6
   81694:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81698:	4622      	mov	r2, r4
   8169a:	4b1f      	ldr	r3, [pc, #124]	; (81718 <pio_configure_pin+0xc8>)
   8169c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8169e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   816a2:	bf14      	ite	ne
   816a4:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   816a6:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   816a8:	2001      	movs	r0, #1
   816aa:	e032      	b.n	81712 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   816ac:	f000 001f 	and.w	r0, r0, #31
   816b0:	2401      	movs	r4, #1
   816b2:	4084      	lsls	r4, r0
   816b4:	4630      	mov	r0, r6
   816b6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   816ba:	4622      	mov	r2, r4
   816bc:	4b16      	ldr	r3, [pc, #88]	; (81718 <pio_configure_pin+0xc8>)
   816be:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   816c0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   816c4:	bf14      	ite	ne
   816c6:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   816c8:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   816ca:	2001      	movs	r0, #1
   816cc:	e021      	b.n	81712 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   816ce:	f000 011f 	and.w	r1, r0, #31
   816d2:	2401      	movs	r4, #1
   816d4:	4630      	mov	r0, r6
   816d6:	fa04 f101 	lsl.w	r1, r4, r1
   816da:	462a      	mov	r2, r5
   816dc:	4b0f      	ldr	r3, [pc, #60]	; (8171c <pio_configure_pin+0xcc>)
   816de:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   816e0:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   816e2:	e016      	b.n	81712 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   816e4:	f000 011f 	and.w	r1, r0, #31
   816e8:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   816ea:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   816ee:	ea05 0304 	and.w	r3, r5, r4
   816f2:	9300      	str	r3, [sp, #0]
   816f4:	4630      	mov	r0, r6
   816f6:	fa04 f101 	lsl.w	r1, r4, r1
   816fa:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   816fe:	bf14      	ite	ne
   81700:	2200      	movne	r2, #0
   81702:	2201      	moveq	r2, #1
   81704:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81708:	4d05      	ldr	r5, [pc, #20]	; (81720 <pio_configure_pin+0xd0>)
   8170a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   8170c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8170e:	e000      	b.n	81712 <pio_configure_pin+0xc2>

	default:
		return 0;
   81710:	2000      	movs	r0, #0
	}

	return 1;
}
   81712:	b002      	add	sp, #8
   81714:	bd70      	pop	{r4, r5, r6, pc}
   81716:	bf00      	nop
   81718:	000815ad 	.word	0x000815ad
   8171c:	000815ed 	.word	0x000815ed
   81720:	00081621 	.word	0x00081621

00081724 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81724:	b5f0      	push	{r4, r5, r6, r7, lr}
   81726:	b083      	sub	sp, #12
   81728:	4607      	mov	r7, r0
   8172a:	460e      	mov	r6, r1
   8172c:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8172e:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   81732:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81736:	d026      	beq.n	81786 <pio_configure_pin_group+0x62>
   81738:	d806      	bhi.n	81748 <pio_configure_pin_group+0x24>
   8173a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8173e:	d00a      	beq.n	81756 <pio_configure_pin_group+0x32>
   81740:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81744:	d013      	beq.n	8176e <pio_configure_pin_group+0x4a>
   81746:	e034      	b.n	817b2 <pio_configure_pin_group+0x8e>
   81748:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8174c:	d01f      	beq.n	8178e <pio_configure_pin_group+0x6a>
   8174e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81752:	d01c      	beq.n	8178e <pio_configure_pin_group+0x6a>
   81754:	e02d      	b.n	817b2 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81756:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8175a:	4632      	mov	r2, r6
   8175c:	4b16      	ldr	r3, [pc, #88]	; (817b8 <pio_configure_pin_group+0x94>)
   8175e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81760:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81764:	bf14      	ite	ne
   81766:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81768:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8176a:	2001      	movs	r0, #1
   8176c:	e022      	b.n	817b4 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8176e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81772:	4632      	mov	r2, r6
   81774:	4b10      	ldr	r3, [pc, #64]	; (817b8 <pio_configure_pin_group+0x94>)
   81776:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81778:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8177c:	bf14      	ite	ne
   8177e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81780:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81782:	2001      	movs	r0, #1
   81784:	e016      	b.n	817b4 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81786:	4b0d      	ldr	r3, [pc, #52]	; (817bc <pio_configure_pin_group+0x98>)
   81788:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8178a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8178c:	e012      	b.n	817b4 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8178e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81792:	f005 0301 	and.w	r3, r5, #1
   81796:	9300      	str	r3, [sp, #0]
   81798:	4638      	mov	r0, r7
   8179a:	4631      	mov	r1, r6
   8179c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   817a0:	bf14      	ite	ne
   817a2:	2200      	movne	r2, #0
   817a4:	2201      	moveq	r2, #1
   817a6:	f3c5 0380 	ubfx	r3, r5, #2, #1
   817aa:	4c05      	ldr	r4, [pc, #20]	; (817c0 <pio_configure_pin_group+0x9c>)
   817ac:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   817ae:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   817b0:	e000      	b.n	817b4 <pio_configure_pin_group+0x90>

	default:
		return 0;
   817b2:	2000      	movs	r0, #0
	}

	return 1;
}
   817b4:	b003      	add	sp, #12
   817b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   817b8:	000815ad 	.word	0x000815ad
   817bc:	000815ed 	.word	0x000815ed
   817c0:	00081621 	.word	0x00081621

000817c4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   817c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   817c8:	4604      	mov	r4, r0
   817ca:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   817cc:	4b10      	ldr	r3, [pc, #64]	; (81810 <pio_handler_process+0x4c>)
   817ce:	4798      	blx	r3
   817d0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   817d2:	4620      	mov	r0, r4
   817d4:	4b0f      	ldr	r3, [pc, #60]	; (81814 <pio_handler_process+0x50>)
   817d6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   817d8:	4005      	ands	r5, r0
   817da:	d017      	beq.n	8180c <pio_handler_process+0x48>
   817dc:	4f0e      	ldr	r7, [pc, #56]	; (81818 <pio_handler_process+0x54>)
   817de:	f107 040c 	add.w	r4, r7, #12
   817e2:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   817e4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   817e8:	42b3      	cmp	r3, r6
   817ea:	d10a      	bne.n	81802 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   817ec:	f854 1c08 	ldr.w	r1, [r4, #-8]
   817f0:	4229      	tst	r1, r5
   817f2:	d006      	beq.n	81802 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   817f4:	6823      	ldr	r3, [r4, #0]
   817f6:	4630      	mov	r0, r6
   817f8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   817fa:	f854 3c08 	ldr.w	r3, [r4, #-8]
   817fe:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81802:	42bc      	cmp	r4, r7
   81804:	d002      	beq.n	8180c <pio_handler_process+0x48>
   81806:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81808:	2d00      	cmp	r5, #0
   8180a:	d1eb      	bne.n	817e4 <pio_handler_process+0x20>
   8180c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81810:	00081649 	.word	0x00081649
   81814:	0008164d 	.word	0x0008164d
   81818:	20070a30 	.word	0x20070a30

0008181c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8181c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8181e:	4802      	ldr	r0, [pc, #8]	; (81828 <PIOA_Handler+0xc>)
   81820:	210b      	movs	r1, #11
   81822:	4b02      	ldr	r3, [pc, #8]	; (8182c <PIOA_Handler+0x10>)
   81824:	4798      	blx	r3
   81826:	bd08      	pop	{r3, pc}
   81828:	400e0e00 	.word	0x400e0e00
   8182c:	000817c5 	.word	0x000817c5

00081830 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81830:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81832:	4802      	ldr	r0, [pc, #8]	; (8183c <PIOB_Handler+0xc>)
   81834:	210c      	movs	r1, #12
   81836:	4b02      	ldr	r3, [pc, #8]	; (81840 <PIOB_Handler+0x10>)
   81838:	4798      	blx	r3
   8183a:	bd08      	pop	{r3, pc}
   8183c:	400e1000 	.word	0x400e1000
   81840:	000817c5 	.word	0x000817c5

00081844 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81844:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81846:	4802      	ldr	r0, [pc, #8]	; (81850 <PIOC_Handler+0xc>)
   81848:	210d      	movs	r1, #13
   8184a:	4b02      	ldr	r3, [pc, #8]	; (81854 <PIOC_Handler+0x10>)
   8184c:	4798      	blx	r3
   8184e:	bd08      	pop	{r3, pc}
   81850:	400e1200 	.word	0x400e1200
   81854:	000817c5 	.word	0x000817c5

00081858 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81858:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8185a:	4802      	ldr	r0, [pc, #8]	; (81864 <PIOD_Handler+0xc>)
   8185c:	210e      	movs	r1, #14
   8185e:	4b02      	ldr	r3, [pc, #8]	; (81868 <PIOD_Handler+0x10>)
   81860:	4798      	blx	r3
   81862:	bd08      	pop	{r3, pc}
   81864:	400e1400 	.word	0x400e1400
   81868:	000817c5 	.word	0x000817c5

0008186c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8186c:	4b17      	ldr	r3, [pc, #92]	; (818cc <pmc_switch_mck_to_pllack+0x60>)
   8186e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81870:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   81874:	4310      	orrs	r0, r2
   81876:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8187a:	f013 0f08 	tst.w	r3, #8
   8187e:	d109      	bne.n	81894 <pmc_switch_mck_to_pllack+0x28>
   81880:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81884:	4911      	ldr	r1, [pc, #68]	; (818cc <pmc_switch_mck_to_pllack+0x60>)
   81886:	e001      	b.n	8188c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81888:	3b01      	subs	r3, #1
   8188a:	d019      	beq.n	818c0 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8188c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8188e:	f012 0f08 	tst.w	r2, #8
   81892:	d0f9      	beq.n	81888 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81894:	4b0d      	ldr	r3, [pc, #52]	; (818cc <pmc_switch_mck_to_pllack+0x60>)
   81896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81898:	f022 0203 	bic.w	r2, r2, #3
   8189c:	f042 0202 	orr.w	r2, r2, #2
   818a0:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   818a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
   818a4:	f010 0008 	ands.w	r0, r0, #8
   818a8:	d10c      	bne.n	818c4 <pmc_switch_mck_to_pllack+0x58>
   818aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
   818ae:	4907      	ldr	r1, [pc, #28]	; (818cc <pmc_switch_mck_to_pllack+0x60>)
   818b0:	e001      	b.n	818b6 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   818b2:	3b01      	subs	r3, #1
   818b4:	d008      	beq.n	818c8 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   818b6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   818b8:	f012 0f08 	tst.w	r2, #8
   818bc:	d0f9      	beq.n	818b2 <pmc_switch_mck_to_pllack+0x46>
   818be:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   818c0:	2001      	movs	r0, #1
   818c2:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   818c4:	2000      	movs	r0, #0
   818c6:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   818c8:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   818ca:	4770      	bx	lr
   818cc:	400e0600 	.word	0x400e0600

000818d0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   818d0:	b138      	cbz	r0, 818e2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   818d2:	4911      	ldr	r1, [pc, #68]	; (81918 <pmc_switch_mainck_to_xtal+0x48>)
   818d4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   818d6:	4a11      	ldr	r2, [pc, #68]	; (8191c <pmc_switch_mainck_to_xtal+0x4c>)
   818d8:	401a      	ands	r2, r3
   818da:	4b11      	ldr	r3, [pc, #68]	; (81920 <pmc_switch_mainck_to_xtal+0x50>)
   818dc:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   818de:	620b      	str	r3, [r1, #32]
   818e0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   818e2:	4a0d      	ldr	r2, [pc, #52]	; (81918 <pmc_switch_mainck_to_xtal+0x48>)
   818e4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   818e6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   818ea:	f023 0303 	bic.w	r3, r3, #3
   818ee:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   818f2:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   818f6:	0209      	lsls	r1, r1, #8
   818f8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   818fa:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   818fc:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   818fe:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81900:	f013 0f01 	tst.w	r3, #1
   81904:	d0fb      	beq.n	818fe <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81906:	4a04      	ldr	r2, [pc, #16]	; (81918 <pmc_switch_mainck_to_xtal+0x48>)
   81908:	6a13      	ldr	r3, [r2, #32]
   8190a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8190e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81912:	6213      	str	r3, [r2, #32]
   81914:	4770      	bx	lr
   81916:	bf00      	nop
   81918:	400e0600 	.word	0x400e0600
   8191c:	fec8fffc 	.word	0xfec8fffc
   81920:	01370002 	.word	0x01370002

00081924 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81924:	4b02      	ldr	r3, [pc, #8]	; (81930 <pmc_osc_is_ready_mainck+0xc>)
   81926:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81928:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8192c:	4770      	bx	lr
   8192e:	bf00      	nop
   81930:	400e0600 	.word	0x400e0600

00081934 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81934:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81938:	4b01      	ldr	r3, [pc, #4]	; (81940 <pmc_disable_pllack+0xc>)
   8193a:	629a      	str	r2, [r3, #40]	; 0x28
   8193c:	4770      	bx	lr
   8193e:	bf00      	nop
   81940:	400e0600 	.word	0x400e0600

00081944 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81944:	4b02      	ldr	r3, [pc, #8]	; (81950 <pmc_is_locked_pllack+0xc>)
   81946:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81948:	f000 0002 	and.w	r0, r0, #2
   8194c:	4770      	bx	lr
   8194e:	bf00      	nop
   81950:	400e0600 	.word	0x400e0600

00081954 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81954:	282c      	cmp	r0, #44	; 0x2c
   81956:	d820      	bhi.n	8199a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   81958:	281f      	cmp	r0, #31
   8195a:	d80d      	bhi.n	81978 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8195c:	4b12      	ldr	r3, [pc, #72]	; (819a8 <pmc_enable_periph_clk+0x54>)
   8195e:	699a      	ldr	r2, [r3, #24]
   81960:	2301      	movs	r3, #1
   81962:	4083      	lsls	r3, r0
   81964:	401a      	ands	r2, r3
   81966:	4293      	cmp	r3, r2
   81968:	d019      	beq.n	8199e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8196a:	2301      	movs	r3, #1
   8196c:	fa03 f000 	lsl.w	r0, r3, r0
   81970:	4b0d      	ldr	r3, [pc, #52]	; (819a8 <pmc_enable_periph_clk+0x54>)
   81972:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81974:	2000      	movs	r0, #0
   81976:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81978:	4b0b      	ldr	r3, [pc, #44]	; (819a8 <pmc_enable_periph_clk+0x54>)
   8197a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   8197e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81980:	2301      	movs	r3, #1
   81982:	4083      	lsls	r3, r0
   81984:	401a      	ands	r2, r3
   81986:	4293      	cmp	r3, r2
   81988:	d00b      	beq.n	819a2 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8198a:	2301      	movs	r3, #1
   8198c:	fa03 f000 	lsl.w	r0, r3, r0
   81990:	4b05      	ldr	r3, [pc, #20]	; (819a8 <pmc_enable_periph_clk+0x54>)
   81992:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81996:	2000      	movs	r0, #0
   81998:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8199a:	2001      	movs	r0, #1
   8199c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8199e:	2000      	movs	r0, #0
   819a0:	4770      	bx	lr
   819a2:	2000      	movs	r0, #0
}
   819a4:	4770      	bx	lr
   819a6:	bf00      	nop
   819a8:	400e0600 	.word	0x400e0600

000819ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   819ac:	e7fe      	b.n	819ac <Dummy_Handler>
   819ae:	bf00      	nop

000819b0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   819b0:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   819b2:	4b1e      	ldr	r3, [pc, #120]	; (81a2c <Reset_Handler+0x7c>)
   819b4:	4a1e      	ldr	r2, [pc, #120]	; (81a30 <Reset_Handler+0x80>)
   819b6:	429a      	cmp	r2, r3
   819b8:	d003      	beq.n	819c2 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   819ba:	4b1e      	ldr	r3, [pc, #120]	; (81a34 <Reset_Handler+0x84>)
   819bc:	4a1b      	ldr	r2, [pc, #108]	; (81a2c <Reset_Handler+0x7c>)
   819be:	429a      	cmp	r2, r3
   819c0:	d304      	bcc.n	819cc <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   819c2:	4b1d      	ldr	r3, [pc, #116]	; (81a38 <Reset_Handler+0x88>)
   819c4:	4a1d      	ldr	r2, [pc, #116]	; (81a3c <Reset_Handler+0x8c>)
   819c6:	429a      	cmp	r2, r3
   819c8:	d30f      	bcc.n	819ea <Reset_Handler+0x3a>
   819ca:	e01a      	b.n	81a02 <Reset_Handler+0x52>
   819cc:	4b1c      	ldr	r3, [pc, #112]	; (81a40 <Reset_Handler+0x90>)
   819ce:	4c1d      	ldr	r4, [pc, #116]	; (81a44 <Reset_Handler+0x94>)
   819d0:	1ae4      	subs	r4, r4, r3
   819d2:	f024 0403 	bic.w	r4, r4, #3
   819d6:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   819d8:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   819da:	4814      	ldr	r0, [pc, #80]	; (81a2c <Reset_Handler+0x7c>)
   819dc:	4914      	ldr	r1, [pc, #80]	; (81a30 <Reset_Handler+0x80>)
   819de:	585a      	ldr	r2, [r3, r1]
   819e0:	501a      	str	r2, [r3, r0]
   819e2:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   819e4:	42a3      	cmp	r3, r4
   819e6:	d1fa      	bne.n	819de <Reset_Handler+0x2e>
   819e8:	e7eb      	b.n	819c2 <Reset_Handler+0x12>
   819ea:	4b17      	ldr	r3, [pc, #92]	; (81a48 <Reset_Handler+0x98>)
   819ec:	4917      	ldr	r1, [pc, #92]	; (81a4c <Reset_Handler+0x9c>)
   819ee:	1ac9      	subs	r1, r1, r3
   819f0:	f021 0103 	bic.w	r1, r1, #3
   819f4:	1d1a      	adds	r2, r3, #4
   819f6:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   819f8:	2200      	movs	r2, #0
   819fa:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   819fe:	428b      	cmp	r3, r1
   81a00:	d1fb      	bne.n	819fa <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81a02:	4a13      	ldr	r2, [pc, #76]	; (81a50 <Reset_Handler+0xa0>)
   81a04:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81a08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81a0c:	4911      	ldr	r1, [pc, #68]	; (81a54 <Reset_Handler+0xa4>)
   81a0e:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81a10:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   81a14:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81a18:	d203      	bcs.n	81a22 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81a1a:	688a      	ldr	r2, [r1, #8]
   81a1c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81a20:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81a22:	4b0d      	ldr	r3, [pc, #52]	; (81a58 <Reset_Handler+0xa8>)
   81a24:	4798      	blx	r3

	/* Branch to main function */
	main();
   81a26:	4b0d      	ldr	r3, [pc, #52]	; (81a5c <Reset_Handler+0xac>)
   81a28:	4798      	blx	r3
   81a2a:	e7fe      	b.n	81a2a <Reset_Handler+0x7a>
   81a2c:	20070000 	.word	0x20070000
   81a30:	00082f6c 	.word	0x00082f6c
   81a34:	20070974 	.word	0x20070974
   81a38:	20070b64 	.word	0x20070b64
   81a3c:	20070974 	.word	0x20070974
   81a40:	20070004 	.word	0x20070004
   81a44:	20070977 	.word	0x20070977
   81a48:	20070970 	.word	0x20070970
   81a4c:	20070b5f 	.word	0x20070b5f
   81a50:	00080000 	.word	0x00080000
   81a54:	e000ed00 	.word	0xe000ed00
   81a58:	00081bcd 	.word	0x00081bcd
   81a5c:	0008138d 	.word	0x0008138d

00081a60 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81a60:	4b3e      	ldr	r3, [pc, #248]	; (81b5c <SystemCoreClockUpdate+0xfc>)
   81a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81a64:	f003 0303 	and.w	r3, r3, #3
   81a68:	2b03      	cmp	r3, #3
   81a6a:	d85f      	bhi.n	81b2c <SystemCoreClockUpdate+0xcc>
   81a6c:	e8df f003 	tbb	[pc, r3]
   81a70:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81a74:	4b3a      	ldr	r3, [pc, #232]	; (81b60 <SystemCoreClockUpdate+0x100>)
   81a76:	695b      	ldr	r3, [r3, #20]
   81a78:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81a7c:	bf14      	ite	ne
   81a7e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81a82:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81a86:	4b37      	ldr	r3, [pc, #220]	; (81b64 <SystemCoreClockUpdate+0x104>)
   81a88:	601a      	str	r2, [r3, #0]
   81a8a:	e04f      	b.n	81b2c <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81a8c:	4b33      	ldr	r3, [pc, #204]	; (81b5c <SystemCoreClockUpdate+0xfc>)
   81a8e:	6a1b      	ldr	r3, [r3, #32]
   81a90:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81a94:	d003      	beq.n	81a9e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81a96:	4a34      	ldr	r2, [pc, #208]	; (81b68 <SystemCoreClockUpdate+0x108>)
   81a98:	4b32      	ldr	r3, [pc, #200]	; (81b64 <SystemCoreClockUpdate+0x104>)
   81a9a:	601a      	str	r2, [r3, #0]
   81a9c:	e046      	b.n	81b2c <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81a9e:	4a33      	ldr	r2, [pc, #204]	; (81b6c <SystemCoreClockUpdate+0x10c>)
   81aa0:	4b30      	ldr	r3, [pc, #192]	; (81b64 <SystemCoreClockUpdate+0x104>)
   81aa2:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81aa4:	4b2d      	ldr	r3, [pc, #180]	; (81b5c <SystemCoreClockUpdate+0xfc>)
   81aa6:	6a1b      	ldr	r3, [r3, #32]
   81aa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81aac:	2b10      	cmp	r3, #16
   81aae:	d002      	beq.n	81ab6 <SystemCoreClockUpdate+0x56>
   81ab0:	2b20      	cmp	r3, #32
   81ab2:	d004      	beq.n	81abe <SystemCoreClockUpdate+0x5e>
   81ab4:	e03a      	b.n	81b2c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81ab6:	4a2e      	ldr	r2, [pc, #184]	; (81b70 <SystemCoreClockUpdate+0x110>)
   81ab8:	4b2a      	ldr	r3, [pc, #168]	; (81b64 <SystemCoreClockUpdate+0x104>)
   81aba:	601a      	str	r2, [r3, #0]
				break;
   81abc:	e036      	b.n	81b2c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81abe:	4a2a      	ldr	r2, [pc, #168]	; (81b68 <SystemCoreClockUpdate+0x108>)
   81ac0:	4b28      	ldr	r3, [pc, #160]	; (81b64 <SystemCoreClockUpdate+0x104>)
   81ac2:	601a      	str	r2, [r3, #0]
				break;
   81ac4:	e032      	b.n	81b2c <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81ac6:	4b25      	ldr	r3, [pc, #148]	; (81b5c <SystemCoreClockUpdate+0xfc>)
   81ac8:	6a1b      	ldr	r3, [r3, #32]
   81aca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81ace:	d003      	beq.n	81ad8 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81ad0:	4a25      	ldr	r2, [pc, #148]	; (81b68 <SystemCoreClockUpdate+0x108>)
   81ad2:	4b24      	ldr	r3, [pc, #144]	; (81b64 <SystemCoreClockUpdate+0x104>)
   81ad4:	601a      	str	r2, [r3, #0]
   81ad6:	e012      	b.n	81afe <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81ad8:	4a24      	ldr	r2, [pc, #144]	; (81b6c <SystemCoreClockUpdate+0x10c>)
   81ada:	4b22      	ldr	r3, [pc, #136]	; (81b64 <SystemCoreClockUpdate+0x104>)
   81adc:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81ade:	4b1f      	ldr	r3, [pc, #124]	; (81b5c <SystemCoreClockUpdate+0xfc>)
   81ae0:	6a1b      	ldr	r3, [r3, #32]
   81ae2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81ae6:	2b10      	cmp	r3, #16
   81ae8:	d002      	beq.n	81af0 <SystemCoreClockUpdate+0x90>
   81aea:	2b20      	cmp	r3, #32
   81aec:	d004      	beq.n	81af8 <SystemCoreClockUpdate+0x98>
   81aee:	e006      	b.n	81afe <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81af0:	4a1f      	ldr	r2, [pc, #124]	; (81b70 <SystemCoreClockUpdate+0x110>)
   81af2:	4b1c      	ldr	r3, [pc, #112]	; (81b64 <SystemCoreClockUpdate+0x104>)
   81af4:	601a      	str	r2, [r3, #0]
				break;
   81af6:	e002      	b.n	81afe <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81af8:	4a1b      	ldr	r2, [pc, #108]	; (81b68 <SystemCoreClockUpdate+0x108>)
   81afa:	4b1a      	ldr	r3, [pc, #104]	; (81b64 <SystemCoreClockUpdate+0x104>)
   81afc:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81afe:	4b17      	ldr	r3, [pc, #92]	; (81b5c <SystemCoreClockUpdate+0xfc>)
   81b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81b02:	f003 0303 	and.w	r3, r3, #3
   81b06:	2b02      	cmp	r3, #2
   81b08:	d10d      	bne.n	81b26 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81b0a:	4b14      	ldr	r3, [pc, #80]	; (81b5c <SystemCoreClockUpdate+0xfc>)
   81b0c:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81b0e:	6a99      	ldr	r1, [r3, #40]	; 0x28
   81b10:	4b14      	ldr	r3, [pc, #80]	; (81b64 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81b12:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81b16:	681a      	ldr	r2, [r3, #0]
   81b18:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81b1c:	b2c9      	uxtb	r1, r1
   81b1e:	fbb2 f2f1 	udiv	r2, r2, r1
   81b22:	601a      	str	r2, [r3, #0]
   81b24:	e002      	b.n	81b2c <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81b26:	4a13      	ldr	r2, [pc, #76]	; (81b74 <SystemCoreClockUpdate+0x114>)
   81b28:	4b0e      	ldr	r3, [pc, #56]	; (81b64 <SystemCoreClockUpdate+0x104>)
   81b2a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81b2c:	4b0b      	ldr	r3, [pc, #44]	; (81b5c <SystemCoreClockUpdate+0xfc>)
   81b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81b30:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81b34:	2b70      	cmp	r3, #112	; 0x70
   81b36:	d107      	bne.n	81b48 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81b38:	4b0a      	ldr	r3, [pc, #40]	; (81b64 <SystemCoreClockUpdate+0x104>)
   81b3a:	681a      	ldr	r2, [r3, #0]
   81b3c:	490e      	ldr	r1, [pc, #56]	; (81b78 <SystemCoreClockUpdate+0x118>)
   81b3e:	fba1 0202 	umull	r0, r2, r1, r2
   81b42:	0852      	lsrs	r2, r2, #1
   81b44:	601a      	str	r2, [r3, #0]
   81b46:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81b48:	4b04      	ldr	r3, [pc, #16]	; (81b5c <SystemCoreClockUpdate+0xfc>)
   81b4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   81b4c:	4b05      	ldr	r3, [pc, #20]	; (81b64 <SystemCoreClockUpdate+0x104>)
   81b4e:	f3c1 1102 	ubfx	r1, r1, #4, #3
   81b52:	681a      	ldr	r2, [r3, #0]
   81b54:	40ca      	lsrs	r2, r1
   81b56:	601a      	str	r2, [r3, #0]
   81b58:	4770      	bx	lr
   81b5a:	bf00      	nop
   81b5c:	400e0600 	.word	0x400e0600
   81b60:	400e1a10 	.word	0x400e1a10
   81b64:	20070130 	.word	0x20070130
   81b68:	00b71b00 	.word	0x00b71b00
   81b6c:	003d0900 	.word	0x003d0900
   81b70:	007a1200 	.word	0x007a1200
   81b74:	0e4e1c00 	.word	0x0e4e1c00
   81b78:	aaaaaaab 	.word	0xaaaaaaab

00081b7c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81b7c:	4b09      	ldr	r3, [pc, #36]	; (81ba4 <_sbrk+0x28>)
   81b7e:	681b      	ldr	r3, [r3, #0]
   81b80:	b913      	cbnz	r3, 81b88 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81b82:	4a09      	ldr	r2, [pc, #36]	; (81ba8 <_sbrk+0x2c>)
   81b84:	4b07      	ldr	r3, [pc, #28]	; (81ba4 <_sbrk+0x28>)
   81b86:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81b88:	4b06      	ldr	r3, [pc, #24]	; (81ba4 <_sbrk+0x28>)
   81b8a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81b8c:	181a      	adds	r2, r3, r0
   81b8e:	4907      	ldr	r1, [pc, #28]	; (81bac <_sbrk+0x30>)
   81b90:	4291      	cmp	r1, r2
   81b92:	db04      	blt.n	81b9e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81b94:	4610      	mov	r0, r2
   81b96:	4a03      	ldr	r2, [pc, #12]	; (81ba4 <_sbrk+0x28>)
   81b98:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81b9a:	4618      	mov	r0, r3
   81b9c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   81b9e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   81ba2:	4770      	bx	lr
   81ba4:	20070aa0 	.word	0x20070aa0
   81ba8:	20072b68 	.word	0x20072b68
   81bac:	20087ffc 	.word	0x20087ffc

00081bb0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81bb0:	f04f 30ff 	mov.w	r0, #4294967295
   81bb4:	4770      	bx	lr
   81bb6:	bf00      	nop

00081bb8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81bbc:	604b      	str	r3, [r1, #4]

	return 0;
}
   81bbe:	2000      	movs	r0, #0
   81bc0:	4770      	bx	lr
   81bc2:	bf00      	nop

00081bc4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81bc4:	2001      	movs	r0, #1
   81bc6:	4770      	bx	lr

00081bc8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81bc8:	2000      	movs	r0, #0
   81bca:	4770      	bx	lr

00081bcc <__libc_init_array>:
   81bcc:	b570      	push	{r4, r5, r6, lr}
   81bce:	4e0f      	ldr	r6, [pc, #60]	; (81c0c <__libc_init_array+0x40>)
   81bd0:	4d0f      	ldr	r5, [pc, #60]	; (81c10 <__libc_init_array+0x44>)
   81bd2:	1b76      	subs	r6, r6, r5
   81bd4:	10b6      	asrs	r6, r6, #2
   81bd6:	d007      	beq.n	81be8 <__libc_init_array+0x1c>
   81bd8:	3d04      	subs	r5, #4
   81bda:	2400      	movs	r4, #0
   81bdc:	3401      	adds	r4, #1
   81bde:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81be2:	4798      	blx	r3
   81be4:	42a6      	cmp	r6, r4
   81be6:	d1f9      	bne.n	81bdc <__libc_init_array+0x10>
   81be8:	4e0a      	ldr	r6, [pc, #40]	; (81c14 <__libc_init_array+0x48>)
   81bea:	4d0b      	ldr	r5, [pc, #44]	; (81c18 <__libc_init_array+0x4c>)
   81bec:	f001 f9ac 	bl	82f48 <_init>
   81bf0:	1b76      	subs	r6, r6, r5
   81bf2:	10b6      	asrs	r6, r6, #2
   81bf4:	d008      	beq.n	81c08 <__libc_init_array+0x3c>
   81bf6:	3d04      	subs	r5, #4
   81bf8:	2400      	movs	r4, #0
   81bfa:	3401      	adds	r4, #1
   81bfc:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81c00:	4798      	blx	r3
   81c02:	42a6      	cmp	r6, r4
   81c04:	d1f9      	bne.n	81bfa <__libc_init_array+0x2e>
   81c06:	bd70      	pop	{r4, r5, r6, pc}
   81c08:	bd70      	pop	{r4, r5, r6, pc}
   81c0a:	bf00      	nop
   81c0c:	00082f54 	.word	0x00082f54
   81c10:	00082f54 	.word	0x00082f54
   81c14:	00082f5c 	.word	0x00082f5c
   81c18:	00082f54 	.word	0x00082f54

00081c1c <memset>:
   81c1c:	b4f0      	push	{r4, r5, r6, r7}
   81c1e:	0784      	lsls	r4, r0, #30
   81c20:	d043      	beq.n	81caa <memset+0x8e>
   81c22:	1e54      	subs	r4, r2, #1
   81c24:	2a00      	cmp	r2, #0
   81c26:	d03e      	beq.n	81ca6 <memset+0x8a>
   81c28:	b2cd      	uxtb	r5, r1
   81c2a:	4603      	mov	r3, r0
   81c2c:	e003      	b.n	81c36 <memset+0x1a>
   81c2e:	1e62      	subs	r2, r4, #1
   81c30:	2c00      	cmp	r4, #0
   81c32:	d038      	beq.n	81ca6 <memset+0x8a>
   81c34:	4614      	mov	r4, r2
   81c36:	f803 5b01 	strb.w	r5, [r3], #1
   81c3a:	079a      	lsls	r2, r3, #30
   81c3c:	d1f7      	bne.n	81c2e <memset+0x12>
   81c3e:	2c03      	cmp	r4, #3
   81c40:	d92a      	bls.n	81c98 <memset+0x7c>
   81c42:	b2cd      	uxtb	r5, r1
   81c44:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81c48:	2c0f      	cmp	r4, #15
   81c4a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81c4e:	d915      	bls.n	81c7c <memset+0x60>
   81c50:	f1a4 0710 	sub.w	r7, r4, #16
   81c54:	093f      	lsrs	r7, r7, #4
   81c56:	f103 0610 	add.w	r6, r3, #16
   81c5a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81c5e:	461a      	mov	r2, r3
   81c60:	6015      	str	r5, [r2, #0]
   81c62:	6055      	str	r5, [r2, #4]
   81c64:	6095      	str	r5, [r2, #8]
   81c66:	60d5      	str	r5, [r2, #12]
   81c68:	3210      	adds	r2, #16
   81c6a:	42b2      	cmp	r2, r6
   81c6c:	d1f8      	bne.n	81c60 <memset+0x44>
   81c6e:	f004 040f 	and.w	r4, r4, #15
   81c72:	3701      	adds	r7, #1
   81c74:	2c03      	cmp	r4, #3
   81c76:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   81c7a:	d90d      	bls.n	81c98 <memset+0x7c>
   81c7c:	461e      	mov	r6, r3
   81c7e:	4622      	mov	r2, r4
   81c80:	3a04      	subs	r2, #4
   81c82:	2a03      	cmp	r2, #3
   81c84:	f846 5b04 	str.w	r5, [r6], #4
   81c88:	d8fa      	bhi.n	81c80 <memset+0x64>
   81c8a:	1f22      	subs	r2, r4, #4
   81c8c:	f022 0203 	bic.w	r2, r2, #3
   81c90:	3204      	adds	r2, #4
   81c92:	4413      	add	r3, r2
   81c94:	f004 0403 	and.w	r4, r4, #3
   81c98:	b12c      	cbz	r4, 81ca6 <memset+0x8a>
   81c9a:	b2c9      	uxtb	r1, r1
   81c9c:	441c      	add	r4, r3
   81c9e:	f803 1b01 	strb.w	r1, [r3], #1
   81ca2:	42a3      	cmp	r3, r4
   81ca4:	d1fb      	bne.n	81c9e <memset+0x82>
   81ca6:	bcf0      	pop	{r4, r5, r6, r7}
   81ca8:	4770      	bx	lr
   81caa:	4614      	mov	r4, r2
   81cac:	4603      	mov	r3, r0
   81cae:	e7c6      	b.n	81c3e <memset+0x22>

00081cb0 <setbuf>:
   81cb0:	2900      	cmp	r1, #0
   81cb2:	bf0c      	ite	eq
   81cb4:	2202      	moveq	r2, #2
   81cb6:	2200      	movne	r2, #0
   81cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81cbc:	f000 b80e 	b.w	81cdc <setvbuf>

00081cc0 <setjmp>:
   81cc0:	46ec      	mov	ip, sp
   81cc2:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81cc6:	f04f 0000 	mov.w	r0, #0
   81cca:	4770      	bx	lr

00081ccc <longjmp>:
   81ccc:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81cd0:	46e5      	mov	sp, ip
   81cd2:	0008      	movs	r0, r1
   81cd4:	bf08      	it	eq
   81cd6:	2001      	moveq	r0, #1
   81cd8:	4770      	bx	lr
   81cda:	bf00      	nop

00081cdc <setvbuf>:
   81cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81ce0:	4d3c      	ldr	r5, [pc, #240]	; (81dd4 <setvbuf+0xf8>)
   81ce2:	4604      	mov	r4, r0
   81ce4:	682d      	ldr	r5, [r5, #0]
   81ce6:	4688      	mov	r8, r1
   81ce8:	4616      	mov	r6, r2
   81cea:	461f      	mov	r7, r3
   81cec:	b115      	cbz	r5, 81cf4 <setvbuf+0x18>
   81cee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81cf0:	2b00      	cmp	r3, #0
   81cf2:	d04f      	beq.n	81d94 <setvbuf+0xb8>
   81cf4:	2e02      	cmp	r6, #2
   81cf6:	d830      	bhi.n	81d5a <setvbuf+0x7e>
   81cf8:	2f00      	cmp	r7, #0
   81cfa:	db2e      	blt.n	81d5a <setvbuf+0x7e>
   81cfc:	4628      	mov	r0, r5
   81cfe:	4621      	mov	r1, r4
   81d00:	f000 f9d6 	bl	820b0 <_fflush_r>
   81d04:	89a3      	ldrh	r3, [r4, #12]
   81d06:	2200      	movs	r2, #0
   81d08:	6062      	str	r2, [r4, #4]
   81d0a:	61a2      	str	r2, [r4, #24]
   81d0c:	061a      	lsls	r2, r3, #24
   81d0e:	d428      	bmi.n	81d62 <setvbuf+0x86>
   81d10:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81d14:	b29b      	uxth	r3, r3
   81d16:	2e02      	cmp	r6, #2
   81d18:	81a3      	strh	r3, [r4, #12]
   81d1a:	d02d      	beq.n	81d78 <setvbuf+0x9c>
   81d1c:	f1b8 0f00 	cmp.w	r8, #0
   81d20:	d03c      	beq.n	81d9c <setvbuf+0xc0>
   81d22:	2e01      	cmp	r6, #1
   81d24:	d013      	beq.n	81d4e <setvbuf+0x72>
   81d26:	b29b      	uxth	r3, r3
   81d28:	f003 0008 	and.w	r0, r3, #8
   81d2c:	4a2a      	ldr	r2, [pc, #168]	; (81dd8 <setvbuf+0xfc>)
   81d2e:	b280      	uxth	r0, r0
   81d30:	63ea      	str	r2, [r5, #60]	; 0x3c
   81d32:	f8c4 8000 	str.w	r8, [r4]
   81d36:	f8c4 8010 	str.w	r8, [r4, #16]
   81d3a:	6167      	str	r7, [r4, #20]
   81d3c:	b178      	cbz	r0, 81d5e <setvbuf+0x82>
   81d3e:	f013 0f03 	tst.w	r3, #3
   81d42:	bf18      	it	ne
   81d44:	2700      	movne	r7, #0
   81d46:	60a7      	str	r7, [r4, #8]
   81d48:	2000      	movs	r0, #0
   81d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d4e:	f043 0301 	orr.w	r3, r3, #1
   81d52:	427a      	negs	r2, r7
   81d54:	81a3      	strh	r3, [r4, #12]
   81d56:	61a2      	str	r2, [r4, #24]
   81d58:	e7e5      	b.n	81d26 <setvbuf+0x4a>
   81d5a:	f04f 30ff 	mov.w	r0, #4294967295
   81d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d62:	4628      	mov	r0, r5
   81d64:	6921      	ldr	r1, [r4, #16]
   81d66:	f000 faa3 	bl	822b0 <_free_r>
   81d6a:	89a3      	ldrh	r3, [r4, #12]
   81d6c:	2e02      	cmp	r6, #2
   81d6e:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81d72:	b29b      	uxth	r3, r3
   81d74:	81a3      	strh	r3, [r4, #12]
   81d76:	d1d1      	bne.n	81d1c <setvbuf+0x40>
   81d78:	2000      	movs	r0, #0
   81d7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81d7e:	f043 0302 	orr.w	r3, r3, #2
   81d82:	2500      	movs	r5, #0
   81d84:	2101      	movs	r1, #1
   81d86:	81a3      	strh	r3, [r4, #12]
   81d88:	60a5      	str	r5, [r4, #8]
   81d8a:	6022      	str	r2, [r4, #0]
   81d8c:	6122      	str	r2, [r4, #16]
   81d8e:	6161      	str	r1, [r4, #20]
   81d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d94:	4628      	mov	r0, r5
   81d96:	f000 f9a7 	bl	820e8 <__sinit>
   81d9a:	e7ab      	b.n	81cf4 <setvbuf+0x18>
   81d9c:	2f00      	cmp	r7, #0
   81d9e:	bf08      	it	eq
   81da0:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81da4:	4638      	mov	r0, r7
   81da6:	f000 fbe3 	bl	82570 <malloc>
   81daa:	4680      	mov	r8, r0
   81dac:	b128      	cbz	r0, 81dba <setvbuf+0xde>
   81dae:	89a3      	ldrh	r3, [r4, #12]
   81db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81db4:	b29b      	uxth	r3, r3
   81db6:	81a3      	strh	r3, [r4, #12]
   81db8:	e7b3      	b.n	81d22 <setvbuf+0x46>
   81dba:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81dbe:	f000 fbd7 	bl	82570 <malloc>
   81dc2:	4680      	mov	r8, r0
   81dc4:	b918      	cbnz	r0, 81dce <setvbuf+0xf2>
   81dc6:	89a3      	ldrh	r3, [r4, #12]
   81dc8:	f04f 30ff 	mov.w	r0, #4294967295
   81dcc:	e7d5      	b.n	81d7a <setvbuf+0x9e>
   81dce:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81dd2:	e7ec      	b.n	81dae <setvbuf+0xd2>
   81dd4:	20070560 	.word	0x20070560
   81dd8:	000820dd 	.word	0x000820dd

00081ddc <__swbuf_r>:
   81ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81dde:	460d      	mov	r5, r1
   81de0:	4614      	mov	r4, r2
   81de2:	4607      	mov	r7, r0
   81de4:	b110      	cbz	r0, 81dec <__swbuf_r+0x10>
   81de6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81de8:	2b00      	cmp	r3, #0
   81dea:	d048      	beq.n	81e7e <__swbuf_r+0xa2>
   81dec:	89a2      	ldrh	r2, [r4, #12]
   81dee:	69a0      	ldr	r0, [r4, #24]
   81df0:	b293      	uxth	r3, r2
   81df2:	60a0      	str	r0, [r4, #8]
   81df4:	0718      	lsls	r0, r3, #28
   81df6:	d538      	bpl.n	81e6a <__swbuf_r+0x8e>
   81df8:	6926      	ldr	r6, [r4, #16]
   81dfa:	2e00      	cmp	r6, #0
   81dfc:	d035      	beq.n	81e6a <__swbuf_r+0x8e>
   81dfe:	0499      	lsls	r1, r3, #18
   81e00:	b2ed      	uxtb	r5, r5
   81e02:	d515      	bpl.n	81e30 <__swbuf_r+0x54>
   81e04:	6823      	ldr	r3, [r4, #0]
   81e06:	6962      	ldr	r2, [r4, #20]
   81e08:	1b9e      	subs	r6, r3, r6
   81e0a:	4296      	cmp	r6, r2
   81e0c:	da1c      	bge.n	81e48 <__swbuf_r+0x6c>
   81e0e:	3601      	adds	r6, #1
   81e10:	68a2      	ldr	r2, [r4, #8]
   81e12:	1c59      	adds	r1, r3, #1
   81e14:	3a01      	subs	r2, #1
   81e16:	60a2      	str	r2, [r4, #8]
   81e18:	6021      	str	r1, [r4, #0]
   81e1a:	701d      	strb	r5, [r3, #0]
   81e1c:	6963      	ldr	r3, [r4, #20]
   81e1e:	42b3      	cmp	r3, r6
   81e20:	d01a      	beq.n	81e58 <__swbuf_r+0x7c>
   81e22:	89a3      	ldrh	r3, [r4, #12]
   81e24:	07db      	lsls	r3, r3, #31
   81e26:	d501      	bpl.n	81e2c <__swbuf_r+0x50>
   81e28:	2d0a      	cmp	r5, #10
   81e2a:	d015      	beq.n	81e58 <__swbuf_r+0x7c>
   81e2c:	4628      	mov	r0, r5
   81e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81e30:	6e63      	ldr	r3, [r4, #100]	; 0x64
   81e32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   81e36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81e3a:	6663      	str	r3, [r4, #100]	; 0x64
   81e3c:	6823      	ldr	r3, [r4, #0]
   81e3e:	81a2      	strh	r2, [r4, #12]
   81e40:	6962      	ldr	r2, [r4, #20]
   81e42:	1b9e      	subs	r6, r3, r6
   81e44:	4296      	cmp	r6, r2
   81e46:	dbe2      	blt.n	81e0e <__swbuf_r+0x32>
   81e48:	4638      	mov	r0, r7
   81e4a:	4621      	mov	r1, r4
   81e4c:	f000 f930 	bl	820b0 <_fflush_r>
   81e50:	b940      	cbnz	r0, 81e64 <__swbuf_r+0x88>
   81e52:	6823      	ldr	r3, [r4, #0]
   81e54:	2601      	movs	r6, #1
   81e56:	e7db      	b.n	81e10 <__swbuf_r+0x34>
   81e58:	4638      	mov	r0, r7
   81e5a:	4621      	mov	r1, r4
   81e5c:	f000 f928 	bl	820b0 <_fflush_r>
   81e60:	2800      	cmp	r0, #0
   81e62:	d0e3      	beq.n	81e2c <__swbuf_r+0x50>
   81e64:	f04f 30ff 	mov.w	r0, #4294967295
   81e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81e6a:	4638      	mov	r0, r7
   81e6c:	4621      	mov	r1, r4
   81e6e:	f000 f809 	bl	81e84 <__swsetup_r>
   81e72:	2800      	cmp	r0, #0
   81e74:	d1f6      	bne.n	81e64 <__swbuf_r+0x88>
   81e76:	89a2      	ldrh	r2, [r4, #12]
   81e78:	6926      	ldr	r6, [r4, #16]
   81e7a:	b293      	uxth	r3, r2
   81e7c:	e7bf      	b.n	81dfe <__swbuf_r+0x22>
   81e7e:	f000 f933 	bl	820e8 <__sinit>
   81e82:	e7b3      	b.n	81dec <__swbuf_r+0x10>

00081e84 <__swsetup_r>:
   81e84:	4b2f      	ldr	r3, [pc, #188]	; (81f44 <__swsetup_r+0xc0>)
   81e86:	b570      	push	{r4, r5, r6, lr}
   81e88:	4606      	mov	r6, r0
   81e8a:	6818      	ldr	r0, [r3, #0]
   81e8c:	460c      	mov	r4, r1
   81e8e:	b110      	cbz	r0, 81e96 <__swsetup_r+0x12>
   81e90:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81e92:	2a00      	cmp	r2, #0
   81e94:	d036      	beq.n	81f04 <__swsetup_r+0x80>
   81e96:	89a5      	ldrh	r5, [r4, #12]
   81e98:	b2ab      	uxth	r3, r5
   81e9a:	0719      	lsls	r1, r3, #28
   81e9c:	d50c      	bpl.n	81eb8 <__swsetup_r+0x34>
   81e9e:	6922      	ldr	r2, [r4, #16]
   81ea0:	b1aa      	cbz	r2, 81ece <__swsetup_r+0x4a>
   81ea2:	f013 0101 	ands.w	r1, r3, #1
   81ea6:	d01e      	beq.n	81ee6 <__swsetup_r+0x62>
   81ea8:	6963      	ldr	r3, [r4, #20]
   81eaa:	2100      	movs	r1, #0
   81eac:	425b      	negs	r3, r3
   81eae:	61a3      	str	r3, [r4, #24]
   81eb0:	60a1      	str	r1, [r4, #8]
   81eb2:	b1f2      	cbz	r2, 81ef2 <__swsetup_r+0x6e>
   81eb4:	2000      	movs	r0, #0
   81eb6:	bd70      	pop	{r4, r5, r6, pc}
   81eb8:	06da      	lsls	r2, r3, #27
   81eba:	d53a      	bpl.n	81f32 <__swsetup_r+0xae>
   81ebc:	075b      	lsls	r3, r3, #29
   81ebe:	d424      	bmi.n	81f0a <__swsetup_r+0x86>
   81ec0:	6922      	ldr	r2, [r4, #16]
   81ec2:	f045 0308 	orr.w	r3, r5, #8
   81ec6:	81a3      	strh	r3, [r4, #12]
   81ec8:	b29b      	uxth	r3, r3
   81eca:	2a00      	cmp	r2, #0
   81ecc:	d1e9      	bne.n	81ea2 <__swsetup_r+0x1e>
   81ece:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81ed2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81ed6:	d0e4      	beq.n	81ea2 <__swsetup_r+0x1e>
   81ed8:	4630      	mov	r0, r6
   81eda:	4621      	mov	r1, r4
   81edc:	f000 fad8 	bl	82490 <__smakebuf_r>
   81ee0:	89a3      	ldrh	r3, [r4, #12]
   81ee2:	6922      	ldr	r2, [r4, #16]
   81ee4:	e7dd      	b.n	81ea2 <__swsetup_r+0x1e>
   81ee6:	0798      	lsls	r0, r3, #30
   81ee8:	bf58      	it	pl
   81eea:	6961      	ldrpl	r1, [r4, #20]
   81eec:	60a1      	str	r1, [r4, #8]
   81eee:	2a00      	cmp	r2, #0
   81ef0:	d1e0      	bne.n	81eb4 <__swsetup_r+0x30>
   81ef2:	89a3      	ldrh	r3, [r4, #12]
   81ef4:	061a      	lsls	r2, r3, #24
   81ef6:	d5dd      	bpl.n	81eb4 <__swsetup_r+0x30>
   81ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81efc:	81a3      	strh	r3, [r4, #12]
   81efe:	f04f 30ff 	mov.w	r0, #4294967295
   81f02:	bd70      	pop	{r4, r5, r6, pc}
   81f04:	f000 f8f0 	bl	820e8 <__sinit>
   81f08:	e7c5      	b.n	81e96 <__swsetup_r+0x12>
   81f0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81f0c:	b149      	cbz	r1, 81f22 <__swsetup_r+0x9e>
   81f0e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81f12:	4299      	cmp	r1, r3
   81f14:	d003      	beq.n	81f1e <__swsetup_r+0x9a>
   81f16:	4630      	mov	r0, r6
   81f18:	f000 f9ca 	bl	822b0 <_free_r>
   81f1c:	89a5      	ldrh	r5, [r4, #12]
   81f1e:	2300      	movs	r3, #0
   81f20:	6323      	str	r3, [r4, #48]	; 0x30
   81f22:	6922      	ldr	r2, [r4, #16]
   81f24:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   81f28:	2100      	movs	r1, #0
   81f2a:	b2ad      	uxth	r5, r5
   81f2c:	6022      	str	r2, [r4, #0]
   81f2e:	6061      	str	r1, [r4, #4]
   81f30:	e7c7      	b.n	81ec2 <__swsetup_r+0x3e>
   81f32:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   81f36:	2309      	movs	r3, #9
   81f38:	6033      	str	r3, [r6, #0]
   81f3a:	f04f 30ff 	mov.w	r0, #4294967295
   81f3e:	81a5      	strh	r5, [r4, #12]
   81f40:	bd70      	pop	{r4, r5, r6, pc}
   81f42:	bf00      	nop
   81f44:	20070560 	.word	0x20070560

00081f48 <register_fini>:
   81f48:	4b02      	ldr	r3, [pc, #8]	; (81f54 <register_fini+0xc>)
   81f4a:	b113      	cbz	r3, 81f52 <register_fini+0xa>
   81f4c:	4802      	ldr	r0, [pc, #8]	; (81f58 <register_fini+0x10>)
   81f4e:	f000 b805 	b.w	81f5c <atexit>
   81f52:	4770      	bx	lr
   81f54:	00000000 	.word	0x00000000
   81f58:	000821e5 	.word	0x000821e5

00081f5c <atexit>:
   81f5c:	4601      	mov	r1, r0
   81f5e:	2000      	movs	r0, #0
   81f60:	4602      	mov	r2, r0
   81f62:	4603      	mov	r3, r0
   81f64:	f000 be14 	b.w	82b90 <__register_exitproc>

00081f68 <__sflush_r>:
   81f68:	898b      	ldrh	r3, [r1, #12]
   81f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81f6e:	b29a      	uxth	r2, r3
   81f70:	460d      	mov	r5, r1
   81f72:	0711      	lsls	r1, r2, #28
   81f74:	4680      	mov	r8, r0
   81f76:	d43c      	bmi.n	81ff2 <__sflush_r+0x8a>
   81f78:	686a      	ldr	r2, [r5, #4]
   81f7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81f7e:	2a00      	cmp	r2, #0
   81f80:	81ab      	strh	r3, [r5, #12]
   81f82:	dd59      	ble.n	82038 <__sflush_r+0xd0>
   81f84:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81f86:	2c00      	cmp	r4, #0
   81f88:	d04b      	beq.n	82022 <__sflush_r+0xba>
   81f8a:	b29b      	uxth	r3, r3
   81f8c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81f90:	2100      	movs	r1, #0
   81f92:	b292      	uxth	r2, r2
   81f94:	f8d8 6000 	ldr.w	r6, [r8]
   81f98:	f8c8 1000 	str.w	r1, [r8]
   81f9c:	2a00      	cmp	r2, #0
   81f9e:	d04f      	beq.n	82040 <__sflush_r+0xd8>
   81fa0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81fa2:	075f      	lsls	r7, r3, #29
   81fa4:	d505      	bpl.n	81fb2 <__sflush_r+0x4a>
   81fa6:	6869      	ldr	r1, [r5, #4]
   81fa8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81faa:	1a52      	subs	r2, r2, r1
   81fac:	b10b      	cbz	r3, 81fb2 <__sflush_r+0x4a>
   81fae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81fb0:	1ad2      	subs	r2, r2, r3
   81fb2:	4640      	mov	r0, r8
   81fb4:	69e9      	ldr	r1, [r5, #28]
   81fb6:	2300      	movs	r3, #0
   81fb8:	47a0      	blx	r4
   81fba:	1c44      	adds	r4, r0, #1
   81fbc:	d04a      	beq.n	82054 <__sflush_r+0xec>
   81fbe:	89ab      	ldrh	r3, [r5, #12]
   81fc0:	692a      	ldr	r2, [r5, #16]
   81fc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81fc6:	b29b      	uxth	r3, r3
   81fc8:	2100      	movs	r1, #0
   81fca:	602a      	str	r2, [r5, #0]
   81fcc:	04da      	lsls	r2, r3, #19
   81fce:	81ab      	strh	r3, [r5, #12]
   81fd0:	6069      	str	r1, [r5, #4]
   81fd2:	d44c      	bmi.n	8206e <__sflush_r+0x106>
   81fd4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   81fd6:	f8c8 6000 	str.w	r6, [r8]
   81fda:	b311      	cbz	r1, 82022 <__sflush_r+0xba>
   81fdc:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81fe0:	4299      	cmp	r1, r3
   81fe2:	d002      	beq.n	81fea <__sflush_r+0x82>
   81fe4:	4640      	mov	r0, r8
   81fe6:	f000 f963 	bl	822b0 <_free_r>
   81fea:	2000      	movs	r0, #0
   81fec:	6328      	str	r0, [r5, #48]	; 0x30
   81fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ff2:	692e      	ldr	r6, [r5, #16]
   81ff4:	b1ae      	cbz	r6, 82022 <__sflush_r+0xba>
   81ff6:	0791      	lsls	r1, r2, #30
   81ff8:	682c      	ldr	r4, [r5, #0]
   81ffa:	bf0c      	ite	eq
   81ffc:	696b      	ldreq	r3, [r5, #20]
   81ffe:	2300      	movne	r3, #0
   82000:	602e      	str	r6, [r5, #0]
   82002:	1ba4      	subs	r4, r4, r6
   82004:	60ab      	str	r3, [r5, #8]
   82006:	e00a      	b.n	8201e <__sflush_r+0xb6>
   82008:	4632      	mov	r2, r6
   8200a:	4623      	mov	r3, r4
   8200c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8200e:	4640      	mov	r0, r8
   82010:	69e9      	ldr	r1, [r5, #28]
   82012:	47b8      	blx	r7
   82014:	2800      	cmp	r0, #0
   82016:	ebc0 0404 	rsb	r4, r0, r4
   8201a:	4406      	add	r6, r0
   8201c:	dd04      	ble.n	82028 <__sflush_r+0xc0>
   8201e:	2c00      	cmp	r4, #0
   82020:	dcf2      	bgt.n	82008 <__sflush_r+0xa0>
   82022:	2000      	movs	r0, #0
   82024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82028:	89ab      	ldrh	r3, [r5, #12]
   8202a:	f04f 30ff 	mov.w	r0, #4294967295
   8202e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82032:	81ab      	strh	r3, [r5, #12]
   82034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82038:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8203a:	2a00      	cmp	r2, #0
   8203c:	dca2      	bgt.n	81f84 <__sflush_r+0x1c>
   8203e:	e7f0      	b.n	82022 <__sflush_r+0xba>
   82040:	2301      	movs	r3, #1
   82042:	4640      	mov	r0, r8
   82044:	69e9      	ldr	r1, [r5, #28]
   82046:	47a0      	blx	r4
   82048:	1c43      	adds	r3, r0, #1
   8204a:	4602      	mov	r2, r0
   8204c:	d01e      	beq.n	8208c <__sflush_r+0x124>
   8204e:	89ab      	ldrh	r3, [r5, #12]
   82050:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82052:	e7a6      	b.n	81fa2 <__sflush_r+0x3a>
   82054:	f8d8 3000 	ldr.w	r3, [r8]
   82058:	b95b      	cbnz	r3, 82072 <__sflush_r+0x10a>
   8205a:	89aa      	ldrh	r2, [r5, #12]
   8205c:	6929      	ldr	r1, [r5, #16]
   8205e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82062:	b292      	uxth	r2, r2
   82064:	606b      	str	r3, [r5, #4]
   82066:	04d3      	lsls	r3, r2, #19
   82068:	81aa      	strh	r2, [r5, #12]
   8206a:	6029      	str	r1, [r5, #0]
   8206c:	d5b2      	bpl.n	81fd4 <__sflush_r+0x6c>
   8206e:	6528      	str	r0, [r5, #80]	; 0x50
   82070:	e7b0      	b.n	81fd4 <__sflush_r+0x6c>
   82072:	2b1d      	cmp	r3, #29
   82074:	d001      	beq.n	8207a <__sflush_r+0x112>
   82076:	2b16      	cmp	r3, #22
   82078:	d113      	bne.n	820a2 <__sflush_r+0x13a>
   8207a:	89a9      	ldrh	r1, [r5, #12]
   8207c:	692b      	ldr	r3, [r5, #16]
   8207e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   82082:	2200      	movs	r2, #0
   82084:	81a9      	strh	r1, [r5, #12]
   82086:	602b      	str	r3, [r5, #0]
   82088:	606a      	str	r2, [r5, #4]
   8208a:	e7a3      	b.n	81fd4 <__sflush_r+0x6c>
   8208c:	f8d8 3000 	ldr.w	r3, [r8]
   82090:	2b00      	cmp	r3, #0
   82092:	d0dc      	beq.n	8204e <__sflush_r+0xe6>
   82094:	2b1d      	cmp	r3, #29
   82096:	d001      	beq.n	8209c <__sflush_r+0x134>
   82098:	2b16      	cmp	r3, #22
   8209a:	d1c5      	bne.n	82028 <__sflush_r+0xc0>
   8209c:	f8c8 6000 	str.w	r6, [r8]
   820a0:	e7bf      	b.n	82022 <__sflush_r+0xba>
   820a2:	89ab      	ldrh	r3, [r5, #12]
   820a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   820a8:	81ab      	strh	r3, [r5, #12]
   820aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820ae:	bf00      	nop

000820b0 <_fflush_r>:
   820b0:	b510      	push	{r4, lr}
   820b2:	4604      	mov	r4, r0
   820b4:	b082      	sub	sp, #8
   820b6:	b108      	cbz	r0, 820bc <_fflush_r+0xc>
   820b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   820ba:	b153      	cbz	r3, 820d2 <_fflush_r+0x22>
   820bc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   820c0:	b908      	cbnz	r0, 820c6 <_fflush_r+0x16>
   820c2:	b002      	add	sp, #8
   820c4:	bd10      	pop	{r4, pc}
   820c6:	4620      	mov	r0, r4
   820c8:	b002      	add	sp, #8
   820ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   820ce:	f7ff bf4b 	b.w	81f68 <__sflush_r>
   820d2:	9101      	str	r1, [sp, #4]
   820d4:	f000 f808 	bl	820e8 <__sinit>
   820d8:	9901      	ldr	r1, [sp, #4]
   820da:	e7ef      	b.n	820bc <_fflush_r+0xc>

000820dc <_cleanup_r>:
   820dc:	4901      	ldr	r1, [pc, #4]	; (820e4 <_cleanup_r+0x8>)
   820de:	f000 b9b3 	b.w	82448 <_fwalk>
   820e2:	bf00      	nop
   820e4:	00082cdd 	.word	0x00082cdd

000820e8 <__sinit>:
   820e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   820ec:	6b84      	ldr	r4, [r0, #56]	; 0x38
   820ee:	b083      	sub	sp, #12
   820f0:	4607      	mov	r7, r0
   820f2:	2c00      	cmp	r4, #0
   820f4:	d165      	bne.n	821c2 <__sinit+0xda>
   820f6:	687d      	ldr	r5, [r7, #4]
   820f8:	4833      	ldr	r0, [pc, #204]	; (821c8 <__sinit+0xe0>)
   820fa:	2304      	movs	r3, #4
   820fc:	2103      	movs	r1, #3
   820fe:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82102:	63f8      	str	r0, [r7, #60]	; 0x3c
   82104:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82108:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   8210c:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82110:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82114:	81ab      	strh	r3, [r5, #12]
   82116:	602c      	str	r4, [r5, #0]
   82118:	606c      	str	r4, [r5, #4]
   8211a:	60ac      	str	r4, [r5, #8]
   8211c:	666c      	str	r4, [r5, #100]	; 0x64
   8211e:	81ec      	strh	r4, [r5, #14]
   82120:	612c      	str	r4, [r5, #16]
   82122:	616c      	str	r4, [r5, #20]
   82124:	61ac      	str	r4, [r5, #24]
   82126:	4621      	mov	r1, r4
   82128:	2208      	movs	r2, #8
   8212a:	f7ff fd77 	bl	81c1c <memset>
   8212e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 821cc <__sinit+0xe4>
   82132:	68be      	ldr	r6, [r7, #8]
   82134:	f8df a098 	ldr.w	sl, [pc, #152]	; 821d0 <__sinit+0xe8>
   82138:	f8df 9098 	ldr.w	r9, [pc, #152]	; 821d4 <__sinit+0xec>
   8213c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 821d8 <__sinit+0xf0>
   82140:	2301      	movs	r3, #1
   82142:	2209      	movs	r2, #9
   82144:	61ed      	str	r5, [r5, #28]
   82146:	f8c5 b020 	str.w	fp, [r5, #32]
   8214a:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8214e:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82152:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82156:	4621      	mov	r1, r4
   82158:	81f3      	strh	r3, [r6, #14]
   8215a:	81b2      	strh	r2, [r6, #12]
   8215c:	6034      	str	r4, [r6, #0]
   8215e:	6074      	str	r4, [r6, #4]
   82160:	60b4      	str	r4, [r6, #8]
   82162:	6674      	str	r4, [r6, #100]	; 0x64
   82164:	6134      	str	r4, [r6, #16]
   82166:	6174      	str	r4, [r6, #20]
   82168:	61b4      	str	r4, [r6, #24]
   8216a:	2208      	movs	r2, #8
   8216c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82170:	9301      	str	r3, [sp, #4]
   82172:	f7ff fd53 	bl	81c1c <memset>
   82176:	68fd      	ldr	r5, [r7, #12]
   82178:	2012      	movs	r0, #18
   8217a:	2202      	movs	r2, #2
   8217c:	61f6      	str	r6, [r6, #28]
   8217e:	f8c6 b020 	str.w	fp, [r6, #32]
   82182:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82186:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8218a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   8218e:	4621      	mov	r1, r4
   82190:	81a8      	strh	r0, [r5, #12]
   82192:	81ea      	strh	r2, [r5, #14]
   82194:	602c      	str	r4, [r5, #0]
   82196:	606c      	str	r4, [r5, #4]
   82198:	60ac      	str	r4, [r5, #8]
   8219a:	666c      	str	r4, [r5, #100]	; 0x64
   8219c:	612c      	str	r4, [r5, #16]
   8219e:	616c      	str	r4, [r5, #20]
   821a0:	61ac      	str	r4, [r5, #24]
   821a2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   821a6:	2208      	movs	r2, #8
   821a8:	f7ff fd38 	bl	81c1c <memset>
   821ac:	9b01      	ldr	r3, [sp, #4]
   821ae:	61ed      	str	r5, [r5, #28]
   821b0:	f8c5 b020 	str.w	fp, [r5, #32]
   821b4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   821b8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   821bc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   821c0:	63bb      	str	r3, [r7, #56]	; 0x38
   821c2:	b003      	add	sp, #12
   821c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   821c8:	000820dd 	.word	0x000820dd
   821cc:	00082ae5 	.word	0x00082ae5
   821d0:	00082b09 	.word	0x00082b09
   821d4:	00082b41 	.word	0x00082b41
   821d8:	00082b61 	.word	0x00082b61

000821dc <__sfp_lock_acquire>:
   821dc:	4770      	bx	lr
   821de:	bf00      	nop

000821e0 <__sfp_lock_release>:
   821e0:	4770      	bx	lr
   821e2:	bf00      	nop

000821e4 <__libc_fini_array>:
   821e4:	b538      	push	{r3, r4, r5, lr}
   821e6:	4d09      	ldr	r5, [pc, #36]	; (8220c <__libc_fini_array+0x28>)
   821e8:	4c09      	ldr	r4, [pc, #36]	; (82210 <__libc_fini_array+0x2c>)
   821ea:	1b64      	subs	r4, r4, r5
   821ec:	10a4      	asrs	r4, r4, #2
   821ee:	bf18      	it	ne
   821f0:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   821f4:	d005      	beq.n	82202 <__libc_fini_array+0x1e>
   821f6:	3c01      	subs	r4, #1
   821f8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   821fc:	4798      	blx	r3
   821fe:	2c00      	cmp	r4, #0
   82200:	d1f9      	bne.n	821f6 <__libc_fini_array+0x12>
   82202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82206:	f000 bea9 	b.w	82f5c <_fini>
   8220a:	bf00      	nop
   8220c:	00082f68 	.word	0x00082f68
   82210:	00082f6c 	.word	0x00082f6c

00082214 <_malloc_trim_r>:
   82214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82216:	4d23      	ldr	r5, [pc, #140]	; (822a4 <_malloc_trim_r+0x90>)
   82218:	460f      	mov	r7, r1
   8221a:	4604      	mov	r4, r0
   8221c:	f000 fc4c 	bl	82ab8 <__malloc_lock>
   82220:	68ab      	ldr	r3, [r5, #8]
   82222:	685e      	ldr	r6, [r3, #4]
   82224:	f026 0603 	bic.w	r6, r6, #3
   82228:	1bf1      	subs	r1, r6, r7
   8222a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8222e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82232:	f021 010f 	bic.w	r1, r1, #15
   82236:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8223a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   8223e:	db07      	blt.n	82250 <_malloc_trim_r+0x3c>
   82240:	4620      	mov	r0, r4
   82242:	2100      	movs	r1, #0
   82244:	f000 fc3c 	bl	82ac0 <_sbrk_r>
   82248:	68ab      	ldr	r3, [r5, #8]
   8224a:	4433      	add	r3, r6
   8224c:	4298      	cmp	r0, r3
   8224e:	d004      	beq.n	8225a <_malloc_trim_r+0x46>
   82250:	4620      	mov	r0, r4
   82252:	f000 fc33 	bl	82abc <__malloc_unlock>
   82256:	2000      	movs	r0, #0
   82258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8225a:	4620      	mov	r0, r4
   8225c:	4279      	negs	r1, r7
   8225e:	f000 fc2f 	bl	82ac0 <_sbrk_r>
   82262:	3001      	adds	r0, #1
   82264:	d00d      	beq.n	82282 <_malloc_trim_r+0x6e>
   82266:	4b10      	ldr	r3, [pc, #64]	; (822a8 <_malloc_trim_r+0x94>)
   82268:	68aa      	ldr	r2, [r5, #8]
   8226a:	6819      	ldr	r1, [r3, #0]
   8226c:	1bf6      	subs	r6, r6, r7
   8226e:	f046 0601 	orr.w	r6, r6, #1
   82272:	4620      	mov	r0, r4
   82274:	1bc9      	subs	r1, r1, r7
   82276:	6056      	str	r6, [r2, #4]
   82278:	6019      	str	r1, [r3, #0]
   8227a:	f000 fc1f 	bl	82abc <__malloc_unlock>
   8227e:	2001      	movs	r0, #1
   82280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82282:	4620      	mov	r0, r4
   82284:	2100      	movs	r1, #0
   82286:	f000 fc1b 	bl	82ac0 <_sbrk_r>
   8228a:	68ab      	ldr	r3, [r5, #8]
   8228c:	1ac2      	subs	r2, r0, r3
   8228e:	2a0f      	cmp	r2, #15
   82290:	ddde      	ble.n	82250 <_malloc_trim_r+0x3c>
   82292:	4d06      	ldr	r5, [pc, #24]	; (822ac <_malloc_trim_r+0x98>)
   82294:	4904      	ldr	r1, [pc, #16]	; (822a8 <_malloc_trim_r+0x94>)
   82296:	682d      	ldr	r5, [r5, #0]
   82298:	f042 0201 	orr.w	r2, r2, #1
   8229c:	1b40      	subs	r0, r0, r5
   8229e:	605a      	str	r2, [r3, #4]
   822a0:	6008      	str	r0, [r1, #0]
   822a2:	e7d5      	b.n	82250 <_malloc_trim_r+0x3c>
   822a4:	20070564 	.word	0x20070564
   822a8:	20070ab0 	.word	0x20070ab0
   822ac:	20070970 	.word	0x20070970

000822b0 <_free_r>:
   822b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   822b4:	460d      	mov	r5, r1
   822b6:	4606      	mov	r6, r0
   822b8:	2900      	cmp	r1, #0
   822ba:	d055      	beq.n	82368 <_free_r+0xb8>
   822bc:	f000 fbfc 	bl	82ab8 <__malloc_lock>
   822c0:	f855 1c04 	ldr.w	r1, [r5, #-4]
   822c4:	f8df c170 	ldr.w	ip, [pc, #368]	; 82438 <_free_r+0x188>
   822c8:	f1a5 0408 	sub.w	r4, r5, #8
   822cc:	f021 0301 	bic.w	r3, r1, #1
   822d0:	18e2      	adds	r2, r4, r3
   822d2:	f8dc 0008 	ldr.w	r0, [ip, #8]
   822d6:	6857      	ldr	r7, [r2, #4]
   822d8:	4290      	cmp	r0, r2
   822da:	f027 0703 	bic.w	r7, r7, #3
   822de:	d068      	beq.n	823b2 <_free_r+0x102>
   822e0:	f011 0101 	ands.w	r1, r1, #1
   822e4:	6057      	str	r7, [r2, #4]
   822e6:	d032      	beq.n	8234e <_free_r+0x9e>
   822e8:	2100      	movs	r1, #0
   822ea:	19d0      	adds	r0, r2, r7
   822ec:	6840      	ldr	r0, [r0, #4]
   822ee:	07c0      	lsls	r0, r0, #31
   822f0:	d406      	bmi.n	82300 <_free_r+0x50>
   822f2:	443b      	add	r3, r7
   822f4:	6890      	ldr	r0, [r2, #8]
   822f6:	2900      	cmp	r1, #0
   822f8:	d04d      	beq.n	82396 <_free_r+0xe6>
   822fa:	68d2      	ldr	r2, [r2, #12]
   822fc:	60c2      	str	r2, [r0, #12]
   822fe:	6090      	str	r0, [r2, #8]
   82300:	f043 0201 	orr.w	r2, r3, #1
   82304:	6062      	str	r2, [r4, #4]
   82306:	50e3      	str	r3, [r4, r3]
   82308:	b9e1      	cbnz	r1, 82344 <_free_r+0x94>
   8230a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8230e:	d32d      	bcc.n	8236c <_free_r+0xbc>
   82310:	0a5a      	lsrs	r2, r3, #9
   82312:	2a04      	cmp	r2, #4
   82314:	d869      	bhi.n	823ea <_free_r+0x13a>
   82316:	0998      	lsrs	r0, r3, #6
   82318:	3038      	adds	r0, #56	; 0x38
   8231a:	0041      	lsls	r1, r0, #1
   8231c:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82320:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82324:	4944      	ldr	r1, [pc, #272]	; (82438 <_free_r+0x188>)
   82326:	4562      	cmp	r2, ip
   82328:	d065      	beq.n	823f6 <_free_r+0x146>
   8232a:	6851      	ldr	r1, [r2, #4]
   8232c:	f021 0103 	bic.w	r1, r1, #3
   82330:	428b      	cmp	r3, r1
   82332:	d202      	bcs.n	8233a <_free_r+0x8a>
   82334:	6892      	ldr	r2, [r2, #8]
   82336:	4594      	cmp	ip, r2
   82338:	d1f7      	bne.n	8232a <_free_r+0x7a>
   8233a:	68d3      	ldr	r3, [r2, #12]
   8233c:	60e3      	str	r3, [r4, #12]
   8233e:	60a2      	str	r2, [r4, #8]
   82340:	609c      	str	r4, [r3, #8]
   82342:	60d4      	str	r4, [r2, #12]
   82344:	4630      	mov	r0, r6
   82346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8234a:	f000 bbb7 	b.w	82abc <__malloc_unlock>
   8234e:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82352:	f10c 0808 	add.w	r8, ip, #8
   82356:	1b64      	subs	r4, r4, r5
   82358:	68a0      	ldr	r0, [r4, #8]
   8235a:	442b      	add	r3, r5
   8235c:	4540      	cmp	r0, r8
   8235e:	d042      	beq.n	823e6 <_free_r+0x136>
   82360:	68e5      	ldr	r5, [r4, #12]
   82362:	60c5      	str	r5, [r0, #12]
   82364:	60a8      	str	r0, [r5, #8]
   82366:	e7c0      	b.n	822ea <_free_r+0x3a>
   82368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8236c:	08db      	lsrs	r3, r3, #3
   8236e:	109a      	asrs	r2, r3, #2
   82370:	2001      	movs	r0, #1
   82372:	4090      	lsls	r0, r2
   82374:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82378:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   8237c:	689a      	ldr	r2, [r3, #8]
   8237e:	4301      	orrs	r1, r0
   82380:	60a2      	str	r2, [r4, #8]
   82382:	60e3      	str	r3, [r4, #12]
   82384:	f8cc 1004 	str.w	r1, [ip, #4]
   82388:	4630      	mov	r0, r6
   8238a:	609c      	str	r4, [r3, #8]
   8238c:	60d4      	str	r4, [r2, #12]
   8238e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82392:	f000 bb93 	b.w	82abc <__malloc_unlock>
   82396:	4d29      	ldr	r5, [pc, #164]	; (8243c <_free_r+0x18c>)
   82398:	42a8      	cmp	r0, r5
   8239a:	d1ae      	bne.n	822fa <_free_r+0x4a>
   8239c:	f043 0201 	orr.w	r2, r3, #1
   823a0:	f8cc 4014 	str.w	r4, [ip, #20]
   823a4:	f8cc 4010 	str.w	r4, [ip, #16]
   823a8:	60e0      	str	r0, [r4, #12]
   823aa:	60a0      	str	r0, [r4, #8]
   823ac:	6062      	str	r2, [r4, #4]
   823ae:	50e3      	str	r3, [r4, r3]
   823b0:	e7c8      	b.n	82344 <_free_r+0x94>
   823b2:	441f      	add	r7, r3
   823b4:	07cb      	lsls	r3, r1, #31
   823b6:	d407      	bmi.n	823c8 <_free_r+0x118>
   823b8:	f855 1c08 	ldr.w	r1, [r5, #-8]
   823bc:	1a64      	subs	r4, r4, r1
   823be:	68e3      	ldr	r3, [r4, #12]
   823c0:	68a2      	ldr	r2, [r4, #8]
   823c2:	440f      	add	r7, r1
   823c4:	60d3      	str	r3, [r2, #12]
   823c6:	609a      	str	r2, [r3, #8]
   823c8:	4b1d      	ldr	r3, [pc, #116]	; (82440 <_free_r+0x190>)
   823ca:	f047 0201 	orr.w	r2, r7, #1
   823ce:	681b      	ldr	r3, [r3, #0]
   823d0:	6062      	str	r2, [r4, #4]
   823d2:	429f      	cmp	r7, r3
   823d4:	f8cc 4008 	str.w	r4, [ip, #8]
   823d8:	d3b4      	bcc.n	82344 <_free_r+0x94>
   823da:	4b1a      	ldr	r3, [pc, #104]	; (82444 <_free_r+0x194>)
   823dc:	4630      	mov	r0, r6
   823de:	6819      	ldr	r1, [r3, #0]
   823e0:	f7ff ff18 	bl	82214 <_malloc_trim_r>
   823e4:	e7ae      	b.n	82344 <_free_r+0x94>
   823e6:	2101      	movs	r1, #1
   823e8:	e77f      	b.n	822ea <_free_r+0x3a>
   823ea:	2a14      	cmp	r2, #20
   823ec:	d80b      	bhi.n	82406 <_free_r+0x156>
   823ee:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   823f2:	0041      	lsls	r1, r0, #1
   823f4:	e792      	b.n	8231c <_free_r+0x6c>
   823f6:	1080      	asrs	r0, r0, #2
   823f8:	2501      	movs	r5, #1
   823fa:	4085      	lsls	r5, r0
   823fc:	6848      	ldr	r0, [r1, #4]
   823fe:	4613      	mov	r3, r2
   82400:	4328      	orrs	r0, r5
   82402:	6048      	str	r0, [r1, #4]
   82404:	e79a      	b.n	8233c <_free_r+0x8c>
   82406:	2a54      	cmp	r2, #84	; 0x54
   82408:	d803      	bhi.n	82412 <_free_r+0x162>
   8240a:	0b18      	lsrs	r0, r3, #12
   8240c:	306e      	adds	r0, #110	; 0x6e
   8240e:	0041      	lsls	r1, r0, #1
   82410:	e784      	b.n	8231c <_free_r+0x6c>
   82412:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82416:	d803      	bhi.n	82420 <_free_r+0x170>
   82418:	0bd8      	lsrs	r0, r3, #15
   8241a:	3077      	adds	r0, #119	; 0x77
   8241c:	0041      	lsls	r1, r0, #1
   8241e:	e77d      	b.n	8231c <_free_r+0x6c>
   82420:	f240 5154 	movw	r1, #1364	; 0x554
   82424:	428a      	cmp	r2, r1
   82426:	d803      	bhi.n	82430 <_free_r+0x180>
   82428:	0c98      	lsrs	r0, r3, #18
   8242a:	307c      	adds	r0, #124	; 0x7c
   8242c:	0041      	lsls	r1, r0, #1
   8242e:	e775      	b.n	8231c <_free_r+0x6c>
   82430:	21fc      	movs	r1, #252	; 0xfc
   82432:	207e      	movs	r0, #126	; 0x7e
   82434:	e772      	b.n	8231c <_free_r+0x6c>
   82436:	bf00      	nop
   82438:	20070564 	.word	0x20070564
   8243c:	2007056c 	.word	0x2007056c
   82440:	2007096c 	.word	0x2007096c
   82444:	20070aac 	.word	0x20070aac

00082448 <_fwalk>:
   82448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8244c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82450:	4688      	mov	r8, r1
   82452:	d019      	beq.n	82488 <_fwalk+0x40>
   82454:	2600      	movs	r6, #0
   82456:	687d      	ldr	r5, [r7, #4]
   82458:	68bc      	ldr	r4, [r7, #8]
   8245a:	3d01      	subs	r5, #1
   8245c:	d40e      	bmi.n	8247c <_fwalk+0x34>
   8245e:	89a3      	ldrh	r3, [r4, #12]
   82460:	3d01      	subs	r5, #1
   82462:	2b01      	cmp	r3, #1
   82464:	d906      	bls.n	82474 <_fwalk+0x2c>
   82466:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8246a:	4620      	mov	r0, r4
   8246c:	3301      	adds	r3, #1
   8246e:	d001      	beq.n	82474 <_fwalk+0x2c>
   82470:	47c0      	blx	r8
   82472:	4306      	orrs	r6, r0
   82474:	1c6b      	adds	r3, r5, #1
   82476:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8247a:	d1f0      	bne.n	8245e <_fwalk+0x16>
   8247c:	683f      	ldr	r7, [r7, #0]
   8247e:	2f00      	cmp	r7, #0
   82480:	d1e9      	bne.n	82456 <_fwalk+0xe>
   82482:	4630      	mov	r0, r6
   82484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82488:	463e      	mov	r6, r7
   8248a:	4630      	mov	r0, r6
   8248c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082490 <__smakebuf_r>:
   82490:	b5f0      	push	{r4, r5, r6, r7, lr}
   82492:	898b      	ldrh	r3, [r1, #12]
   82494:	b091      	sub	sp, #68	; 0x44
   82496:	b29a      	uxth	r2, r3
   82498:	0796      	lsls	r6, r2, #30
   8249a:	460c      	mov	r4, r1
   8249c:	4605      	mov	r5, r0
   8249e:	d437      	bmi.n	82510 <__smakebuf_r+0x80>
   824a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   824a4:	2900      	cmp	r1, #0
   824a6:	db17      	blt.n	824d8 <__smakebuf_r+0x48>
   824a8:	aa01      	add	r2, sp, #4
   824aa:	f000 fc1f 	bl	82cec <_fstat_r>
   824ae:	2800      	cmp	r0, #0
   824b0:	db10      	blt.n	824d4 <__smakebuf_r+0x44>
   824b2:	9b02      	ldr	r3, [sp, #8]
   824b4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   824b8:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   824bc:	424f      	negs	r7, r1
   824be:	414f      	adcs	r7, r1
   824c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   824c4:	d02c      	beq.n	82520 <__smakebuf_r+0x90>
   824c6:	89a3      	ldrh	r3, [r4, #12]
   824c8:	f44f 6680 	mov.w	r6, #1024	; 0x400
   824cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   824d0:	81a3      	strh	r3, [r4, #12]
   824d2:	e00b      	b.n	824ec <__smakebuf_r+0x5c>
   824d4:	89a3      	ldrh	r3, [r4, #12]
   824d6:	b29a      	uxth	r2, r3
   824d8:	f012 0f80 	tst.w	r2, #128	; 0x80
   824dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   824e0:	81a3      	strh	r3, [r4, #12]
   824e2:	bf14      	ite	ne
   824e4:	2640      	movne	r6, #64	; 0x40
   824e6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   824ea:	2700      	movs	r7, #0
   824ec:	4628      	mov	r0, r5
   824ee:	4631      	mov	r1, r6
   824f0:	f000 f846 	bl	82580 <_malloc_r>
   824f4:	89a3      	ldrh	r3, [r4, #12]
   824f6:	2800      	cmp	r0, #0
   824f8:	d029      	beq.n	8254e <__smakebuf_r+0xbe>
   824fa:	4a1b      	ldr	r2, [pc, #108]	; (82568 <__smakebuf_r+0xd8>)
   824fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82500:	63ea      	str	r2, [r5, #60]	; 0x3c
   82502:	81a3      	strh	r3, [r4, #12]
   82504:	6020      	str	r0, [r4, #0]
   82506:	6120      	str	r0, [r4, #16]
   82508:	6166      	str	r6, [r4, #20]
   8250a:	b9a7      	cbnz	r7, 82536 <__smakebuf_r+0xa6>
   8250c:	b011      	add	sp, #68	; 0x44
   8250e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82510:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82514:	2201      	movs	r2, #1
   82516:	600b      	str	r3, [r1, #0]
   82518:	610b      	str	r3, [r1, #16]
   8251a:	614a      	str	r2, [r1, #20]
   8251c:	b011      	add	sp, #68	; 0x44
   8251e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82520:	4a12      	ldr	r2, [pc, #72]	; (8256c <__smakebuf_r+0xdc>)
   82522:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82524:	4293      	cmp	r3, r2
   82526:	d1ce      	bne.n	824c6 <__smakebuf_r+0x36>
   82528:	89a3      	ldrh	r3, [r4, #12]
   8252a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8252e:	4333      	orrs	r3, r6
   82530:	81a3      	strh	r3, [r4, #12]
   82532:	64e6      	str	r6, [r4, #76]	; 0x4c
   82534:	e7da      	b.n	824ec <__smakebuf_r+0x5c>
   82536:	4628      	mov	r0, r5
   82538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8253c:	f000 fbea 	bl	82d14 <_isatty_r>
   82540:	2800      	cmp	r0, #0
   82542:	d0e3      	beq.n	8250c <__smakebuf_r+0x7c>
   82544:	89a3      	ldrh	r3, [r4, #12]
   82546:	f043 0301 	orr.w	r3, r3, #1
   8254a:	81a3      	strh	r3, [r4, #12]
   8254c:	e7de      	b.n	8250c <__smakebuf_r+0x7c>
   8254e:	059a      	lsls	r2, r3, #22
   82550:	d4dc      	bmi.n	8250c <__smakebuf_r+0x7c>
   82552:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82556:	f043 0302 	orr.w	r3, r3, #2
   8255a:	2101      	movs	r1, #1
   8255c:	81a3      	strh	r3, [r4, #12]
   8255e:	6022      	str	r2, [r4, #0]
   82560:	6122      	str	r2, [r4, #16]
   82562:	6161      	str	r1, [r4, #20]
   82564:	e7d2      	b.n	8250c <__smakebuf_r+0x7c>
   82566:	bf00      	nop
   82568:	000820dd 	.word	0x000820dd
   8256c:	00082b41 	.word	0x00082b41

00082570 <malloc>:
   82570:	4b02      	ldr	r3, [pc, #8]	; (8257c <malloc+0xc>)
   82572:	4601      	mov	r1, r0
   82574:	6818      	ldr	r0, [r3, #0]
   82576:	f000 b803 	b.w	82580 <_malloc_r>
   8257a:	bf00      	nop
   8257c:	20070560 	.word	0x20070560

00082580 <_malloc_r>:
   82580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82584:	f101 050b 	add.w	r5, r1, #11
   82588:	2d16      	cmp	r5, #22
   8258a:	b083      	sub	sp, #12
   8258c:	4606      	mov	r6, r0
   8258e:	d927      	bls.n	825e0 <_malloc_r+0x60>
   82590:	f035 0507 	bics.w	r5, r5, #7
   82594:	d427      	bmi.n	825e6 <_malloc_r+0x66>
   82596:	42a9      	cmp	r1, r5
   82598:	d825      	bhi.n	825e6 <_malloc_r+0x66>
   8259a:	4630      	mov	r0, r6
   8259c:	f000 fa8c 	bl	82ab8 <__malloc_lock>
   825a0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   825a4:	d226      	bcs.n	825f4 <_malloc_r+0x74>
   825a6:	4fc1      	ldr	r7, [pc, #772]	; (828ac <_malloc_r+0x32c>)
   825a8:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   825ac:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   825b0:	68dc      	ldr	r4, [r3, #12]
   825b2:	429c      	cmp	r4, r3
   825b4:	f000 81d2 	beq.w	8295c <_malloc_r+0x3dc>
   825b8:	6863      	ldr	r3, [r4, #4]
   825ba:	68e2      	ldr	r2, [r4, #12]
   825bc:	f023 0303 	bic.w	r3, r3, #3
   825c0:	4423      	add	r3, r4
   825c2:	6858      	ldr	r0, [r3, #4]
   825c4:	68a1      	ldr	r1, [r4, #8]
   825c6:	f040 0501 	orr.w	r5, r0, #1
   825ca:	60ca      	str	r2, [r1, #12]
   825cc:	4630      	mov	r0, r6
   825ce:	6091      	str	r1, [r2, #8]
   825d0:	605d      	str	r5, [r3, #4]
   825d2:	f000 fa73 	bl	82abc <__malloc_unlock>
   825d6:	3408      	adds	r4, #8
   825d8:	4620      	mov	r0, r4
   825da:	b003      	add	sp, #12
   825dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   825e0:	2510      	movs	r5, #16
   825e2:	42a9      	cmp	r1, r5
   825e4:	d9d9      	bls.n	8259a <_malloc_r+0x1a>
   825e6:	2400      	movs	r4, #0
   825e8:	230c      	movs	r3, #12
   825ea:	4620      	mov	r0, r4
   825ec:	6033      	str	r3, [r6, #0]
   825ee:	b003      	add	sp, #12
   825f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   825f4:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   825f8:	f000 8089 	beq.w	8270e <_malloc_r+0x18e>
   825fc:	f1bc 0f04 	cmp.w	ip, #4
   82600:	f200 8160 	bhi.w	828c4 <_malloc_r+0x344>
   82604:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82608:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   8260c:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82610:	4fa6      	ldr	r7, [pc, #664]	; (828ac <_malloc_r+0x32c>)
   82612:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82616:	68cc      	ldr	r4, [r1, #12]
   82618:	42a1      	cmp	r1, r4
   8261a:	d105      	bne.n	82628 <_malloc_r+0xa8>
   8261c:	e00c      	b.n	82638 <_malloc_r+0xb8>
   8261e:	2b00      	cmp	r3, #0
   82620:	da79      	bge.n	82716 <_malloc_r+0x196>
   82622:	68e4      	ldr	r4, [r4, #12]
   82624:	42a1      	cmp	r1, r4
   82626:	d007      	beq.n	82638 <_malloc_r+0xb8>
   82628:	6862      	ldr	r2, [r4, #4]
   8262a:	f022 0203 	bic.w	r2, r2, #3
   8262e:	1b53      	subs	r3, r2, r5
   82630:	2b0f      	cmp	r3, #15
   82632:	ddf4      	ble.n	8261e <_malloc_r+0x9e>
   82634:	f10c 3cff 	add.w	ip, ip, #4294967295
   82638:	f10c 0c01 	add.w	ip, ip, #1
   8263c:	4b9b      	ldr	r3, [pc, #620]	; (828ac <_malloc_r+0x32c>)
   8263e:	693c      	ldr	r4, [r7, #16]
   82640:	f103 0e08 	add.w	lr, r3, #8
   82644:	4574      	cmp	r4, lr
   82646:	f000 817e 	beq.w	82946 <_malloc_r+0x3c6>
   8264a:	6861      	ldr	r1, [r4, #4]
   8264c:	f021 0103 	bic.w	r1, r1, #3
   82650:	1b4a      	subs	r2, r1, r5
   82652:	2a0f      	cmp	r2, #15
   82654:	f300 8164 	bgt.w	82920 <_malloc_r+0x3a0>
   82658:	2a00      	cmp	r2, #0
   8265a:	f8c3 e014 	str.w	lr, [r3, #20]
   8265e:	f8c3 e010 	str.w	lr, [r3, #16]
   82662:	da69      	bge.n	82738 <_malloc_r+0x1b8>
   82664:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82668:	f080 813a 	bcs.w	828e0 <_malloc_r+0x360>
   8266c:	08c9      	lsrs	r1, r1, #3
   8266e:	108a      	asrs	r2, r1, #2
   82670:	f04f 0801 	mov.w	r8, #1
   82674:	fa08 f802 	lsl.w	r8, r8, r2
   82678:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   8267c:	685a      	ldr	r2, [r3, #4]
   8267e:	6888      	ldr	r0, [r1, #8]
   82680:	ea48 0202 	orr.w	r2, r8, r2
   82684:	60a0      	str	r0, [r4, #8]
   82686:	60e1      	str	r1, [r4, #12]
   82688:	605a      	str	r2, [r3, #4]
   8268a:	608c      	str	r4, [r1, #8]
   8268c:	60c4      	str	r4, [r0, #12]
   8268e:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82692:	2001      	movs	r0, #1
   82694:	4098      	lsls	r0, r3
   82696:	4290      	cmp	r0, r2
   82698:	d85b      	bhi.n	82752 <_malloc_r+0x1d2>
   8269a:	4202      	tst	r2, r0
   8269c:	d106      	bne.n	826ac <_malloc_r+0x12c>
   8269e:	f02c 0c03 	bic.w	ip, ip, #3
   826a2:	0040      	lsls	r0, r0, #1
   826a4:	4202      	tst	r2, r0
   826a6:	f10c 0c04 	add.w	ip, ip, #4
   826aa:	d0fa      	beq.n	826a2 <_malloc_r+0x122>
   826ac:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   826b0:	4644      	mov	r4, r8
   826b2:	46e1      	mov	r9, ip
   826b4:	68e3      	ldr	r3, [r4, #12]
   826b6:	429c      	cmp	r4, r3
   826b8:	d107      	bne.n	826ca <_malloc_r+0x14a>
   826ba:	e146      	b.n	8294a <_malloc_r+0x3ca>
   826bc:	2a00      	cmp	r2, #0
   826be:	f280 8157 	bge.w	82970 <_malloc_r+0x3f0>
   826c2:	68db      	ldr	r3, [r3, #12]
   826c4:	429c      	cmp	r4, r3
   826c6:	f000 8140 	beq.w	8294a <_malloc_r+0x3ca>
   826ca:	6859      	ldr	r1, [r3, #4]
   826cc:	f021 0103 	bic.w	r1, r1, #3
   826d0:	1b4a      	subs	r2, r1, r5
   826d2:	2a0f      	cmp	r2, #15
   826d4:	ddf2      	ble.n	826bc <_malloc_r+0x13c>
   826d6:	461c      	mov	r4, r3
   826d8:	f854 cf08 	ldr.w	ip, [r4, #8]!
   826dc:	68d9      	ldr	r1, [r3, #12]
   826de:	f045 0901 	orr.w	r9, r5, #1
   826e2:	f042 0801 	orr.w	r8, r2, #1
   826e6:	441d      	add	r5, r3
   826e8:	f8c3 9004 	str.w	r9, [r3, #4]
   826ec:	4630      	mov	r0, r6
   826ee:	f8cc 100c 	str.w	r1, [ip, #12]
   826f2:	f8c1 c008 	str.w	ip, [r1, #8]
   826f6:	617d      	str	r5, [r7, #20]
   826f8:	613d      	str	r5, [r7, #16]
   826fa:	f8c5 e00c 	str.w	lr, [r5, #12]
   826fe:	f8c5 e008 	str.w	lr, [r5, #8]
   82702:	f8c5 8004 	str.w	r8, [r5, #4]
   82706:	50aa      	str	r2, [r5, r2]
   82708:	f000 f9d8 	bl	82abc <__malloc_unlock>
   8270c:	e764      	b.n	825d8 <_malloc_r+0x58>
   8270e:	217e      	movs	r1, #126	; 0x7e
   82710:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82714:	e77c      	b.n	82610 <_malloc_r+0x90>
   82716:	4422      	add	r2, r4
   82718:	6850      	ldr	r0, [r2, #4]
   8271a:	68e3      	ldr	r3, [r4, #12]
   8271c:	68a1      	ldr	r1, [r4, #8]
   8271e:	f040 0501 	orr.w	r5, r0, #1
   82722:	60cb      	str	r3, [r1, #12]
   82724:	4630      	mov	r0, r6
   82726:	6099      	str	r1, [r3, #8]
   82728:	6055      	str	r5, [r2, #4]
   8272a:	f000 f9c7 	bl	82abc <__malloc_unlock>
   8272e:	3408      	adds	r4, #8
   82730:	4620      	mov	r0, r4
   82732:	b003      	add	sp, #12
   82734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82738:	4421      	add	r1, r4
   8273a:	684b      	ldr	r3, [r1, #4]
   8273c:	4630      	mov	r0, r6
   8273e:	f043 0301 	orr.w	r3, r3, #1
   82742:	604b      	str	r3, [r1, #4]
   82744:	f000 f9ba 	bl	82abc <__malloc_unlock>
   82748:	3408      	adds	r4, #8
   8274a:	4620      	mov	r0, r4
   8274c:	b003      	add	sp, #12
   8274e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82752:	68bc      	ldr	r4, [r7, #8]
   82754:	6863      	ldr	r3, [r4, #4]
   82756:	f023 0903 	bic.w	r9, r3, #3
   8275a:	45a9      	cmp	r9, r5
   8275c:	d304      	bcc.n	82768 <_malloc_r+0x1e8>
   8275e:	ebc5 0309 	rsb	r3, r5, r9
   82762:	2b0f      	cmp	r3, #15
   82764:	f300 8091 	bgt.w	8288a <_malloc_r+0x30a>
   82768:	4b51      	ldr	r3, [pc, #324]	; (828b0 <_malloc_r+0x330>)
   8276a:	4a52      	ldr	r2, [pc, #328]	; (828b4 <_malloc_r+0x334>)
   8276c:	6819      	ldr	r1, [r3, #0]
   8276e:	6813      	ldr	r3, [r2, #0]
   82770:	eb05 0a01 	add.w	sl, r5, r1
   82774:	3301      	adds	r3, #1
   82776:	eb04 0b09 	add.w	fp, r4, r9
   8277a:	f000 8161 	beq.w	82a40 <_malloc_r+0x4c0>
   8277e:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82782:	f10a 0a0f 	add.w	sl, sl, #15
   82786:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   8278a:	f02a 0a0f 	bic.w	sl, sl, #15
   8278e:	4630      	mov	r0, r6
   82790:	4651      	mov	r1, sl
   82792:	9201      	str	r2, [sp, #4]
   82794:	f000 f994 	bl	82ac0 <_sbrk_r>
   82798:	f1b0 3fff 	cmp.w	r0, #4294967295
   8279c:	4680      	mov	r8, r0
   8279e:	9a01      	ldr	r2, [sp, #4]
   827a0:	f000 8101 	beq.w	829a6 <_malloc_r+0x426>
   827a4:	4583      	cmp	fp, r0
   827a6:	f200 80fb 	bhi.w	829a0 <_malloc_r+0x420>
   827aa:	f8df c114 	ldr.w	ip, [pc, #276]	; 828c0 <_malloc_r+0x340>
   827ae:	45c3      	cmp	fp, r8
   827b0:	f8dc 3000 	ldr.w	r3, [ip]
   827b4:	4453      	add	r3, sl
   827b6:	f8cc 3000 	str.w	r3, [ip]
   827ba:	f000 814a 	beq.w	82a52 <_malloc_r+0x4d2>
   827be:	6812      	ldr	r2, [r2, #0]
   827c0:	493c      	ldr	r1, [pc, #240]	; (828b4 <_malloc_r+0x334>)
   827c2:	3201      	adds	r2, #1
   827c4:	bf1b      	ittet	ne
   827c6:	ebcb 0b08 	rsbne	fp, fp, r8
   827ca:	445b      	addne	r3, fp
   827cc:	f8c1 8000 	streq.w	r8, [r1]
   827d0:	f8cc 3000 	strne.w	r3, [ip]
   827d4:	f018 0307 	ands.w	r3, r8, #7
   827d8:	f000 8114 	beq.w	82a04 <_malloc_r+0x484>
   827dc:	f1c3 0208 	rsb	r2, r3, #8
   827e0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   827e4:	4490      	add	r8, r2
   827e6:	3308      	adds	r3, #8
   827e8:	44c2      	add	sl, r8
   827ea:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   827ee:	ebca 0a03 	rsb	sl, sl, r3
   827f2:	4651      	mov	r1, sl
   827f4:	4630      	mov	r0, r6
   827f6:	f8cd c004 	str.w	ip, [sp, #4]
   827fa:	f000 f961 	bl	82ac0 <_sbrk_r>
   827fe:	1c43      	adds	r3, r0, #1
   82800:	f8dd c004 	ldr.w	ip, [sp, #4]
   82804:	f000 8135 	beq.w	82a72 <_malloc_r+0x4f2>
   82808:	ebc8 0200 	rsb	r2, r8, r0
   8280c:	4452      	add	r2, sl
   8280e:	f042 0201 	orr.w	r2, r2, #1
   82812:	f8dc 3000 	ldr.w	r3, [ip]
   82816:	42bc      	cmp	r4, r7
   82818:	4453      	add	r3, sl
   8281a:	f8c7 8008 	str.w	r8, [r7, #8]
   8281e:	f8cc 3000 	str.w	r3, [ip]
   82822:	f8c8 2004 	str.w	r2, [r8, #4]
   82826:	f8df a098 	ldr.w	sl, [pc, #152]	; 828c0 <_malloc_r+0x340>
   8282a:	d015      	beq.n	82858 <_malloc_r+0x2d8>
   8282c:	f1b9 0f0f 	cmp.w	r9, #15
   82830:	f240 80eb 	bls.w	82a0a <_malloc_r+0x48a>
   82834:	6861      	ldr	r1, [r4, #4]
   82836:	f1a9 020c 	sub.w	r2, r9, #12
   8283a:	f022 0207 	bic.w	r2, r2, #7
   8283e:	f001 0101 	and.w	r1, r1, #1
   82842:	ea42 0e01 	orr.w	lr, r2, r1
   82846:	2005      	movs	r0, #5
   82848:	18a1      	adds	r1, r4, r2
   8284a:	2a0f      	cmp	r2, #15
   8284c:	f8c4 e004 	str.w	lr, [r4, #4]
   82850:	6048      	str	r0, [r1, #4]
   82852:	6088      	str	r0, [r1, #8]
   82854:	f200 8111 	bhi.w	82a7a <_malloc_r+0x4fa>
   82858:	4a17      	ldr	r2, [pc, #92]	; (828b8 <_malloc_r+0x338>)
   8285a:	68bc      	ldr	r4, [r7, #8]
   8285c:	6811      	ldr	r1, [r2, #0]
   8285e:	428b      	cmp	r3, r1
   82860:	bf88      	it	hi
   82862:	6013      	strhi	r3, [r2, #0]
   82864:	4a15      	ldr	r2, [pc, #84]	; (828bc <_malloc_r+0x33c>)
   82866:	6811      	ldr	r1, [r2, #0]
   82868:	428b      	cmp	r3, r1
   8286a:	bf88      	it	hi
   8286c:	6013      	strhi	r3, [r2, #0]
   8286e:	6862      	ldr	r2, [r4, #4]
   82870:	f022 0203 	bic.w	r2, r2, #3
   82874:	4295      	cmp	r5, r2
   82876:	ebc5 0302 	rsb	r3, r5, r2
   8287a:	d801      	bhi.n	82880 <_malloc_r+0x300>
   8287c:	2b0f      	cmp	r3, #15
   8287e:	dc04      	bgt.n	8288a <_malloc_r+0x30a>
   82880:	4630      	mov	r0, r6
   82882:	f000 f91b 	bl	82abc <__malloc_unlock>
   82886:	2400      	movs	r4, #0
   82888:	e6a6      	b.n	825d8 <_malloc_r+0x58>
   8288a:	f045 0201 	orr.w	r2, r5, #1
   8288e:	f043 0301 	orr.w	r3, r3, #1
   82892:	4425      	add	r5, r4
   82894:	6062      	str	r2, [r4, #4]
   82896:	4630      	mov	r0, r6
   82898:	60bd      	str	r5, [r7, #8]
   8289a:	606b      	str	r3, [r5, #4]
   8289c:	f000 f90e 	bl	82abc <__malloc_unlock>
   828a0:	3408      	adds	r4, #8
   828a2:	4620      	mov	r0, r4
   828a4:	b003      	add	sp, #12
   828a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   828aa:	bf00      	nop
   828ac:	20070564 	.word	0x20070564
   828b0:	20070aac 	.word	0x20070aac
   828b4:	20070970 	.word	0x20070970
   828b8:	20070aa8 	.word	0x20070aa8
   828bc:	20070aa4 	.word	0x20070aa4
   828c0:	20070ab0 	.word	0x20070ab0
   828c4:	f1bc 0f14 	cmp.w	ip, #20
   828c8:	d961      	bls.n	8298e <_malloc_r+0x40e>
   828ca:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   828ce:	f200 808f 	bhi.w	829f0 <_malloc_r+0x470>
   828d2:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   828d6:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   828da:	ea4f 014c 	mov.w	r1, ip, lsl #1
   828de:	e697      	b.n	82610 <_malloc_r+0x90>
   828e0:	0a4b      	lsrs	r3, r1, #9
   828e2:	2b04      	cmp	r3, #4
   828e4:	d958      	bls.n	82998 <_malloc_r+0x418>
   828e6:	2b14      	cmp	r3, #20
   828e8:	f200 80ad 	bhi.w	82a46 <_malloc_r+0x4c6>
   828ec:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   828f0:	0050      	lsls	r0, r2, #1
   828f2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   828f6:	6883      	ldr	r3, [r0, #8]
   828f8:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82ab4 <_malloc_r+0x534>
   828fc:	4283      	cmp	r3, r0
   828fe:	f000 808a 	beq.w	82a16 <_malloc_r+0x496>
   82902:	685a      	ldr	r2, [r3, #4]
   82904:	f022 0203 	bic.w	r2, r2, #3
   82908:	4291      	cmp	r1, r2
   8290a:	d202      	bcs.n	82912 <_malloc_r+0x392>
   8290c:	689b      	ldr	r3, [r3, #8]
   8290e:	4298      	cmp	r0, r3
   82910:	d1f7      	bne.n	82902 <_malloc_r+0x382>
   82912:	68d9      	ldr	r1, [r3, #12]
   82914:	687a      	ldr	r2, [r7, #4]
   82916:	60e1      	str	r1, [r4, #12]
   82918:	60a3      	str	r3, [r4, #8]
   8291a:	608c      	str	r4, [r1, #8]
   8291c:	60dc      	str	r4, [r3, #12]
   8291e:	e6b6      	b.n	8268e <_malloc_r+0x10e>
   82920:	f045 0701 	orr.w	r7, r5, #1
   82924:	f042 0101 	orr.w	r1, r2, #1
   82928:	4425      	add	r5, r4
   8292a:	6067      	str	r7, [r4, #4]
   8292c:	4630      	mov	r0, r6
   8292e:	615d      	str	r5, [r3, #20]
   82930:	611d      	str	r5, [r3, #16]
   82932:	f8c5 e00c 	str.w	lr, [r5, #12]
   82936:	f8c5 e008 	str.w	lr, [r5, #8]
   8293a:	6069      	str	r1, [r5, #4]
   8293c:	50aa      	str	r2, [r5, r2]
   8293e:	3408      	adds	r4, #8
   82940:	f000 f8bc 	bl	82abc <__malloc_unlock>
   82944:	e648      	b.n	825d8 <_malloc_r+0x58>
   82946:	685a      	ldr	r2, [r3, #4]
   82948:	e6a1      	b.n	8268e <_malloc_r+0x10e>
   8294a:	f109 0901 	add.w	r9, r9, #1
   8294e:	f019 0f03 	tst.w	r9, #3
   82952:	f104 0408 	add.w	r4, r4, #8
   82956:	f47f aead 	bne.w	826b4 <_malloc_r+0x134>
   8295a:	e02d      	b.n	829b8 <_malloc_r+0x438>
   8295c:	f104 0308 	add.w	r3, r4, #8
   82960:	6964      	ldr	r4, [r4, #20]
   82962:	42a3      	cmp	r3, r4
   82964:	bf08      	it	eq
   82966:	f10c 0c02 	addeq.w	ip, ip, #2
   8296a:	f43f ae67 	beq.w	8263c <_malloc_r+0xbc>
   8296e:	e623      	b.n	825b8 <_malloc_r+0x38>
   82970:	4419      	add	r1, r3
   82972:	6848      	ldr	r0, [r1, #4]
   82974:	461c      	mov	r4, r3
   82976:	f854 2f08 	ldr.w	r2, [r4, #8]!
   8297a:	68db      	ldr	r3, [r3, #12]
   8297c:	f040 0501 	orr.w	r5, r0, #1
   82980:	604d      	str	r5, [r1, #4]
   82982:	4630      	mov	r0, r6
   82984:	60d3      	str	r3, [r2, #12]
   82986:	609a      	str	r2, [r3, #8]
   82988:	f000 f898 	bl	82abc <__malloc_unlock>
   8298c:	e624      	b.n	825d8 <_malloc_r+0x58>
   8298e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   82992:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82996:	e63b      	b.n	82610 <_malloc_r+0x90>
   82998:	098a      	lsrs	r2, r1, #6
   8299a:	3238      	adds	r2, #56	; 0x38
   8299c:	0050      	lsls	r0, r2, #1
   8299e:	e7a8      	b.n	828f2 <_malloc_r+0x372>
   829a0:	42bc      	cmp	r4, r7
   829a2:	f43f af02 	beq.w	827aa <_malloc_r+0x22a>
   829a6:	68bc      	ldr	r4, [r7, #8]
   829a8:	6862      	ldr	r2, [r4, #4]
   829aa:	f022 0203 	bic.w	r2, r2, #3
   829ae:	e761      	b.n	82874 <_malloc_r+0x2f4>
   829b0:	f8d8 8000 	ldr.w	r8, [r8]
   829b4:	4598      	cmp	r8, r3
   829b6:	d17a      	bne.n	82aae <_malloc_r+0x52e>
   829b8:	f01c 0f03 	tst.w	ip, #3
   829bc:	f1a8 0308 	sub.w	r3, r8, #8
   829c0:	f10c 3cff 	add.w	ip, ip, #4294967295
   829c4:	d1f4      	bne.n	829b0 <_malloc_r+0x430>
   829c6:	687b      	ldr	r3, [r7, #4]
   829c8:	ea23 0300 	bic.w	r3, r3, r0
   829cc:	607b      	str	r3, [r7, #4]
   829ce:	0040      	lsls	r0, r0, #1
   829d0:	4298      	cmp	r0, r3
   829d2:	f63f aebe 	bhi.w	82752 <_malloc_r+0x1d2>
   829d6:	2800      	cmp	r0, #0
   829d8:	f43f aebb 	beq.w	82752 <_malloc_r+0x1d2>
   829dc:	4203      	tst	r3, r0
   829de:	46cc      	mov	ip, r9
   829e0:	f47f ae64 	bne.w	826ac <_malloc_r+0x12c>
   829e4:	0040      	lsls	r0, r0, #1
   829e6:	4203      	tst	r3, r0
   829e8:	f10c 0c04 	add.w	ip, ip, #4
   829ec:	d0fa      	beq.n	829e4 <_malloc_r+0x464>
   829ee:	e65d      	b.n	826ac <_malloc_r+0x12c>
   829f0:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   829f4:	d819      	bhi.n	82a2a <_malloc_r+0x4aa>
   829f6:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   829fa:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   829fe:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82a02:	e605      	b.n	82610 <_malloc_r+0x90>
   82a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82a08:	e6ee      	b.n	827e8 <_malloc_r+0x268>
   82a0a:	2301      	movs	r3, #1
   82a0c:	f8c8 3004 	str.w	r3, [r8, #4]
   82a10:	4644      	mov	r4, r8
   82a12:	2200      	movs	r2, #0
   82a14:	e72e      	b.n	82874 <_malloc_r+0x2f4>
   82a16:	1092      	asrs	r2, r2, #2
   82a18:	2001      	movs	r0, #1
   82a1a:	4090      	lsls	r0, r2
   82a1c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82a20:	4619      	mov	r1, r3
   82a22:	4302      	orrs	r2, r0
   82a24:	f8c8 2004 	str.w	r2, [r8, #4]
   82a28:	e775      	b.n	82916 <_malloc_r+0x396>
   82a2a:	f240 5354 	movw	r3, #1364	; 0x554
   82a2e:	459c      	cmp	ip, r3
   82a30:	d81b      	bhi.n	82a6a <_malloc_r+0x4ea>
   82a32:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   82a36:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82a3a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82a3e:	e5e7      	b.n	82610 <_malloc_r+0x90>
   82a40:	f10a 0a10 	add.w	sl, sl, #16
   82a44:	e6a3      	b.n	8278e <_malloc_r+0x20e>
   82a46:	2b54      	cmp	r3, #84	; 0x54
   82a48:	d81f      	bhi.n	82a8a <_malloc_r+0x50a>
   82a4a:	0b0a      	lsrs	r2, r1, #12
   82a4c:	326e      	adds	r2, #110	; 0x6e
   82a4e:	0050      	lsls	r0, r2, #1
   82a50:	e74f      	b.n	828f2 <_malloc_r+0x372>
   82a52:	f3cb 010b 	ubfx	r1, fp, #0, #12
   82a56:	2900      	cmp	r1, #0
   82a58:	f47f aeb1 	bne.w	827be <_malloc_r+0x23e>
   82a5c:	eb0a 0109 	add.w	r1, sl, r9
   82a60:	68ba      	ldr	r2, [r7, #8]
   82a62:	f041 0101 	orr.w	r1, r1, #1
   82a66:	6051      	str	r1, [r2, #4]
   82a68:	e6f6      	b.n	82858 <_malloc_r+0x2d8>
   82a6a:	21fc      	movs	r1, #252	; 0xfc
   82a6c:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82a70:	e5ce      	b.n	82610 <_malloc_r+0x90>
   82a72:	2201      	movs	r2, #1
   82a74:	f04f 0a00 	mov.w	sl, #0
   82a78:	e6cb      	b.n	82812 <_malloc_r+0x292>
   82a7a:	f104 0108 	add.w	r1, r4, #8
   82a7e:	4630      	mov	r0, r6
   82a80:	f7ff fc16 	bl	822b0 <_free_r>
   82a84:	f8da 3000 	ldr.w	r3, [sl]
   82a88:	e6e6      	b.n	82858 <_malloc_r+0x2d8>
   82a8a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82a8e:	d803      	bhi.n	82a98 <_malloc_r+0x518>
   82a90:	0bca      	lsrs	r2, r1, #15
   82a92:	3277      	adds	r2, #119	; 0x77
   82a94:	0050      	lsls	r0, r2, #1
   82a96:	e72c      	b.n	828f2 <_malloc_r+0x372>
   82a98:	f240 5254 	movw	r2, #1364	; 0x554
   82a9c:	4293      	cmp	r3, r2
   82a9e:	d803      	bhi.n	82aa8 <_malloc_r+0x528>
   82aa0:	0c8a      	lsrs	r2, r1, #18
   82aa2:	327c      	adds	r2, #124	; 0x7c
   82aa4:	0050      	lsls	r0, r2, #1
   82aa6:	e724      	b.n	828f2 <_malloc_r+0x372>
   82aa8:	20fc      	movs	r0, #252	; 0xfc
   82aaa:	227e      	movs	r2, #126	; 0x7e
   82aac:	e721      	b.n	828f2 <_malloc_r+0x372>
   82aae:	687b      	ldr	r3, [r7, #4]
   82ab0:	e78d      	b.n	829ce <_malloc_r+0x44e>
   82ab2:	bf00      	nop
   82ab4:	20070564 	.word	0x20070564

00082ab8 <__malloc_lock>:
   82ab8:	4770      	bx	lr
   82aba:	bf00      	nop

00082abc <__malloc_unlock>:
   82abc:	4770      	bx	lr
   82abe:	bf00      	nop

00082ac0 <_sbrk_r>:
   82ac0:	b538      	push	{r3, r4, r5, lr}
   82ac2:	4c07      	ldr	r4, [pc, #28]	; (82ae0 <_sbrk_r+0x20>)
   82ac4:	2300      	movs	r3, #0
   82ac6:	4605      	mov	r5, r0
   82ac8:	4608      	mov	r0, r1
   82aca:	6023      	str	r3, [r4, #0]
   82acc:	f7ff f856 	bl	81b7c <_sbrk>
   82ad0:	1c43      	adds	r3, r0, #1
   82ad2:	d000      	beq.n	82ad6 <_sbrk_r+0x16>
   82ad4:	bd38      	pop	{r3, r4, r5, pc}
   82ad6:	6823      	ldr	r3, [r4, #0]
   82ad8:	2b00      	cmp	r3, #0
   82ada:	d0fb      	beq.n	82ad4 <_sbrk_r+0x14>
   82adc:	602b      	str	r3, [r5, #0]
   82ade:	bd38      	pop	{r3, r4, r5, pc}
   82ae0:	20070b60 	.word	0x20070b60

00082ae4 <__sread>:
   82ae4:	b510      	push	{r4, lr}
   82ae6:	460c      	mov	r4, r1
   82ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82aec:	f000 f938 	bl	82d60 <_read_r>
   82af0:	2800      	cmp	r0, #0
   82af2:	db03      	blt.n	82afc <__sread+0x18>
   82af4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   82af6:	4403      	add	r3, r0
   82af8:	6523      	str	r3, [r4, #80]	; 0x50
   82afa:	bd10      	pop	{r4, pc}
   82afc:	89a3      	ldrh	r3, [r4, #12]
   82afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   82b02:	81a3      	strh	r3, [r4, #12]
   82b04:	bd10      	pop	{r4, pc}
   82b06:	bf00      	nop

00082b08 <__swrite>:
   82b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82b0c:	460c      	mov	r4, r1
   82b0e:	8989      	ldrh	r1, [r1, #12]
   82b10:	461d      	mov	r5, r3
   82b12:	05cb      	lsls	r3, r1, #23
   82b14:	4616      	mov	r6, r2
   82b16:	4607      	mov	r7, r0
   82b18:	d506      	bpl.n	82b28 <__swrite+0x20>
   82b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82b1e:	2200      	movs	r2, #0
   82b20:	2302      	movs	r3, #2
   82b22:	f000 f909 	bl	82d38 <_lseek_r>
   82b26:	89a1      	ldrh	r1, [r4, #12]
   82b28:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   82b2c:	81a1      	strh	r1, [r4, #12]
   82b2e:	4638      	mov	r0, r7
   82b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82b34:	4632      	mov	r2, r6
   82b36:	462b      	mov	r3, r5
   82b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82b3c:	f000 b814 	b.w	82b68 <_write_r>

00082b40 <__sseek>:
   82b40:	b510      	push	{r4, lr}
   82b42:	460c      	mov	r4, r1
   82b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82b48:	f000 f8f6 	bl	82d38 <_lseek_r>
   82b4c:	89a3      	ldrh	r3, [r4, #12]
   82b4e:	1c42      	adds	r2, r0, #1
   82b50:	bf0e      	itee	eq
   82b52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   82b56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   82b5a:	6520      	strne	r0, [r4, #80]	; 0x50
   82b5c:	81a3      	strh	r3, [r4, #12]
   82b5e:	bd10      	pop	{r4, pc}

00082b60 <__sclose>:
   82b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82b64:	f000 b868 	b.w	82c38 <_close_r>

00082b68 <_write_r>:
   82b68:	b570      	push	{r4, r5, r6, lr}
   82b6a:	4c08      	ldr	r4, [pc, #32]	; (82b8c <_write_r+0x24>)
   82b6c:	4606      	mov	r6, r0
   82b6e:	2500      	movs	r5, #0
   82b70:	4608      	mov	r0, r1
   82b72:	4611      	mov	r1, r2
   82b74:	461a      	mov	r2, r3
   82b76:	6025      	str	r5, [r4, #0]
   82b78:	f7fe f93a 	bl	80df0 <_write>
   82b7c:	1c43      	adds	r3, r0, #1
   82b7e:	d000      	beq.n	82b82 <_write_r+0x1a>
   82b80:	bd70      	pop	{r4, r5, r6, pc}
   82b82:	6823      	ldr	r3, [r4, #0]
   82b84:	2b00      	cmp	r3, #0
   82b86:	d0fb      	beq.n	82b80 <_write_r+0x18>
   82b88:	6033      	str	r3, [r6, #0]
   82b8a:	bd70      	pop	{r4, r5, r6, pc}
   82b8c:	20070b60 	.word	0x20070b60

00082b90 <__register_exitproc>:
   82b90:	b5f0      	push	{r4, r5, r6, r7, lr}
   82b92:	4c27      	ldr	r4, [pc, #156]	; (82c30 <__register_exitproc+0xa0>)
   82b94:	b085      	sub	sp, #20
   82b96:	6826      	ldr	r6, [r4, #0]
   82b98:	4607      	mov	r7, r0
   82b9a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   82b9e:	2c00      	cmp	r4, #0
   82ba0:	d040      	beq.n	82c24 <__register_exitproc+0x94>
   82ba2:	6865      	ldr	r5, [r4, #4]
   82ba4:	2d1f      	cmp	r5, #31
   82ba6:	dd1e      	ble.n	82be6 <__register_exitproc+0x56>
   82ba8:	4822      	ldr	r0, [pc, #136]	; (82c34 <__register_exitproc+0xa4>)
   82baa:	b918      	cbnz	r0, 82bb4 <__register_exitproc+0x24>
   82bac:	f04f 30ff 	mov.w	r0, #4294967295
   82bb0:	b005      	add	sp, #20
   82bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82bb4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82bb8:	9103      	str	r1, [sp, #12]
   82bba:	9202      	str	r2, [sp, #8]
   82bbc:	9301      	str	r3, [sp, #4]
   82bbe:	f7ff fcd7 	bl	82570 <malloc>
   82bc2:	9903      	ldr	r1, [sp, #12]
   82bc4:	4604      	mov	r4, r0
   82bc6:	9a02      	ldr	r2, [sp, #8]
   82bc8:	9b01      	ldr	r3, [sp, #4]
   82bca:	2800      	cmp	r0, #0
   82bcc:	d0ee      	beq.n	82bac <__register_exitproc+0x1c>
   82bce:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   82bd2:	2000      	movs	r0, #0
   82bd4:	6025      	str	r5, [r4, #0]
   82bd6:	6060      	str	r0, [r4, #4]
   82bd8:	4605      	mov	r5, r0
   82bda:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   82bde:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   82be2:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   82be6:	b93f      	cbnz	r7, 82bf8 <__register_exitproc+0x68>
   82be8:	1c6b      	adds	r3, r5, #1
   82bea:	2000      	movs	r0, #0
   82bec:	3502      	adds	r5, #2
   82bee:	6063      	str	r3, [r4, #4]
   82bf0:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   82bf4:	b005      	add	sp, #20
   82bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82bf8:	2601      	movs	r6, #1
   82bfa:	40ae      	lsls	r6, r5
   82bfc:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   82c00:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   82c04:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   82c08:	2f02      	cmp	r7, #2
   82c0a:	ea42 0206 	orr.w	r2, r2, r6
   82c0e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   82c12:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   82c16:	d1e7      	bne.n	82be8 <__register_exitproc+0x58>
   82c18:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   82c1c:	431e      	orrs	r6, r3
   82c1e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   82c22:	e7e1      	b.n	82be8 <__register_exitproc+0x58>
   82c24:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   82c28:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   82c2c:	e7b9      	b.n	82ba2 <__register_exitproc+0x12>
   82c2e:	bf00      	nop
   82c30:	00082f44 	.word	0x00082f44
   82c34:	00082571 	.word	0x00082571

00082c38 <_close_r>:
   82c38:	b538      	push	{r3, r4, r5, lr}
   82c3a:	4c07      	ldr	r4, [pc, #28]	; (82c58 <_close_r+0x20>)
   82c3c:	2300      	movs	r3, #0
   82c3e:	4605      	mov	r5, r0
   82c40:	4608      	mov	r0, r1
   82c42:	6023      	str	r3, [r4, #0]
   82c44:	f7fe ffb4 	bl	81bb0 <_close>
   82c48:	1c43      	adds	r3, r0, #1
   82c4a:	d000      	beq.n	82c4e <_close_r+0x16>
   82c4c:	bd38      	pop	{r3, r4, r5, pc}
   82c4e:	6823      	ldr	r3, [r4, #0]
   82c50:	2b00      	cmp	r3, #0
   82c52:	d0fb      	beq.n	82c4c <_close_r+0x14>
   82c54:	602b      	str	r3, [r5, #0]
   82c56:	bd38      	pop	{r3, r4, r5, pc}
   82c58:	20070b60 	.word	0x20070b60

00082c5c <_fclose_r>:
   82c5c:	b570      	push	{r4, r5, r6, lr}
   82c5e:	460c      	mov	r4, r1
   82c60:	4605      	mov	r5, r0
   82c62:	b131      	cbz	r1, 82c72 <_fclose_r+0x16>
   82c64:	b110      	cbz	r0, 82c6c <_fclose_r+0x10>
   82c66:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82c68:	2b00      	cmp	r3, #0
   82c6a:	d02f      	beq.n	82ccc <_fclose_r+0x70>
   82c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82c70:	b90b      	cbnz	r3, 82c76 <_fclose_r+0x1a>
   82c72:	2000      	movs	r0, #0
   82c74:	bd70      	pop	{r4, r5, r6, pc}
   82c76:	4628      	mov	r0, r5
   82c78:	4621      	mov	r1, r4
   82c7a:	f7ff fa19 	bl	820b0 <_fflush_r>
   82c7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82c80:	4606      	mov	r6, r0
   82c82:	b133      	cbz	r3, 82c92 <_fclose_r+0x36>
   82c84:	4628      	mov	r0, r5
   82c86:	69e1      	ldr	r1, [r4, #28]
   82c88:	4798      	blx	r3
   82c8a:	2800      	cmp	r0, #0
   82c8c:	bfb8      	it	lt
   82c8e:	f04f 36ff 	movlt.w	r6, #4294967295
   82c92:	89a3      	ldrh	r3, [r4, #12]
   82c94:	061b      	lsls	r3, r3, #24
   82c96:	d41c      	bmi.n	82cd2 <_fclose_r+0x76>
   82c98:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82c9a:	b141      	cbz	r1, 82cae <_fclose_r+0x52>
   82c9c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82ca0:	4299      	cmp	r1, r3
   82ca2:	d002      	beq.n	82caa <_fclose_r+0x4e>
   82ca4:	4628      	mov	r0, r5
   82ca6:	f7ff fb03 	bl	822b0 <_free_r>
   82caa:	2300      	movs	r3, #0
   82cac:	6323      	str	r3, [r4, #48]	; 0x30
   82cae:	6c61      	ldr	r1, [r4, #68]	; 0x44
   82cb0:	b121      	cbz	r1, 82cbc <_fclose_r+0x60>
   82cb2:	4628      	mov	r0, r5
   82cb4:	f7ff fafc 	bl	822b0 <_free_r>
   82cb8:	2300      	movs	r3, #0
   82cba:	6463      	str	r3, [r4, #68]	; 0x44
   82cbc:	f7ff fa8e 	bl	821dc <__sfp_lock_acquire>
   82cc0:	2300      	movs	r3, #0
   82cc2:	81a3      	strh	r3, [r4, #12]
   82cc4:	f7ff fa8c 	bl	821e0 <__sfp_lock_release>
   82cc8:	4630      	mov	r0, r6
   82cca:	bd70      	pop	{r4, r5, r6, pc}
   82ccc:	f7ff fa0c 	bl	820e8 <__sinit>
   82cd0:	e7cc      	b.n	82c6c <_fclose_r+0x10>
   82cd2:	4628      	mov	r0, r5
   82cd4:	6921      	ldr	r1, [r4, #16]
   82cd6:	f7ff faeb 	bl	822b0 <_free_r>
   82cda:	e7dd      	b.n	82c98 <_fclose_r+0x3c>

00082cdc <fclose>:
   82cdc:	4b02      	ldr	r3, [pc, #8]	; (82ce8 <fclose+0xc>)
   82cde:	4601      	mov	r1, r0
   82ce0:	6818      	ldr	r0, [r3, #0]
   82ce2:	f7ff bfbb 	b.w	82c5c <_fclose_r>
   82ce6:	bf00      	nop
   82ce8:	20070560 	.word	0x20070560

00082cec <_fstat_r>:
   82cec:	b538      	push	{r3, r4, r5, lr}
   82cee:	4c08      	ldr	r4, [pc, #32]	; (82d10 <_fstat_r+0x24>)
   82cf0:	2300      	movs	r3, #0
   82cf2:	4605      	mov	r5, r0
   82cf4:	4608      	mov	r0, r1
   82cf6:	4611      	mov	r1, r2
   82cf8:	6023      	str	r3, [r4, #0]
   82cfa:	f7fe ff5d 	bl	81bb8 <_fstat>
   82cfe:	1c43      	adds	r3, r0, #1
   82d00:	d000      	beq.n	82d04 <_fstat_r+0x18>
   82d02:	bd38      	pop	{r3, r4, r5, pc}
   82d04:	6823      	ldr	r3, [r4, #0]
   82d06:	2b00      	cmp	r3, #0
   82d08:	d0fb      	beq.n	82d02 <_fstat_r+0x16>
   82d0a:	602b      	str	r3, [r5, #0]
   82d0c:	bd38      	pop	{r3, r4, r5, pc}
   82d0e:	bf00      	nop
   82d10:	20070b60 	.word	0x20070b60

00082d14 <_isatty_r>:
   82d14:	b538      	push	{r3, r4, r5, lr}
   82d16:	4c07      	ldr	r4, [pc, #28]	; (82d34 <_isatty_r+0x20>)
   82d18:	2300      	movs	r3, #0
   82d1a:	4605      	mov	r5, r0
   82d1c:	4608      	mov	r0, r1
   82d1e:	6023      	str	r3, [r4, #0]
   82d20:	f7fe ff50 	bl	81bc4 <_isatty>
   82d24:	1c43      	adds	r3, r0, #1
   82d26:	d000      	beq.n	82d2a <_isatty_r+0x16>
   82d28:	bd38      	pop	{r3, r4, r5, pc}
   82d2a:	6823      	ldr	r3, [r4, #0]
   82d2c:	2b00      	cmp	r3, #0
   82d2e:	d0fb      	beq.n	82d28 <_isatty_r+0x14>
   82d30:	602b      	str	r3, [r5, #0]
   82d32:	bd38      	pop	{r3, r4, r5, pc}
   82d34:	20070b60 	.word	0x20070b60

00082d38 <_lseek_r>:
   82d38:	b570      	push	{r4, r5, r6, lr}
   82d3a:	4c08      	ldr	r4, [pc, #32]	; (82d5c <_lseek_r+0x24>)
   82d3c:	4606      	mov	r6, r0
   82d3e:	2500      	movs	r5, #0
   82d40:	4608      	mov	r0, r1
   82d42:	4611      	mov	r1, r2
   82d44:	461a      	mov	r2, r3
   82d46:	6025      	str	r5, [r4, #0]
   82d48:	f7fe ff3e 	bl	81bc8 <_lseek>
   82d4c:	1c43      	adds	r3, r0, #1
   82d4e:	d000      	beq.n	82d52 <_lseek_r+0x1a>
   82d50:	bd70      	pop	{r4, r5, r6, pc}
   82d52:	6823      	ldr	r3, [r4, #0]
   82d54:	2b00      	cmp	r3, #0
   82d56:	d0fb      	beq.n	82d50 <_lseek_r+0x18>
   82d58:	6033      	str	r3, [r6, #0]
   82d5a:	bd70      	pop	{r4, r5, r6, pc}
   82d5c:	20070b60 	.word	0x20070b60

00082d60 <_read_r>:
   82d60:	b570      	push	{r4, r5, r6, lr}
   82d62:	4c08      	ldr	r4, [pc, #32]	; (82d84 <_read_r+0x24>)
   82d64:	4606      	mov	r6, r0
   82d66:	2500      	movs	r5, #0
   82d68:	4608      	mov	r0, r1
   82d6a:	4611      	mov	r1, r2
   82d6c:	461a      	mov	r2, r3
   82d6e:	6025      	str	r5, [r4, #0]
   82d70:	f7fd f9ea 	bl	80148 <_read>
   82d74:	1c43      	adds	r3, r0, #1
   82d76:	d000      	beq.n	82d7a <_read_r+0x1a>
   82d78:	bd70      	pop	{r4, r5, r6, pc}
   82d7a:	6823      	ldr	r3, [r4, #0]
   82d7c:	2b00      	cmp	r3, #0
   82d7e:	d0fb      	beq.n	82d78 <_read_r+0x18>
   82d80:	6033      	str	r3, [r6, #0]
   82d82:	bd70      	pop	{r4, r5, r6, pc}
   82d84:	20070b60 	.word	0x20070b60

00082d88 <UnityStrOk>:
   82d88:	00004b4f                                OK..

00082d8c <UnityStrSpacer>:
   82d8c:	0000202e                                . ..

00082d90 <UnityStrWas>:
   82d90:	73615720 00000020                        Was ...

00082d98 <UnityStrFail>:
   82d98:	4c494146 00000000                       FAIL....

00082da0 <UnityStrExpected>:
   82da0:	70784520 65746365 00002064               Expected ..

00082dac <UnityStrBreaker>:
   82dac:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   82dbc:	2d2d2d2d 002d2d2d                       -------.

00082dc4 <UnityStrResultsFailures>:
   82dc4:	69614620 6572756c 00002073               Failures ..

00082dd0 <UnityStrResultsIgnored>:
   82dd0:	6e674920 6465726f 00000020               Ignored ...

00082ddc <UnityStrResultsTests>:
   82ddc:	73655420 00207374                        Tests .

00082de4 <UnityStrPass>:
   82de4:	53534150 00000000 742f2e2e 2f747365     PASS....../test/
   82df4:	74736574 69676944 496c6174 00632e4f     testDigitalIO.c.
   82e04:	74736574 6769645f 6c617469 50657544     test_digitalDueP
   82e14:	33316e69 74696e49 696c6169 72506573     in13InitialisePr
   82e24:	7265706f 0000796c 74736574 6769645f     operly..test_dig
   82e34:	6c617469 50657544 33316e69 65537349     italDuePin13IsSe
   82e44:	00000074 74736574 6769645f 6c617469     t...test_digital
   82e54:	50657544 33316e69 6c437349 65726165     DuePin13IsCleare
   82e64:	00000064 74736574 6769645f 6c617469     d...test_digital
   82e74:	50657544 32326e69 74696e49 696c6169     DuePin22Initiali
   82e84:	72506573 7265706f 0000796c 74736574     seProperly..test
   82e94:	6769645f 6c617469 50657544 32326e69     _digitalDuePin22
   82ea4:	65537349 00000074 74736574 6769645f     IsSet...test_dig
   82eb4:	6c617469 50657544 32326e69 6c437349     italDuePin22IsCl
   82ec4:	65726165 00000064 74736574 6769645f     eared...test_dig
   82ed4:	6c617469 50657544 33316e69 32646e41     italDuePin13And2
   82ee4:	696e4932 6c616974 50657369 65706f72     2InitialisePrope
   82ef4:	00796c72 74736574 6769645f 6c617469     rly.test_digital
   82f04:	50657544 33316e69 32646e41 53734932     DuePin13And22IsS
   82f14:	00007465 74736574 6769645f 6c617469     et..test_digital
   82f24:	50657544 33316e69 65537369 646e4174     DuePin13isSetAnd
   82f34:	73493232 61656c43 00646572 00000043     22IsCleared.C...

00082f44 <_global_impure_ptr>:
   82f44:	20070138                                8.. 

00082f48 <_init>:
   82f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82f4a:	bf00      	nop
   82f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82f4e:	bc08      	pop	{r3}
   82f50:	469e      	mov	lr, r3
   82f52:	4770      	bx	lr

00082f54 <__init_array_start>:
   82f54:	00081f49 	.word	0x00081f49

00082f58 <__frame_dummy_init_array_entry>:
   82f58:	00080119                                ....

00082f5c <_fini>:
   82f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82f5e:	bf00      	nop
   82f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82f62:	bc08      	pop	{r3}
   82f64:	469e      	mov	lr, r3
   82f66:	4770      	bx	lr

00082f68 <__fini_array_start>:
   82f68:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900 00000000                       ..=.....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
2007016c:	00082f40 00000000 00000000 00000000     @/..............
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <_impure_ptr>:
20070560:	20070138                                8.. 

20070564 <__malloc_av_>:
	...
2007056c:	20070564 20070564 2007056c 2007056c     d.. d.. l.. l.. 
2007057c:	20070574 20070574 2007057c 2007057c     t.. t.. |.. |.. 
2007058c:	20070584 20070584 2007058c 2007058c     ... ... ... ... 
2007059c:	20070594 20070594 2007059c 2007059c     ... ... ... ... 
200705ac:	200705a4 200705a4 200705ac 200705ac     ... ... ... ... 
200705bc:	200705b4 200705b4 200705bc 200705bc     ... ... ... ... 
200705cc:	200705c4 200705c4 200705cc 200705cc     ... ... ... ... 
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 

2007096c <__malloc_trim_threshold>:
2007096c:	00020000                                ....

20070970 <__malloc_sbrk_base>:
20070970:	ffffffff                                ....
